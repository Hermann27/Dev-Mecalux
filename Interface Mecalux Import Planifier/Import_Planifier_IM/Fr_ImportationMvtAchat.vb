Imports Objets100Lib
Imports System
Imports System.Data.OleDb
Imports System.Collections
Imports System.Windows.Forms
Imports System.IO
Imports System.Xml
Imports Microsoft.VisualBasic
Public Class Fr_ImportationMvtAchat
    Public ProgresMax, IndexPrec, numLigne, numColonne, NbreLigne, NbreTotal, iRow As Integer
    Public Result, sColumnsSepar, DecFormat, LigneTypePrixUnitaire, EnteteStatutdocument, LigneValorisé, LignePrixUnitaireDevise As Object
    Public Filebool As Boolean
    Public ListeReliquat As List(Of String)
    Public PieceCommande, PieceArticle, IDDepotEntete, IDDepotLigne As Object
    Public EnteteBLFacture, EnteteCodeAffaire, EnteteCodeTiers, EnteteCodeTiersPayeur As Object
    Public EnteteColisagedeLivraison, EnteteCompteGeneral, EnteteDateDocument As Object
    Public EnteteDateLivraison, EnteteEcartValorisation, Entete1, Entete2, Entete3, PieceReliquat As Object
    Public Entete4, EnteteCatégorieComptable, EnteteCatégorietarifaire, EnteteConditiondeLivraison As Object
    Public EnteteIntituleDepot, EnteteIntituleDevise, EnteteIntituleExpédition, EntetePieceInterne, EntetePiecePrecedent As Object
    Public EnteteNatureTransaction, EnteteNomReprésentant, EnteteNombredeFacture As Object
    Public EntetePlanAnalytique, EntetePrenomReprésentant, EnteteReference, EnteteRegimeDocument As Object
    Public EnteteSoucheDocument, EnteteTauxescompte, EnteteTyPeDocument, EnteteCours As Object
    Public LigneCodeAffaire, LigneDatedeFabrication, LigneDatedeLivraison, LigneDatedePeremption As Object
    Public LigneDesignationArticle, LigneEnumereConditionnement, LigneFraisApproche As Object
    Public LigneIntituleDepot, LigneNSerieLot, LigneNomRepresentant, LignePlanAnalytique As Object
    Public LignePoidsBrut, LignePoidsNet, LignePrenomRepresentant, LignePrixdeRevientUnitaire As Object
    Public LignePrixUnitaire, LigneQuantite, LigneQuantiteConditionne, LigneReference, ProvenanceFacture As Object
    Public LigneReferenceArticleTiers, LigneTauxRemise1, LigneTauxRemise2, LigneTauxRemise3 As Object
    Public LigneTypeRemise1, LigneTypeRemise2, LigneTypeRemise3, EnteteFraisExpedition, EnteteContact, EnteteLangue, LigneCodeArticle, EnteteUniteColis As Object
    Public OleAdaptaterschema As OleDbDataAdapter
    Public OleSchemaDataset As DataSet
    Public OledatableSchema As DataTable
    Public OleSocieteConnect As OleDbConnection
    'Variable d'exception du deplacement de fichier
    Public DeviseTiers As Object = Nothing
    Public exceptionTrouve As Boolean = False
    Public Er_cre_entete_doc As Boolean = False
    Public ExisteLecture As Boolean = True
    Public infoListe As List(Of Integer)
    Public infoLigne As List(Of Integer)
    Public ListePiece As List(Of String)
    Public Document As IBODocumentAchat3 = Nothing
    Public LigneDocument As IBODocumentAchatLigne3 = Nothing
    Public DocumentReliquat As IBODocumentAchat3 = Nothing
    Public LigneReliquat As IBODocumentAchatLigne3 = Nothing
    Public PlanAna As IBPAnalytique3
    Public TraitementID As Integer
    Public Sub Fr_ImportationMvtAchat_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Try
            If Connected() = True Then
                ListBox1.Items.Clear()
                AfficheSchemasIntegrer()
                Affichagefichier()
                Initialiser()
                Datagridaffiche.Rows.Clear()
                Datagridaffiche.Columns.Clear()
                Me.WindowState = FormWindowState.Maximized
            End If
            encours.Close()
        Catch ex As Exception
            encours.Close()
        End Try
    End Sub
    Public Function SocieteConnected(ByRef BaseConsolide As String, ByRef Mot_Psql As String, ByRef Nom_Utsql As String, ByRef Serveur As String) As Boolean
        Try
            OleSocieteConnect = New OleDbConnection("provider=SQLOLEDB;UID=" & Trim(Nom_Utsql) & ";Pwd=" & Trim(Mot_Psql) & ";Initial Catalog=" & Trim(BaseConsolide) & ";Data Source=" & Trim(Serveur) & "")
            OleSocieteConnect.Open()
            Return True
        Catch ex As Exception
            Return False
        End Try
    End Function
    Private Sub AfficheSchemasIntegrer()
        Dim i As Integer
        Dim Insertion As String
        Dim OleInsertCmd As OleDbCommand
        Try
            Insertion = "DELETE FROM TRI_IMPORTFICHIER"
            OleInsertCmd = New OleDbCommand(Insertion)
            OleInsertCmd.Connection = OleConnenection
            OleInsertCmd.ExecuteNonQuery()
            OleAdaptaterschema = New OleDbDataAdapter("select * from SCHEMAS_IMPMOUV WHERE Categorie='Achat'", OleConnenection)
            OleSchemaDataset = New DataSet
            OleAdaptaterschema.Fill(OleSchemaDataset)
            OledatableSchema = OleSchemaDataset.Tables(0)
            For i = 0 To OledatableSchema.Rows.Count - 1
                If Trim(OledatableSchema.Rows(i).Item("Cible")) = "FTP" Then
                    Dim OleAdaptaterftp As OleDbDataAdapter
                    Dim OleftpDataset As DataSet
                    Dim Oledatableftp As DataTable
                    OleAdaptaterftp = New OleDbDataAdapter("select * from FTPREPERTOIRE WHERE IDDossier=" & OledatableSchema.Rows(i).Item("IDDossier") & " And Traitement='IMPORT DOCUMENT'", OleConnenection)
                    OleftpDataset = New DataSet
                    OleAdaptaterftp.Fill(OleftpDataset)
                    Oledatableftp = OleftpDataset.Tables(0)
                    If Oledatableftp.Rows.Count <> 0 Then

                        If Directory.Exists(Oledatableftp.Rows(0).Item("Repertoire")) = True Then
                            DowloadFtp("SCHEMAS_IMPMOUV", OledatableSchema.Rows(i).Item("IDDossier"), Oledatableftp.Rows(0).Item("Repertoire"))
                            OuvreLaListedeFichier(OledatableSchema.Rows(i).Item("Feuille_Excel"), OledatableSchema.Rows(i).Item("Mode"), OledatableSchema.Rows(i).Item("Type"), OledatableSchema.Rows(i).Item("NomFormat"), OledatableSchema.Rows(i).Item("CheminFormat"), Oledatableftp.Rows(0).Item("Repertoire"), Oledatableftp.Rows(0).Item("Repertoire"), Oledatableftp.Rows(0).Item("Repertoire"), OledatableSchema.Rows(i).Item("BaseCpta"), OledatableSchema.Rows(i).Item("BaseCial"), OledatableSchema.Rows(i).Item("Deplace"), OledatableSchema.Rows(i).Item("IDDossier"), OledatableSchema.Rows(i).Item("Cible"))
                        End If
                    End If
                Else
                    OuvreLaListedeFichier(OledatableSchema.Rows(i).Item("Feuille_Excel"), OledatableSchema.Rows(i).Item("Mode"), OledatableSchema.Rows(i).Item("Type"), OledatableSchema.Rows(i).Item("NomFormat"), OledatableSchema.Rows(i).Item("CheminFormat"), OledatableSchema.Rows(i).Item("NomFilexport"), OledatableSchema.Rows(i).Item("CheminFilexport"), OledatableSchema.Rows(i).Item("NomFilexport"), OledatableSchema.Rows(i).Item("BaseCpta"), OledatableSchema.Rows(i).Item("BaseCial"), OledatableSchema.Rows(i).Item("Deplace"), OledatableSchema.Rows(i).Item("IDDossier"), OledatableSchema.Rows(i).Item("Cible"))
                End If
            Next i
        Catch ex As Exception

        End Try
    End Sub
    Private Sub OuvreLaListedeFichier(ByRef Feuillexcel As String, ByRef ModeCreation As String, ByRef TypeFormalism As String, ByRef Formatname As String, ByRef PathFormat As String, ByRef NameDirectory As String, ByRef PathDirectory As String, ByRef Repert As String, ByRef BaseCpta As String, ByRef BaseCial As String, ByRef Deplacer As Boolean, ByRef Iddossier As Integer, ByRef CibleRe As String)
        Dim i As Integer
        Dim aLines() As String
        Dim Insertion As String
        Dim Datecreat, DateModif As Date
        Dim OleInsertCmd As OleDbCommand
        Try
            If Directory.Exists(PathDirectory) = True Then
                aLines = Directory.GetFiles(PathDirectory)
                For i = 0 To UBound(aLines)
                    Datecreat = Strings.FormatDateTime(File.GetCreationTime(aLines(i)), DateFormat.ShortDate)
                    DateModif = Strings.FormatDateTime(File.GetLastWriteTime(aLines(i)), DateFormat.ShortDate)
                    Insertion = "Insert into TRI_IMPORTFICHIER (Cible,PathFormat,CheminImport,CheminFichier,TypeFormat,Comptable,Commercial,NomFormat,Fichier,Mode,FeuilleExcel,Deplace,Dossier,DateCreation,DateModif) VALUES ('" & Join(Split(CibleRe, "'"), "''") & "','" & Join(Split(PathFormat, "'"), "''") & "','" & Join(Split(PathDirectory, "'"), "''") & "','" & Join(Split(aLines(i), "'"), "''") & "','" & Join(Split(TypeFormalism, "'"), "''") & "','" & Join(Split(BaseCpta, "'"), "''") & "','" & Join(Split(BaseCial, "'"), "''") & "','" & Join(Split(Formatname, "'"), "''") & "','" & Join(Split(System.IO.Path.GetFileName(Trim(aLines(i))), "'"), "''") & "','" & Join(Split(ModeCreation, "'"), "''") & "','" & Join(Split(Feuillexcel, "'"), "''") & "'," & Deplacer & ",'" & Join(Split(Repert, "'"), "''") & "','" & Datecreat & "','" & DateModif & "')"
                    OleInsertCmd = New OleDbCommand(Insertion)
                    OleInsertCmd.Connection = OleConnenection
                    OleInsertCmd.ExecuteNonQuery()
                Next i
                aLines = Nothing
            Else
                MsgBox("Ce Repertoire n'est pas valide! " & PathDirectory, MsgBoxStyle.Information, "Repertoire des Fichiers à Traiter")
            End If
        Catch ex As Exception
        End Try
    End Sub
    Private Sub Affichagefichier()
        Dim OleAdapsum As OleDbDataAdapter
        Dim OlesumDst As DataSet
        Dim OlesumData As DataTable
        Dim i, j As Integer
        iRow = 0
        DataListeIntegrer.Rows.Clear()
        OleAdapsum = New OleDbDataAdapter("select * from SCHEMAS_IMPMOUV WHERE Categorie='Achat'", OleConnenection)
        OlesumDst = New DataSet
        OleAdapsum.Fill(OlesumDst)
        OlesumData = OlesumDst.Tables(0)
        If OlesumData.Rows.Count <> 0 Then
            For i = 0 To OlesumData.Rows.Count - 1
                If OlesumData.Rows(i).Item("Cible") = "FTP" Then
                    Dim OleAdaptaterftp As OleDbDataAdapter
                    Dim OleftpDataset As DataSet
                    Dim Oledatableftp As DataTable
                    OleAdaptaterftp = New OleDbDataAdapter("select * from FTPREPERTOIRE WHERE IDDossier=" & OlesumData.Rows(i).Item("IDDossier") & " And Traitement='IMPORT DOCUMENT'", OleConnenection)
                    OleftpDataset = New DataSet
                    OleAdaptaterftp.Fill(OleftpDataset)
                    Oledatableftp = OleftpDataset.Tables(0)
                    If Oledatableftp.Rows.Count <> 0 Then
                        If OlesumData.Rows(i).Item("TriNom") = True Then
                            If OlesumData.Rows(i).Item("TriCreation") = True Then
                                If OlesumData.Rows(i).Item("TriModification") = True Then
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by Fichier ASC,DateCreation ASC,DateModif ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                Else
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by Fichier ASC,DateCreation ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                End If
                            Else
                                If OlesumData.Rows(i).Item("TriModification") = True Then
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by Fichier ASC,DateModif ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                Else
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by Fichier ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                End If
                            End If
                        Else
                            If OlesumData.Rows(i).Item("TriCreation") = True Then
                                If OlesumData.Rows(i).Item("TriModification") = True Then
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by DateCreation ASC,DateModif ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                Else
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by DateCreation ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                End If
                            Else
                                If OlesumData.Rows(i).Item("TriModification") = True Then
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "' Order by DateModif ASC", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                Else
                                    Dim OleAdapsumAna As OleDbDataAdapter
                                    Dim OlesumAnaDst As DataSet
                                    Dim OlesumAnaData As DataTable
                                    OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(Oledatableftp.Rows(0).Item("Repertoire")) & "'", OleConnenection)
                                    OlesumAnaDst = New DataSet
                                    OleAdapsumAna.Fill(OlesumAnaDst)
                                    OlesumAnaData = OlesumAnaDst.Tables(0)
                                    If OlesumAnaData.Rows.Count <> 0 Then
                                        For j = 0 To OlesumAnaData.Rows.Count - 1
                                            DataListeIntegrer.RowCount = iRow + 1
                                            DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                            DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                            DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                            DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                            DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                            DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                            DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                            DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                            DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                            DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                            DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                            DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                            DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                            DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                            iRow = iRow + 1
                                        Next j
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If OlesumData.Rows(i).Item("TriNom") = True Then
                        If OlesumData.Rows(i).Item("TriCreation") = True Then
                            If OlesumData.Rows(i).Item("TriModification") = True Then
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by Fichier ASC,DateCreation ASC,DateModif ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            Else
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by Fichier ASC,DateCreation ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            End If
                        Else
                            If OlesumData.Rows(i).Item("TriModification") = True Then
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by Fichier ASC,DateModif ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            Else
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by Fichier ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            End If
                        End If
                    Else
                        If OlesumData.Rows(i).Item("TriCreation") = True Then
                            If OlesumData.Rows(i).Item("TriModification") = True Then
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by DateCreation ASC,DateModif ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            Else
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by DateCreation ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            End If
                        Else
                            If OlesumData.Rows(i).Item("TriModification") = True Then
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "' Order by DateModif ASC", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            Else
                                Dim OleAdapsumAna As OleDbDataAdapter
                                Dim OlesumAnaDst As DataSet
                                Dim OlesumAnaData As DataTable
                                OleAdapsumAna = New OleDbDataAdapter("select * from TRI_IMPORTFICHIER Where Cible='" & OlesumData.Rows(i).Item("Cible") & "' And  PathFormat='" & Trim(OlesumData.Rows(i).Item("CheminFormat")) & "' And CheminImport='" & Trim(OlesumData.Rows(i).Item("CheminFilexport")) & "'", OleConnenection)
                                OlesumAnaDst = New DataSet
                                OleAdapsumAna.Fill(OlesumAnaDst)
                                OlesumAnaData = OlesumAnaDst.Tables(0)
                                If OlesumAnaData.Rows.Count <> 0 Then
                                    For j = 0 To OlesumAnaData.Rows.Count - 1
                                        DataListeIntegrer.RowCount = iRow + 1
                                        DataListeIntegrer.Rows(iRow).Cells("ID").Value = OlesumData.Rows(i).Item("IDDossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Cible").Value = OlesumData.Rows(i).Item("Cible")
                                        DataListeIntegrer.Rows(iRow).Cells("FichierExport").Value = OlesumAnaData.Rows(j).Item("Fichier")
                                        DataListeIntegrer.Rows(iRow).Cells("CheminExport").Value = OlesumAnaData.Rows(j).Item("CheminFichier")
                                        DataListeIntegrer.Rows(iRow).Cells("Comptable").Value = OlesumAnaData.Rows(j).Item("Comptable")
                                        DataListeIntegrer.Rows(iRow).Cells("Commercial").Value = OlesumAnaData.Rows(j).Item("Commercial")
                                        DataListeIntegrer.Rows(iRow).Cells("Chemin").Value = OlesumAnaData.Rows(j).Item("PathFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("NomFormat").Value = OlesumAnaData.Rows(j).Item("NomFormat")
                                        DataListeIntegrer.Rows(iRow).Cells("TypeFormat").Value = Afficheauuser(OlesumAnaData.Rows(j).Item("TypeFormat"))
                                        DataListeIntegrer.Rows(iRow).Cells("Mode").Value = OlesumAnaData.Rows(j).Item("Mode")
                                        DataListeIntegrer.Rows(iRow).Cells("FeuilleExcel").Value = OlesumAnaData.Rows(j).Item("FeuilleExcel")
                                        DataListeIntegrer.Rows(iRow).Cells("Deplace").Value = OlesumAnaData.Rows(j).Item("Deplace")
                                        DataListeIntegrer.Rows(iRow).Cells("Dossier").Value = OlesumAnaData.Rows(j).Item("Dossier")
                                        DataListeIntegrer.Rows(iRow).Cells("Valider").Value = True
                                        DataListeIntegrer.Rows(iRow).Cells("Modification").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateModif"), DateFormat.ShortDate)
                                        DataListeIntegrer.Rows(iRow).Cells("Creation").Value = Strings.FormatDateTime(OlesumAnaData.Rows(j).Item("DateCreation"), DateFormat.ShortDate)
                                        iRow = iRow + 1
                                    Next j
                                End If
                            End If
                        End If
                    End If
                End If
            Next i
        End If
    End Sub    
    Private Function AffichFormatintegration(ByRef PathFileFormat As String, ByRef Affichetype As String) As Boolean
        Dim NomColonne As String
        Dim NomEntete As String
        Dim PosLeft As Integer
        Dim posGauche As Integer
        Dim Libre As String
        Dim Defaut, Piece, PieceCmde, LigneArticle As String
        Dim ValeurDefaut, SageFichier As String
        Datagridaffiche.Rows.Clear()
        Datagridaffiche.Columns.Clear()
        If File.Exists(PathFileFormat) = True Then
            Dim FileXml As New XmlTextReader(PathFileFormat)
            Try
                While (FileXml.Read())
                    If FileXml.LocalName = "ColUse" Then
                        NomColonne = FileXml.ReadString
                        FileXml.Read()

                        NomEntete = FileXml.ReadString
                        FileXml.Read()
                        PosLeft = FileXml.ReadString

                        If Trim(Affichetype) = "Excel" Then
                        Else
                            If Trim(Affichetype) = "Longueur Fixe" Then
                                FileXml.Read()
                                posGauche = FileXml.ReadString
                            End If
                        End If
                        FileXml.Read()
                        Libre = FileXml.ReadString

                        FileXml.Read()
                        SageFichier = FileXml.ReadString

                        FileXml.Read()
                        Piece = FileXml.ReadString

                        FileXml.Read()
                        PieceCmde = FileXml.ReadString

                        FileXml.Read()
                        LigneArticle = FileXml.ReadString

                        FileXml.Read()
                        Defaut = FileXml.ReadString

                        FileXml.Read()
                        ValeurDefaut = FileXml.ReadString

                        FileXml.Read()
                        DecFormat = FileXml.ReadString
                        If Trim(Affichetype) = "Longueur Fixe" Then
                            If (NomColonne <> "" And NomEntete <> "") And (CInt(PosLeft) >= 0 And CInt(posGauche) >= 0) Then
                                CreateComboBoxColumn(Datagridaffiche, NomColonne & "-->(" & PosLeft & ")" & "<-->[" & posGauche & "]" & "->{" & Libre & "-" & SageFichier & "}", NomEntete)
                            End If
                        Else
                            If (NomColonne <> "" And NomEntete <> "") And (CInt(PosLeft) >= 0 And Trim(Libre) <> "") Then
                                CreateComboBoxColumn(Datagridaffiche, NomColonne & "-->(" & PosLeft & ")" & "<-->[" & Libre & "-" & SageFichier & "]", NomEntete)
                            End If
                        End If
                    End If
                End While
                FileXml.Close()
                AffichFormatintegration = True
            Catch ex As Exception
                AffichFormatintegration = False
            End Try
        End If
    End Function
    Private Sub Initialiser()
        ProgresMax = 0
        NbreLigne = 0
        Label8.Text = ""
        NbreTotal = 0
    End Sub
    Private Sub Lecture_Suivant_DuFichierExcel(ByVal sPathFilexporter As String, ByVal spathFileFormat As String, ByRef Formatdefichier As String, ByRef tablefeuille As String, ByRef sColumnsSepar As String)
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim jColD As Integer
        Dim iColPosition As Integer
        Dim iColGauchetxt As String
        Dim iLine As Integer
        Dim aRows() As String
        Dim i As Integer, aCols() As String
        iLine = 0
        aRows = Nothing
        If Trim(Formatdefichier) = "Excel" Then
            Try
                If Trim(tablefeuille) <> "" Then
                    If OleExcelConnected.State = ConnectionState.Open Then
                        OleExcelConnected.Close()
                    End If
                    If LoginAuFichierExcel(Trim(sPathFilexporter)) = True Then
                        If AffichFormatintegration(spathFileFormat, Formatdefichier) = True Then
                            ProgressBar1.Value = ProgressBar1.Minimum
                            Datagridaffiche.Rows.Clear()
                            NbreTotal = DecFormat
                            OleAdaptater = New OleDbDataAdapter("select * from [" & tablefeuille & "$] ", OleExcelConnected)
                            OleAfficheDataset = New DataSet
                            OleAdaptater.Fill(OleAfficheDataset)
                            Oledatable = OleAfficheDataset.Tables(0)
                            If Oledatable.Rows.Count <> 0 Then
                                ProgresMax = Oledatable.Rows.Count - DecFormat
                                For i = DecFormat To Oledatable.Rows.Count - 1
                                    Datagridaffiche.RowCount = iLine + 1
                                    For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                        iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                        If iColPosition <= Oledatable.Columns.Count Then
                                            If iColPosition <> 0 Then
                                                If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                                                    Datagridaffiche.Item(jColD, iLine).Value = Trim(Oledatable.Rows(i).Item(iColPosition - 1))
                                                Else
                                                    Datagridaffiche.Item(jColD, iLine).Value = ""
                                                End If
                                            Else
                                                Datagridaffiche.Item(jColD, iLine).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatdefichier)
                                            End If
                                        Else
                                            Datagridaffiche.Item(jColD, iLine).Value = ""
                                        End If
                                    Next jColD
                                    iLine = iLine + 1
                                    If i >= 500 Then
                                        Exit Sub
                                    End If
                                Next i
                            End If
                        Else
                            Label5.Text = "Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat
                        End If
                    Else
                        Label5.Text = "Echec de Connexion au fichier Excel :" & sPathFilexporter & " : Echec de traitement"
                    End If
                Else
                    Label5.Text = "Aucune Feuille Excel paramétrée pour le fichier :" & Trim(sPathFilexporter) & " : Echec de traitement"
                End If
            Catch ex As Exception
            End Try
        Else
            If Trim(Formatdefichier) = "Délimité" Or Trim(Formatdefichier) = "Tabulation" Or Trim(Formatdefichier) = "Pipe" Then
                Try
                    If AffichFormatintegration(spathFileFormat, Formatdefichier) = True Then
                        aRows = GetArrayFile(sPathFilexporter, aRows)
                        ProgressBar1.Value = ProgressBar1.Minimum
                        Datagridaffiche.Rows.Clear()
                        ProgresMax = UBound(aRows) + 1 - DecFormat
                        For i = DecFormat To UBound(aRows)
                            aCols = Split(aRows(i), sColumnsSepar)
                            Datagridaffiche.RowCount = iLine + 1
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <> 0 Then
                                    If iColPosition <= (UBound(aCols) + 1) Then
                                        Datagridaffiche.Item(jColD, iLine).Value = Trim(aCols(iColPosition - 1))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine).Value = ""
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatdefichier)
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i >= 500 Then
                                Exit Sub
                            End If
                        Next i
                    Else

                    End If
                Catch ex As Exception
                End Try
            Else
                If Trim(Formatdefichier) = "Longueur Fixe" Then
                    Try
                        If AffichFormatintegration(spathFileFormat, Formatdefichier) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            NbreTotal = DecFormat
                            ProgressBar1.Value = ProgressBar1.Minimum
                            Datagridaffiche.Rows.Clear()
                            ProgresMax = UBound(aRows) + 1 - DecFormat
                            For i = DecFormat To UBound(aRows)
                                Datagridaffiche.RowCount = iLine + 1
                                For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                    iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), "]") - 1))
                                    iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                        Datagridaffiche.Item(jColD, iLine).Value = Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatdefichier)
                                    End If
                                Next jColD
                                iLine = iLine + 1
                                If i >= 100 Then
                                    Exit Sub
                                End If
                            Next i
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                    End Try
                End If
            End If
        End If
    End Sub
    Private Function LireFichierFormat(ByRef ScheminFileFormat As String, ByRef Colname As String, ByRef Lireformatype As String) As Object
        Dim NomColonne As String
        Dim NomEntete As String
        Dim PosLeft As Integer
        Dim poslongueur, PieceCmde, LigneArticle As String
        Dim Defaut, Piece, SageFichier As String
        Dim ValeurDefaut, Infolibre As String
        Try
            If Trim(ScheminFileFormat) <> "" Then
                If File.Exists(ScheminFileFormat) = True Then
                    Dim FileXml As New XmlTextReader(Trim(ScheminFileFormat))
                    While (FileXml.Read())
                        If FileXml.LocalName = "ColUse" Then
                            NomColonne = FileXml.ReadString

                            FileXml.Read()
                            NomEntete = FileXml.ReadString

                            FileXml.Read()
                            PosLeft = FileXml.ReadString

                            If Trim(Lireformatype) = "Excel" Then
                            Else
                                If Trim(Lireformatype) = "Longueur Fixe" Then
                                    FileXml.Read()
                                    poslongueur = FileXml.ReadString
                                End If
                            End If

                            FileXml.Read()
                            Infolibre = FileXml.ReadString

                            FileXml.Read()
                            SageFichier = FileXml.ReadString

                            FileXml.Read()
                            Piece = FileXml.ReadString

                            FileXml.Read()
                            PieceCmde = FileXml.ReadString

                            FileXml.Read()
                            LigneArticle = FileXml.ReadString

                            FileXml.Read()
                            Defaut = FileXml.ReadString

                            FileXml.Read()
                            ValeurDefaut = FileXml.ReadString
                            If Colname = NomEntete Then
                                Result = ValeurDefaut
                            End If
                        End If
                    End While
                    FileXml.Close()
                End If
            End If
        Catch ex As Exception
        End Try
        Return Result
    End Function
    
    Private Sub vidage()
        ProvenanceFacture = Nothing
        PieceCommande = Nothing
        PieceArticle = Nothing
        EnteteStatutdocument = Nothing
        EnteteFraisExpedition = Nothing
        LigneTypeRemise2 = Nothing
        LigneTypeRemise3 = Nothing
        EnteteUniteColis = Nothing
        LigneCodeArticle = Nothing
        EnteteBLFacture = Nothing
        EnteteCodeAffaire = Nothing
        EnteteCodeTiers = Nothing
        IDDepotEntete = Nothing
        IDDepotLigne = Nothing
        EnteteCodeTiersPayeur = Nothing
        EnteteColisagedeLivraison = Nothing
        EnteteCompteGeneral = Nothing
        EnteteDateDocument = Nothing
        EnteteDateLivraison = Nothing
        EnteteEcartValorisation = Nothing
        Entete1 = Nothing
        Entete2 = Nothing
        Entete3 = Nothing
        Entete4 = Nothing
        EnteteCatégorieComptable = Nothing
        EnteteCatégorietarifaire = Nothing
        EnteteConditiondeLivraison = Nothing
        EnteteIntituleDepot = Nothing
        EnteteIntituleDevise = Nothing
        EnteteIntituleExpédition = Nothing
        EntetePieceInterne = Nothing
        EnteteNatureTransaction = Nothing
        EnteteNomReprésentant = Nothing
        EnteteNombredeFacture = Nothing
        EntetePlanAnalytique = Nothing
        EntetePrenomReprésentant = Nothing
        EnteteReference = Nothing
        EnteteRegimeDocument = Nothing
        EnteteSoucheDocument = Nothing
        EnteteTauxescompte = Nothing
        EnteteTyPeDocument = Nothing
        LigneCodeAffaire = Nothing
        LigneDatedeFabrication = Nothing
        LigneDatedeLivraison = Nothing
        LigneDatedePeremption = Nothing
        LigneDesignationArticle = Nothing
        LigneEnumereConditionnement = Nothing
        LigneFraisApproche = Nothing
        LigneTypePrixUnitaire = Nothing
        LigneIntituleDepot = Nothing
        LigneNSerieLot = Nothing
        LigneNomRepresentant = Nothing
        LignePlanAnalytique = Nothing
        LignePoidsBrut = Nothing
        LignePoidsNet = Nothing
        LignePrenomRepresentant = Nothing
        LignePrixdeRevientUnitaire = Nothing
        LignePrixUnitaire = Nothing
        LigneQuantite = Nothing
        LigneQuantiteConditionne = Nothing
        LigneReference = Nothing
        LigneReferenceArticleTiers = Nothing
        LigneTauxRemise1 = Nothing
        LigneTauxRemise2 = Nothing
        LigneTauxRemise3 = Nothing
        LigneTypeRemise1 = Nothing
        EnteteContact = Nothing
        EnteteLangue = Nothing
        EnteteCours = Nothing
        LignePrixUnitaireDevise = Nothing
        LigneValorisé = Nothing
    End Sub
    Private Sub RecuperationEnregistrement(ByRef sPathFilexporter As String, ByRef spathFileFormat As String, ByRef typeFormat As String, ByRef Base_Excel As String, ByRef sColumnsSepar As String, ByRef ListePiece As List(Of String), ByRef PieceCreation As Object, ByRef PieceAuto As Object)
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim jColD As Integer
        Dim aRows(), aCols(), Dataname(), FichierRecup As String
        Dim iColPosition, iColGauchetxt As Integer
        Dim i, j As Integer
        Dim Piecedocument As Object = Nothing
        aRows = Nothing
        Dataname = Split(sPathFilexporter, "\")
        FichierRecup = "Recup_" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & Dataname(UBound(Dataname))
        If ListePiece.Count <> 0 Then
            If Trim(typeFormat) = "Excel" Then
                'Dim Cnapplica As New Microsoft.Office.Interop.Excel.Application
                'Dim Cnbook As Microsoft.Office.Interop.Excel.Workbook
                'Dim Cnsheet As Microsoft.Office.Interop.Excel.Worksheet
                'Try
                '    If AffichFormatintegration(spathFileFormat, typeFormat) = True Then
                '        Datagridaffiche.Rows.Clear()
                '        OleAdaptater = New OleDbDataAdapter("select * from [" & Base_Excel & "$] ", OleExcelConnected)
                '        OleAfficheDataset = New DataSet
                '        OleAdaptater.Fill(OleAfficheDataset)
                '        Oledatable = OleAfficheDataset.Tables(0)
                '        If Oledatable.Rows.Count <> 0 Then
                '            Cnapplica = CreateObject("Excel.Application")
                '            Cnbook = Cnapplica.Workbooks.Add
                '            Cnsheet = Cnbook.Worksheets.Add
                '            For i = Cnbook.Sheets.Count To 1 Step -1
                '                If Cnbook.Sheets(i).name() = Base_Excel Then
                '                    Cnbook.Worksheets(i).Delete()
                '                End If
                '            Next i
                '            Cnsheet.Name = Base_Excel
                '            ProgressBar1.Value = ProgressBar1.Minimum
                '            ProgressBar1.Maximum = Oledatable.Rows.Count - DecFormat
                '            j = 0 + CInt(DecFormat)
                '            For i = DecFormat To Oledatable.Rows.Count - 1
                '                If Datagridaffiche.Columns.Contains(PieceCreation) = True Then
                '                    iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1), "(")))
                '                    If iColPosition <= Oledatable.Columns.Count Then
                '                        If iColPosition <> 0 Then
                '                            If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                '                                If Trim(PieceAuto) = "non" Then
                '                                    If Strings.Len(Trim(Oledatable.Rows(i).Item(iColPosition - 1))) <= 8 Then
                '                                        Piecedocument = Formatage_Chaine(Trim(Oledatable.Rows(i).Item(iColPosition - 1)))
                '                                    Else
                '                                        Piecedocument = Formatage_Chaine(Strings.Left(Trim(Oledatable.Rows(i).Item(iColPosition - 1)), 8))
                '                                    End If
                '                                Else
                '                                    Piecedocument = Trim(Oledatable.Rows(i).Item(iColPosition - 1))
                '                                End If
                '                                If ListePiece.Contains(Trim(Piecedocument)) = True Then
                '                                    j = j + 1
                '                                    For jColD = 0 To Oledatable.Columns.Count - 1
                '                                        If Convert.IsDBNull(Oledatable.Rows(i).Item(jColD)) = False Then
                '                                            Cnsheet.Cells(j, jColD + 1) = Oledatable.Rows(i).Item(jColD)
                '                                        End If
                '                                    Next jColD
                '                                End If
                '                            End If
                '                        Else
                '                            If Trim(PieceAuto) = "non" Then
                '                                If Strings.Len(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat))) <= 8 Then
                '                                    Piecedocument = Formatage_Chaine(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat)))
                '                                Else
                '                                    Piecedocument = Formatage_Chaine(Strings.Left(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat)), 8))
                '                                End If
                '                            Else
                '                                Piecedocument = Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat))
                '                            End If
                '                            If ListePiece.Contains(Trim(Piecedocument)) = True Then
                '                                j = j + 1
                '                                For jColD = 0 To Oledatable.Columns.Count - 1
                '                                    If Convert.IsDBNull(Oledatable.Rows(i).Item(jColD)) = False Then
                '                                        Cnsheet.Cells(j, jColD + 1) = Oledatable.Rows(i).Item(jColD)
                '                                    End If
                '                                Next jColD
                '                            End If
                '                        End If
                '                    End If
                '                End If
                '                ProgressBar1.Value = ProgressBar1.Value + 1
                '            Next i
                '            Cnbook.SaveCopyAs(PathsFileRecuperer & "" & FichierRecup)
                '            Cnapplica.DefaultSaveFormat = Microsoft.Office.Interop.Excel.XlFileFormat.xlExcel5
                '            Cnbook.Close(False) 'Ferme le classeur
                '            Cnapplica.Quit()
                '            Cnbook = Nothing
                '            Cnapplica = Nothing
                '        End If
                '    Else
                '        ErreurJrn.WriteLine("Impossible d'integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                '    End If
                'Catch ex As Exception
                '    exceptionTrouve = True
                'End Try
            Else
                If Trim(typeFormat) = "Délimité" Or Trim(typeFormat) = "Tabulation" Or Trim(typeFormat) = "Pipe" Then
                    Try
                        Error_journal = File.AppendText(PathsFileRecuperer & "" & FichierRecup)
                        If AffichFormatintegration(spathFileFormat, typeFormat) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            Datagridaffiche.Rows.Clear()
                            ProgressBar1.Value = ProgressBar1.Minimum
                            ProgressBar1.Maximum = UBound(aRows) + 1 - DecFormat
                            For i = DecFormat To UBound(aRows)
                                aCols = Split(aRows(i), sColumnsSepar)
                                If Datagridaffiche.Columns.Contains(PieceCreation) = True Then
                                    iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Then
                                        If iColPosition <= (UBound(aCols) + 1) Then
                                            If Trim(PieceAuto) = "non" Then
                                                If Strings.Len(Trim(aCols(iColPosition - 1))) <= 8 Then
                                                    Piecedocument = Formatage_Chaine(Trim(aCols(iColPosition - 1)))
                                                Else
                                                    Piecedocument = Formatage_Chaine(Strings.Left(Trim(aCols(iColPosition - 1)), 8))
                                                End If
                                            Else
                                                Piecedocument = Trim(aCols(iColPosition - 1))
                                            End If
                                            If ListePiece.Contains(Trim(Piecedocument)) = True Then
                                                Error_journal.WriteLine(aRows(i))
                                            End If
                                        End If
                                    Else
                                        If Trim(PieceAuto) = "non" Then
                                            If Strings.Len(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat))) <= 8 Then
                                                Piecedocument = Formatage_Chaine(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat)))
                                            Else
                                                Piecedocument = Formatage_Chaine(Strings.Left(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat)), 8))
                                            End If
                                        Else
                                            Piecedocument = Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat))
                                        End If
                                        If ListePiece.Contains(Trim(Piecedocument)) = True Then
                                            Error_journal.WriteLine(aRows(i))
                                        End If
                                    End If
                                End If
                                ProgressBar1.Value = ProgressBar1.Value + 1
                            Next i
                            Error_journal.Close()
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                        exceptionTrouve = True
                    End Try
                Else
                    If Trim(typeFormat) = "Longueur Fixe" Then
                        Try
                            Error_journal = File.AppendText(PathsFileRecuperer & "" & FichierRecup)
                            If AffichFormatintegration(spathFileFormat, typeFormat) = True Then
                                aRows = GetArrayFile(sPathFilexporter, aRows)
                                Datagridaffiche.Rows.Clear()
                                ProgressBar1.Value = ProgressBar1.Minimum
                                ProgressBar1.Maximum = UBound(aRows) + 1 - DecFormat
                                For i = DecFormat To UBound(aRows)
                                    If Datagridaffiche.Columns.Contains(PieceCreation) = True Then
                                        iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(PieceCreation).HeaderText, Strings.Len(Datagridaffiche.Columns(PieceCreation).HeaderText) - InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(PieceCreation).HeaderText, Strings.Len(Datagridaffiche.Columns(PieceCreation).HeaderText) - InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, "[")), "]") - 1))
                                        iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(PieceCreation).HeaderText, InStr(Datagridaffiche.Columns(PieceCreation).HeaderText, ")") - 1), "(")))
                                        If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                            If Trim(PieceAuto) = "non" Then
                                                If Strings.Len(Trim(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt)))) <= 8 Then
                                                    Piecedocument = Formatage_Chaine(Trim(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))))
                                                Else
                                                    Piecedocument = Formatage_Chaine(Strings.Left(Trim(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))), 8))
                                                End If
                                            Else
                                                Piecedocument = Trim(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt)))
                                            End If
                                            If ListePiece.Contains(Trim(Piecedocument)) = True Then
                                                Error_journal.WriteLine(aRows(i))
                                            End If
                                        Else
                                            If Trim(PieceAuto) = "non" Then
                                                If Strings.Len(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat))) <= 8 Then
                                                    Piecedocument = Formatage_Chaine(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat)))
                                                Else
                                                    Piecedocument = Formatage_Chaine(Strings.Left(Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat)), 8))
                                                End If
                                            Else
                                                Piecedocument = Trim(LireFichierFormat(spathFileFormat, PieceCreation, typeFormat))
                                            End If
                                            If ListePiece.Contains(Trim(Piecedocument)) = True Then
                                                Error_journal.WriteLine(aRows(i))
                                            End If
                                        End If
                                    End If
                                    ProgressBar1.Value = ProgressBar1.Value + 1
                                Next i
                                Error_journal.Close()
                            Else
                                ErreurJrn.WriteLine("Impossible d'integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                            End If
                        Catch ex As Exception
                            exceptionTrouve = True
                        End Try
                    End If
                End If
            End If
        End If
    End Sub
    Private Sub Integration_Du_Fichier(ByVal sPathFilexporter As String, ByVal spathFileFormat As String, ByRef Formatype As String, ByRef Base_Excel As String, ByRef sColumnsSepar As String, ByRef FormatdeDatefich As String, ByRef DocumentPiece As Object, ByRef PieceAutomatique As Object)
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim m As Integer
        Dim jColD As Integer
        Dim iLine As Integer
        Dim aRows() As String
        Dim iColPosition, iColGauchetxt As Integer
        Dim i As Integer, aCols() As String
        Initialiser()
        iLine = 0
        aRows = Nothing
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If
        End If
        If Trim(Formatype) = "Excel" Then
            Try
                If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                    ProgressBar1.Value = ProgressBar1.Minimum
                    Datagridaffiche.Rows.Clear()
                    NbreTotal = DecFormat
                    OleAdaptater = New OleDbDataAdapter("select * from [" & Base_Excel & "$] ", OleExcelConnected)
                    OleAfficheDataset = New DataSet
                    OleAdaptater.Fill(OleAfficheDataset)
                    Oledatable = OleAfficheDataset.Tables(0)
                    If Oledatable.Rows.Count <> 0 Then
                        ProgresMax = Oledatable.Rows.Count - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To Oledatable.Rows.Count - 1
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <= Oledatable.Columns.Count Then
                                    If iColPosition <> 0 Then
                                        If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                                            Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Oledatable.Rows(i).Item(iColPosition - 1))
                                        Else
                                            Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                        End If
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Integrer_Ecriture(FormatdeDatefich, DocumentPiece, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                m = iLine
                            Else
                                If i = (Oledatable.Rows.Count - 1) Then
                                    Me.Refresh()
                                    Integrer_Ecriture(FormatdeDatefich, DocumentPiece, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                    m = iLine
                                End If
                            End If
                        Next i
                    End If
                Else
                    ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                End If
            Catch ex As Exception
                exceptionTrouve = True
            End Try
        Else
            If Trim(Formatype) = "Délimité" Or Trim(Formatype) = "Tabulation" Or Trim(Formatype) = "Pipe" Then
                Try
                    If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                        aRows = GetArrayFile(sPathFilexporter, aRows)
                        NbreTotal = DecFormat
                        ProgressBar1.Value = ProgressBar1.Minimum
                        Datagridaffiche.Rows.Clear()
                        ProgresMax = UBound(aRows) + 1 - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To UBound(aRows)
                            aCols = Split(aRows(i), sColumnsSepar)
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <> 0 Then
                                    If iColPosition <= (UBound(aCols) + 1) Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(aCols(iColPosition - 1))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Integrer_Ecriture(FormatdeDatefich, DocumentPiece, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                m = iLine
                            Else
                                If i = UBound(aRows) Then
                                    Me.Refresh()
                                    Integrer_Ecriture(FormatdeDatefich, DocumentPiece, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                    m = iLine
                                End If
                            End If
                        Next i
                    Else
                        ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                    End If
                Catch ex As Exception
                    exceptionTrouve = True
                End Try
            Else
                If Trim(Formatype) = "Longueur Fixe" Then
                    Try
                        If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            NbreTotal = DecFormat
                            ProgressBar1.Value = ProgressBar1.Minimum
                            Datagridaffiche.Rows.Clear()
                            ProgresMax = UBound(aRows) + 1 - DecFormat
                            m = 0
                            infoListe = New List(Of Integer)
                            infoLigne = New List(Of Integer)
                            For i = DecFormat To UBound(aRows)
                                Datagridaffiche.RowCount = iLine + 1 - m
                                For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                    iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), "]") - 1))
                                    iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Next jColD
                                iLine = iLine + 1
                                If i Mod 10 = 0 Then
                                    Me.Refresh()
                                    Integrer_Ecriture(FormatdeDatefich, DocumentPiece, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                    m = iLine
                                Else
                                    If i = UBound(aRows) Then
                                        Me.Refresh()
                                        Integrer_Ecriture(FormatdeDatefich, DocumentPiece, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                        m = iLine
                                    End If
                                End If
                            Next i
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                        exceptionTrouve = True
                    End Try
                End If
            End If
        End If
    End Sub
    Private Sub Integrer_Ecriture(ByRef FormatfichierDate As String, ByRef DocumentCreationPiece As Object, ByRef PieceAutoma As Object, ByRef FormatIntegrer As Object, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String, ByRef FormatQteU As Integer)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Me.Cursor = Cursors.WaitCursor
        BT_integrer.Enabled = False
        If Datagridaffiche.RowCount >= 0 Then
            ProgressBar1.Maximum = ProgresMax
            Try
                For numLigne = 0 To Datagridaffiche.RowCount - 1
                    vidage()
                    NbreTotal = NbreTotal + 1
                    Label5.Refresh()
                    Label5.Text = "Integration En Cours..."
                    For numColonne = 0 To Datagridaffiche.ColumnCount - 1
                        'Entête Document
                        If Trim(PieceAutoma) = "non" Then
                            If Datagridaffiche.Columns.Contains(DocumentCreationPiece) = True Then
                                If Strings.Len(Trim(Datagridaffiche.Rows(numLigne).Cells(DocumentCreationPiece).Value)) <= 8 Then
                                    EntetePieceInterne = Formatage_Chaine(Trim(Datagridaffiche.Rows(numLigne).Cells(DocumentCreationPiece).Value))
                                Else
                                    EntetePieceInterne = Formatage_Chaine(Strings.Left(Trim(Datagridaffiche.Rows(numLigne).Cells(DocumentCreationPiece).Value), 8))
                                End If
                            End If
                        Else
                            EntetePieceInterne = Trim(Datagridaffiche.Rows(numLigne).Cells(DocumentCreationPiece).Value)
                        End If
                        If InStr(IdentifiantCommande, ",") <> 0 Then
                            If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                PieceCommande = Join(Split(Trim(Datagridaffiche.Rows(numLigne).Cells(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)).Value), "'"), "''")
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                            PieceArticle = Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantArticle).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteStatutdocument" Then
                            EnteteStatutdocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "ProvenanceFacture" Then
                            ProvenanceFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteUniteColis" Then
                            EnteteUniteColis = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTyPeDocument" Then
                            EnteteTyPeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiers" Then
                        '    EnteteCodeTiers = Formatage_Chaine(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                        'End If
                        Dim OleDocAdapter As OleDbDataAdapter
                        Dim OleDocDataset As DataSet
                        Dim OleDocDatable As DataTable

                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiers" Then 'Modif 20/03/2015 Hermann
                            OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE DO_PIECE='" & Join(Split(Trim(PieceCommande), "'"), "''") & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                            OleDocDataset = New DataSet
                            OleDocAdapter.Fill(OleDocDataset)
                            OleDocDatable = OleDocDataset.Tables(0)
                            If OleDocDatable.Rows.Count <> 0 Then
                                If Trim(EnteteCodeTiers) = "" Then
                                    EnteteCodeTiers = OleDocDatable.Rows(0).Item("DO_Tiers")
                                End If
                            Else
                                EnteteCodeTiers = Formatage_Chaine(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                            End If
                            If EnteteCodeTiers = "" Then
                                ErreurJrn.WriteLine("<La Commande Client est introuvable et le client non trouvé N¤ Pièce : " & Trim(EntetePieceInterne) & " Le BL ne sera pas importé")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteContact" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 35 Then
                                EnteteContact = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteContact = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 35)
                            End If
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "Entete1" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete1 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete2" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete2 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete3" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete3 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete4" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete4 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete4 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteBLFacture" Then
                            EnteteBLFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCatégorieComptable" Then
                            EnteteCatégorieComptable = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCatégorietarifaire" Then
                            EnteteCatégorietarifaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeAffaire" Then
                            EnteteCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiersPayeur" Then
                            EnteteCodeTiersPayeur = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteColisagedeLivraison" Then
                            EnteteColisagedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCompteGeneral" Then
                            EnteteCompteGeneral = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteConditiondeLivraison" Then
                            EnteteConditiondeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteDateDocument" Then
                            EnteteDateDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteDateLivraison" Then
                            EnteteDateLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteEcartValorisation" Then
                            EnteteEcartValorisation = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleDepot" Then
                            EnteteIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotEntete" Then
                            IDDepotEntete = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotLigne" Then
                            IDDepotLigne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleDevise" Then
                            EnteteIntituleDevise = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleExpédition" Then
                            EnteteIntituleExpédition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNatureTransaction" Then
                            EnteteNatureTransaction = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNombredeFacture" Then
                            EnteteNombredeFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNomReprésentant" Then
                            EnteteNomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EntetePrenomReprésentant" Then
                            EntetePrenomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "EntetePlanAnalytique" Then
                            EntetePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                EnteteReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteRegimeDocument" Then
                            EnteteRegimeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteSoucheDocument" Then
                            EnteteSoucheDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTauxescompte" Then
                            EnteteTauxescompte = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'Ligne Document
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeAffaire" Then
                            LigneCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedeFabrication" Then
                            LigneDatedeFabrication = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedeLivraison" Then
                            LigneDatedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedePeremption" Then
                            LigneDatedePeremption = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDesignationArticle" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 69 Then
                                LigneDesignationArticle = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneDesignationArticle = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 69)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneEnumereConditionnement" Then
                            LigneEnumereConditionnement = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneFraisApproche" Then
                            LigneFraisApproche = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteFraisExpedition" Then
                            EnteteFraisExpedition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneIntituleDepot" Then
                            LigneIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneNomRepresentant" Then
                            LigneNomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneNSerieLot" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 30 Then
                                LigneNSerieLot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneNSerieLot = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 30)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePlanAnalytique" Then
                            LignePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsBrut" Then
                            LignePoidsBrut = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsNet" Then
                            LignePoidsNet = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrenomRepresentant" Then
                            LignePrenomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixdeRevientUnitaire" Then
                            LignePrixdeRevientUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaire" Then
                            LignePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaireDevise" Then
                            LignePrixUnitaireDevise = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneValorisé" Then
                            LigneValorisé = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypePrixUnitaire" Then
                            LigneTypePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            LigneQuantite = Trim(Datagridaffiche.Rows(numLigne).Cells("LigneQuantite").Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneQuantiteConditionne" Then
                            LigneQuantiteConditionne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                LigneReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeArticle" Then
                            LigneCodeArticle = Formatage_Article(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneReferenceArticleTiers" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 18 Then
                                LigneReferenceArticleTiers = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReferenceArticleTiers = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 18)
                            End If
                        End If
                        'ici on renseigne le cour qui ce trouve dans notre fichier a importe 
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCours" Then
                            EnteteCours = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise1" Then
                            LigneTauxRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise2" Then
                            LigneTauxRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise3" Then
                            LigneTauxRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise1" Then
                            LigneTypeRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise2" Then
                            LigneTypeRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise3" Then
                            LigneTypeRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If

                        'RECHERCHE DE L'INTITULE DE L'INFO LIBRE
                        If Trim(FormatIntegrer) = "Longueur Fixe" Then
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{"))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        Else
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "[")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "["))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        End If
                    Next numColonne
                    If InStr(IdentifiantCommande, ",") <> 0 Then
                        If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                            Dim OleAdaptaterCa As OleDbDataAdapter
                            Dim OleCaDataset As DataSet
                            Dim OledatableCa As DataTable
                            OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                            OleCaDataset = New DataSet
                            OleAdaptaterCa.Fill(OleCaDataset)
                            OledatableCa = OleCaDataset.Tables(0)
                            If OledatableCa.Rows.Count <> 0 Then
                                Try
                                    Dim OleDocAdapter As OleDbDataAdapter
                                    Dim OleDocDataset As DataSet
                                    Dim OleDocDatable As DataTable
                                    OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                    OleDocDataset = New DataSet
                                    OleDocAdapter.Fill(OleDocDataset)
                                    OleDocDatable = OleDocDataset.Tables(0)
                                    If OleDocDatable.Rows.Count = 1 Then
                                        If Trim(EnteteCodeTiers) = "" Then
                                            EnteteCodeTiers = OleDocDatable.Rows(0).Item("DO_Tiers")
                                        End If
                                    End If
                                Catch ex As Exception

                                End Try
                            End If
                        End If
                    End If
                    ' Creation Effective du Document Commercial
                    EnteteTyPeDocument = TranscodageTypedocument(EnteteTyPeDocument)
                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                        If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQteU, DecimalNomb, DecimalMone)) = 0 Then
                            ErreurJrn.WriteLine(" Echec de création de l'article : " & LigneCodeArticle & " la quantité est égal à 0")
                        Else
                            If Trim(EnteteTyPeDocument) = "14" Then 'Bon de retour
                                CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                            Else
                                If Trim(EnteteTyPeDocument) = "12" Then 'Commande
                                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                        CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    Else
                                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        fournisseurDs = New DataSet
                                        fournisseurAdap.Fill(fournisseurDs)
                                        fournisseurTab = fournisseurDs.Tables(0)
                                        If fournisseurTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                                CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            End If
                                        End If
                                    End If
                                Else
                                    If Trim(EnteteTyPeDocument) = "13" Then 'Livraison
                                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                            CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        Else
                                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            fournisseurDs = New DataSet
                                            fournisseurAdap.Fill(fournisseurDs)
                                            fournisseurTab = fournisseurDs.Tables(0)
                                            If fournisseurTab.Rows.Count <> 0 Then
                                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                                    CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                End If
                                            End If
                                        End If
                                    Else
                                        If Trim(EnteteTyPeDocument) = "16" Then 'Facture
                                            If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                                CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            Else
                                                fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                fournisseurDs = New DataSet
                                                fournisseurAdap.Fill(fournisseurDs)
                                                fournisseurTab = fournisseurDs.Tables(0)
                                                If fournisseurTab.Rows.Count <> 0 Then
                                                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                                        CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                    End If
                                                End If
                                            End If
                                        Else
                                            exceptionTrouve = True
                                            ErreurJrn.WriteLine("Le type de document ne correspond à aucune de ces valeurs (12:Commande achat,13:Bon de reception,16:Facture achat)")
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If Trim(EnteteTyPeDocument) = "14" Then 'Bon de retour
                            CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                        Else
                            If Trim(EnteteTyPeDocument) = "12" Then 'Commande
                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                    CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                Else
                                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                    fournisseurDs = New DataSet
                                    fournisseurAdap.Fill(fournisseurDs)
                                    fournisseurTab = fournisseurDs.Tables(0)
                                    If fournisseurTab.Rows.Count <> 0 Then
                                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                            CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        End If
                                    End If
                                End If
                            Else
                                If Trim(EnteteTyPeDocument) = "13" Then 'Livraison
                                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                        CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    Else
                                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        fournisseurDs = New DataSet
                                        fournisseurAdap.Fill(fournisseurDs)
                                        fournisseurTab = fournisseurDs.Tables(0)
                                        If fournisseurTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                                CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            End If
                                        End If
                                    End If
                                Else
                                    If Trim(EnteteTyPeDocument) = "16" Then 'Facture
                                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                            CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        Else
                                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            fournisseurDs = New DataSet
                                            fournisseurAdap.Fill(fournisseurDs)
                                            fournisseurTab = fournisseurDs.Tables(0)
                                            If fournisseurTab.Rows.Count <> 0 Then
                                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                                    CreationTouslesTiers(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, DocumentCreationPiece, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                End If
                                            End If
                                        End If
                                    Else
                                        exceptionTrouve = True
                                        ErreurJrn.WriteLine("Le type de document ne correspond à aucune de ces valeurs (12:Commande achat,13:Bon de reception,16:Facture achat)")
                                    End If
                                End If
                            End If
                        End If
                    End If
                    NbreLigne = NbreLigne + 1
                    ProgressBar1.Value = ProgressBar1.Value + 1
                    Label8.Text = NbreLigne & "/" & ProgresMax
                    Label8.Refresh()
                Next numLigne
            Catch ex As Exception
        End Try
        End If
        Datagridaffiche.Rows.Clear()
        Me.Cursor = Cursors.Default
        BT_integrer.Enabled = True
    End Sub
    Private Function ConvertionSQLDate(ByRef Valeur As Object, ByRef DateFormat As String) As String
        If DateFormat = "aa-mm-jj" Then
            If Strings.Len(Trim(Valeur)) = 8 Then
                If IsDate(Strings.Mid(Trim(Valeur), 7, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 2)) = True Then
                    Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 7, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 2)), "yyyy/MM/dd") & "', 102)"
                End If
            End If
        Else
            If DateFormat = "aaaa-mm-jj" Then
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 9, 2) & "-" & Strings.Mid(Trim(Valeur), 6, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 4)) = True Then
                        Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 9, 2) & "-" & Strings.Mid(Trim(Valeur), 6, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 4)), "yyyy/MM/dd") & "', 102)"
                    End If
                End If
            Else
                If DateFormat = "jj-mm-aa" Then
                    If Strings.Len(Trim(Valeur)) = 8 Then
                        If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 2)) = True Then
                            Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 2)), "yyyy/MM/dd") & "', 102)"
                        End If
                    End If
                Else
                    If DateFormat = "jj-mm-aaaa" Then
                        If Strings.Len(Trim(Valeur)) = 10 Then
                            If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 4)) = True Then
                                Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 4)), "yyyy/MM/dd") & "', 102)"
                            End If
                        End If
                    Else
                        If DateFormat = "jjmmaa" Then
                            If Strings.Len(Trim(Valeur)) = 6 Then
                                If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2)) = True Then
                                    Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2)), "yyyy/MM/dd") & "', 102)"
                                End If
                            Else
                                If Strings.Len(Trim(Valeur)) = 5 Then
                                    If IsNumeric(Trim(Valeur)) = True Then
                                        If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2)) = True Then
                                            Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2)), "yyyy/MM/dd") & "', 102)"
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If DateFormat = "jjmmaaaa" Then
                                If Strings.Len(Trim(Valeur)) = 8 Then
                                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 4)) = True Then
                                        Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 4)), "yyyy/MM/dd") & "', 102)"
                                    End If
                                Else
                                    If Strings.Len(Trim(Valeur)) = 7 Then
                                        If IsNumeric(Trim(Valeur)) = True Then
                                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 4)) = True Then
                                                Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 4)), "yyyy/MM/dd") & "', 102)"
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                If DateFormat = "aammjj" Then
                                    If Strings.Len(Trim(Valeur)) = 6 Then
                                        If IsDate(Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2)) = True Then
                                            Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2)), "yyyy/MM/dd") & "', 102)"
                                        End If
                                    Else
                                        If Strings.Len(Trim(Valeur)) = 5 Then
                                            If IsNumeric(Trim(Valeur)) = True Then
                                                If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2)) = True Then
                                                    Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2)), "yyyy/MM/dd") & "', 102)"
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    If DateFormat = "aaaammjj" Then
                                        If Strings.Len(Trim(Valeur)) = 8 Then
                                            If IsDate(Strings.Mid(Trim(Valeur), 7, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 4)) = True Then
                                                Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 7, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 4)), "yyyy/MM/dd") & "', 102)"
                                            End If
                                        Else
                                            If Strings.Len(Trim(Valeur)) = 7 Then
                                                If IsNumeric(Trim(Valeur)) = True Then
                                                    If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 7, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 4)) = True Then
                                                        Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 7, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 4)), "yyyy/MM/dd") & "', 102)"
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Else
                                        If DateFormat = "jj/mm/aa" Then
                                            If Strings.Len(Trim(Valeur)) = 8 Then
                                                If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 2)) = True Then
                                                    Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 2)), "yyyy/MM/dd") & "', 102)"
                                                End If
                                            End If
                                        Else
                                            If DateFormat = "jj/mm/aaaa" Then
                                                If Strings.Len(Trim(Valeur)) = 10 Then
                                                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 4)) = True Then
                                                        Valeur = "CONVERT(DATETIME, '" & Format(CDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 4)), "yyyy/MM/dd") & "', 102)"
                                                    End If
                                                End If
                                            Else
                                                If IsDate(Trim(Valeur)) = True Then
                                                    Valeur = "CONVERT(DATETIME, '" & Format(CDate(Valeur), "yyyy/MM/dd") & "', 102)"
                                                End If
                                            End If

                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
        ConvertionSQLDate = Valeur
    End Function
    Private Function RenvoieDateValide(ByRef ValeurDate As Object, ByRef DateFormat As Object) As Date
        'Hermann
        Try
            Select Case DateFormat
                Case "mm/jj/aaaa"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 4))
                        End If
                    End If
                    Exit Select
                Case "jj/mm/aa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2))
                        End If
                    End If
                    Exit Select
                Case "aammjj"
                    If Strings.Len(Trim(ValeurDate)) = 6 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 5 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 5, 1) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 5, 1) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "jjmmaa"
                    If Strings.Len(Trim(ValeurDate)) = 6 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 5 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "aaaammjj"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 7 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 7, 1) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 1) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "jjmmaaaa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 4))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 7 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 4)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 4))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "aa-mm-jj"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2))
                        End If
                    End If
                    Exit Select
                Case "jj-mm-aa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2))
                        End If
                    End If
                    Exit Select
                Case "aaaa-mm-jj"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 9, 2) & "-" & Strings.Mid(Trim(ValeurDate), 6, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 9, 2) & "-" & Strings.Mid(Trim(ValeurDate), 6, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 4))
                        End If
                    End If
                    Exit Select
                Case "jj-mm-aaaa"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 4))
                        End If
                    End If
                    Exit Select
                Case "mmaa"
                    If Strings.Len(Trim(ValeurDate)) = 6 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 5 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "aamm"
                    If Strings.Len(Trim(ValeurDate)) = 6 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 5 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 5, 1) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 5, 1) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2))
                                End If

                            End If
                        End If
                    End If
                    Exit Select
                Case "mmaaaa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 4))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 7 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 4)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 4))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "aaaamm"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 7 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 7, 1) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 1) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "mmjjaa"
                    If Strings.Len(Trim(ValeurDate)) = 6 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 5 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "mmjjaaaa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 3, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 5, 4))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 7 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 4, 4)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 2, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 4, 4))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "aajjmm"
                    If Strings.Len(Trim(ValeurDate)) = 6 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 5, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 5 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "aaaajjmm"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 5, 4) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 5, 4) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 3, 2))
                        End If
                    Else
                        If Strings.Len(Trim(ValeurDate)) = 7 Then
                            If IsNumeric(Trim(ValeurDate)) = True Then
                                If IsDate(Strings.Mid(Trim(ValeurDate), 4, 4) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2)) = True Then
                                    ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 4, 4) & "/" & Strings.Mid(Trim(ValeurDate), 1, 1) & "/" & Strings.Mid(Trim(ValeurDate), 2, 2))
                                End If
                            End If
                        End If
                    End If
                    Exit Select
                Case "mm/jj/aa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2))
                        End If
                    End If
                    Exit Select
                Case "mm-jj-aa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2))
                        End If
                    End If
                    Exit Select
                Case "mm-jj-aaaa"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 4))
                        End If
                    End If
                    Exit Select
                Case "aa-jj-mm"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2))
                        End If
                    End If
                    Exit Select
                Case "aaaa-jj-mm"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 4) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 4) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2))
                        End If
                    End If
                    Exit Select
                Case "mm/aa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 2))
                        End If
                    End If
                    Exit Select
                Case "aa/mm"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 2))
                        End If
                    End If
                    Exit Select
                Case "mm/aaaa"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "/" & Strings.Mid(Trim(ValeurDate), 4, 2) & "/" & Strings.Mid(Trim(ValeurDate), 7, 4))
                        End If
                    End If
                    Exit Select
                Case "aaaa/mm"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 9, 2) & "/" & Strings.Mid(Trim(ValeurDate), 6, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 9, 2) & "/" & Strings.Mid(Trim(ValeurDate), 6, 2) & "/" & Strings.Mid(Trim(ValeurDate), 1, 4))
                        End If
                    End If
                    Exit Select
                Case "mm-aa"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 2))
                        End If
                    End If
                    Exit Select
                Case "aa-mm"
                    If Strings.Len(Trim(ValeurDate)) = 8 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 7, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 2))
                        End If
                    End If
                    Exit Select
                Case "mm-aaaa"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 1, 2) & "-" & Strings.Mid(Trim(ValeurDate), 4, 2) & "-" & Strings.Mid(Trim(ValeurDate), 7, 4))
                        End If
                    End If
                    Exit Select
                Case "aaaa-mm"
                    If Strings.Len(Trim(ValeurDate)) = 10 Then
                        If IsDate(Strings.Mid(Trim(ValeurDate), 9, 2) & "-" & Strings.Mid(Trim(ValeurDate), 6, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 4)) = True Then
                            ValeurDate = CDate(Strings.Mid(Trim(ValeurDate), 9, 2) & "-" & Strings.Mid(Trim(ValeurDate), 6, 2) & "-" & Strings.Mid(Trim(ValeurDate), 1, 4))
                        End If
                    End If
                    Exit Select
                Case Else
                    If IsDate(Trim(ValeurDate)) = True Then
                        ValeurDate = CDate(Trim(ValeurDate))
                    End If
                    Exit Select
            End Select
        Catch ex As Exception
        End Try
        RenvoieDateValide = ValeurDate
    End Function
    Private Function Verificatdate(ByRef Valeur As Object, ByRef DateFormat As String, ByRef Champ As String) As Boolean
        'hermann
        Dim Estsimuller As Boolean = True
        Select Case DateFormat
            Case "aa-mm-jj"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 7, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "aa-jj-mm"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 7, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "aaaa-mm-jj"
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 9, 2) & "-" & Strings.Mid(Trim(Valeur), 6, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "aaaa-jj-mm"
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 9, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 4) & "-" & Strings.Mid(Trim(Valeur), 6, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "jj-mm-aa"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "mm-jj-aa"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "jj-mm-aaaa"
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "mm-jj-aaaa"
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 4, 2) & "-" & Strings.Mid(Trim(Valeur), 1, 2) & "-" & Strings.Mid(Trim(Valeur), 7, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "jjmmaa"
                If Strings.Len(Trim(Valeur)) = 6 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 5 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2)) = True Then

                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "mmjjaa"
                If Strings.Len(Trim(Valeur)) = 6 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 5 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "jjmmaaaa"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 7 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 4)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "mmjjaaaa"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 7 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 4)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "aammjj"
                If Strings.Len(Trim(Valeur)) = 6 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 5 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "aajjmm"
                If Strings.Len(Trim(Valeur)) = 6 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 3, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 5 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 1, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "000000"), 3, 2)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "aaaammjj"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 7, 2) & "/" & Strings.Mid(Trim(Valeur), 5, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 7 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 7, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 4)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "aaaajjmm"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 7, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 4) & "/" & Strings.Mid(Trim(Valeur), 5, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    If Strings.Len(Trim(Valeur)) = 7 Then
                        If IsNumeric(Trim(Valeur)) = True Then
                            If IsDate(Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 7, 2) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 1, 4) & "/" & Strings.Mid(Format(CDbl(Trim(Valeur)), "00000000"), 5, 2)) = True Then
                            Else
                                Estsimuller = False
                                ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                            End If
                        Else
                            Estsimuller = False
                            ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                        End If
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                End If
            Case "jj/mm/aa"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "mm/jj/aa"
                If Strings.Len(Trim(Valeur)) = 8 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 2)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "jj/mm/aaaa"
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case "mm/jj/aaaa"
                If Strings.Len(Trim(Valeur)) = 10 Then
                    If IsDate(Strings.Mid(Trim(Valeur), 4, 2) & "/" & Strings.Mid(Trim(Valeur), 1, 2) & "/" & Strings.Mid(Trim(Valeur), 7, 4)) = True Then
                    Else
                        Estsimuller = False
                        ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                    End If
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
            Case Else
                If IsDate(Trim(Valeur)) = True Then
                Else
                    Estsimuller = False
                    ErreurJrn.WriteLine("La valeur entrée :" & Trim(Valeur) & " pour le Champ : " & Champ & "  doit être au format date :" & DateFormat)
                End If
                Exit Select
        End Select
        Verificatdate = Estsimuller
    End Function
    Private Function RenvoieDepotPrincipal() As String
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        DossierAdap = New OleDbDataAdapter("select * from F_DEPOT WHERE DE_Principal=1", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            Return DossierTab.Rows(0).Item("DE_Intitule")
        Else
            Return Nothing
        End If
    End Function
    Private Sub Creation_Entete_Document(ByRef typedoc As String, ByRef FormatDatefichier As String, ByRef CreationPieceDocument As Object, ByRef PieceInterne As Object, ByRef PieceAutomatique As Object, ByRef PieceCommande As String, ByRef IdentifiantCommande As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        DeviseTiers = Nothing
        ListeReliquat = New List(Of String)
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        With Document
            If Datagridaffiche.Columns.Contains("EnteteCatégorieComptable") = True Then
                If BaseCial.FactoryCategorieComptaAchat.ExistIntitule(Trim(EnteteCatégorieComptable)) = True Then
                    .CategorieCompta = BaseCial.FactoryCategorieComptaAchat.ReadIntitule(Trim(EnteteCatégorieComptable))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Categorie Comptable>' and Valeurlue ='" & Join(Split(Trim(EnteteCatégorieComptable), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryCategorieComptaAchat.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .CategorieCompta = BaseCial.FactoryCategorieComptaAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If

            If Datagridaffiche.Columns.Contains("EnteteStatutdocument") = True Then
                If Trim(EnteteStatutdocument) = "0" Then
                    .DO_Statut = DocumentStatutType.DocumentStatutTypeSaisie
                Else
                    If Trim(EnteteStatutdocument) = "1" Then
                        .DO_Statut = DocumentStatutType.DocumentStatutTypeConfirme
                    Else
                        If Trim(EnteteStatutdocument) = "2" Then
                            .DO_Statut = DocumentStatutType.DocumentStatutTypeAPrepare
                        Else
                            .DO_Statut = DocumentStatutType.DocumentStatutTypeAPrepare
                        End If
                    End If
                End If
            Else
                .DO_Statut = DocumentStatutType.DocumentStatutTypeAPrepare
            End If

            If Datagridaffiche.Columns.Contains("EntetePlanAnalytique") = True Then
                If Datagridaffiche.Columns.Contains("EnteteCodeAffaire") = True Then
                    If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(EntetePlanAnalytique)) = True Then
                        PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(EntetePlanAnalytique))
                        If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                            .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(EnteteCodeAffaire))
                        Else
                            statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then
                                If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                    .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                End If
                            End If
                        End If
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(EntetePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                                    .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(EnteteCodeAffaire))
                                Else
                                    statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <> 0 Then
                                        If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                            .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteCompteGeneral") = True Then
                If BaseCpta.FactoryCompteG.ExistNumero(Trim(EnteteCompteGeneral)) = True Then
                    .CompteG = BaseCpta.FactoryCompteG.ReadNumero(Trim(EnteteCompteGeneral))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Compte General>' and Valeurlue ='" & Join(Split(Trim(EnteteCompteGeneral), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCpta.FactoryCompteG.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .CompteG = BaseCpta.FactoryCompteG.ReadNumero(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteConditiondeLivraison") = True Then
                If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(EnteteConditiondeLivraison)) = True Then
                    .ConditionLivraison = BaseCial.FactoryConditionLivraison.ReadIntitule(Trim(EnteteConditiondeLivraison))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition de Livraison>' and Valeurlue ='" & Join(Split(Trim(EnteteConditiondeLivraison), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .ConditionLivraison = BaseCial.FactoryConditionLivraison.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteIntituleDepot") = True Then
                If BaseCial.FactoryDepot.ExistIntitule(Trim(EnteteIntituleDepot)) = True Then
                    .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(EnteteIntituleDepot))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("IDDepotEntete") = True Then
                If IsNumeric(Trim(IDDepotEntete)) = True Then
                    statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotEntete)) & "'", OleSocieteConnect)
                    statistDs = New DataSet
                    statistAdap.Fill(statistDs)
                    statistTab = statistDs.Tables(0)
                    If statistTab.Rows.Count <> 0 Then
                        .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotEntete), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteIntituleDepot") = False And Datagridaffiche.Columns.Contains("IDDepotEntete") = False Then
                If BaseCial.FactoryDepot.ExistIntitule(RenvoieDepotPrincipal) = True Then
                    .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(RenvoieDepotPrincipal)
                End If
            Else
                If Trim(EnteteIntituleDepot) = "" Then
                    If Trim(IDDepotEntete) = "" Then
                        If BaseCial.FactoryDepot.ExistIntitule(RenvoieDepotPrincipal) = True Then
                            .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(RenvoieDepotPrincipal)
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteContact") = True Then
                .DO_Contact = EnteteContact
            End If
            If Datagridaffiche.Columns.Contains("Entete1") = True Then
                .DO_Coord(1) = Entete1
            End If
            If Datagridaffiche.Columns.Contains("Entete2") = True Then
                .DO_Coord(2) = Entete2
            End If
            If Datagridaffiche.Columns.Contains("Entete3") = True Then
                .DO_Coord(3) = Entete3
            End If
            If Datagridaffiche.Columns.Contains("Entete4") = True Then
                .DO_Coord(4) = Entete4
            End If
            If Datagridaffiche.Columns.Contains("EnteteCours") = True Then
                If EstNumeric(Trim(EnteteCours), DecimalNomb, DecimalMone) = True Then
                    .DO_Cours = CDbl(RenvoiTaux(Trim(EnteteCours), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteDateDocument") = True Then
                If Trim(EnteteDateDocument) <> "" Then
                    .DO_Date = RenvoieDateValide(Trim(EnteteDateDocument), FormatDatefichier)
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteDateLivraison") = True Then
                If Trim(EnteteDateLivraison) <> "" Then
                    .DO_DateLivr = RenvoieDateValide(Trim(EnteteDateLivraison), FormatDatefichier)
                End If
            Else
                Dim OleDocAdapter As OleDbDataAdapter
                Dim OleDocDataset As DataSet
                Dim OleDocDatable As DataTable
                OleDocAdapter = New OleDbDataAdapter("Select  DO_DateLivr  From F_DOCENTETE WHERE DO_PIECE='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                OleDocDataset = New DataSet
                OleDocAdapter.Fill(OleDocDataset)
                OleDocDatable = OleDocDataset.Tables(0)
                If OleDocDatable.Rows.Count <> 0 Then
                    .DO_DateLivr = OleDocDatable.Rows(0).Item("DO_DateLivr")
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteFraisExpedition") = True Then
                If EstNumeric(Trim(EnteteFraisExpedition), DecimalNomb, DecimalMone) = True Then
                    .FraisExpedition = CDbl(RenvoiMontant(Trim(EnteteFraisExpedition), FormatMnt, DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteEcartValorisation") = True Then
                If EstNumeric(Trim(EnteteEcartValorisation), DecimalNomb, DecimalMone) = True Then
                    .DO_Ecart = CDbl(RenvoiTaux(Trim(EnteteEcartValorisation), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteLangue") = True Then
                If Trim(EnteteLangue) = "0" Then
                    .DO_Langue = LangueType.LangueTypeAucune
                Else
                    If Trim(EnteteLangue) = "1" Then
                        .DO_Langue = LangueType.LangueTypeLangue1
                    Else
                        If Trim(EnteteLangue) = "2" Then
                            .DO_Langue = LangueType.LangueTypeLangue2
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteRegimeDocument") = True Then
                If EstNumeric(Trim(EnteteRegimeDocument), DecimalNomb, DecimalMone) = True Then
                    .DO_Regime = CInt(RenvoiTaux(Trim(EnteteRegimeDocument), DecimalNomb, DecimalMone))
                End If
            End If
            If Trim(PieceAutomatique) = "non" Then
                If Datagridaffiche.Columns.Contains("EnteteSoucheDocument") = True Then
                    If Trim(EnteteSoucheDocument) <> "" Then
                        If EstNumeric(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone) = True Then
                            statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where cbIndice ='" & CInt(CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone)) + 1) & "'", OleSocieteConnect)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then
                                If BaseCial.FactorySoucheAchat.ReadIntitule(statistTab.Rows(0).Item("S_Intitule")).IsValide = True Then
                                    If typedoc = "14" Then
                                        .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                    Else
                                        If typedoc = "12" Then
                                            .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                        Else
                                            If typedoc = "13" Then
                                                .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                            Else
                                                If typedoc = "16" Then
                                                    .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If BaseCial.FactorySoucheAchat.ExistIntitule(Trim(EnteteSoucheDocument)) = True Then
                                statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where S_Intitule ='" & Join(Split(Trim(EnteteSoucheDocument), "'"), "''") & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If CInt(statistTab.Rows(0).Item("cbIndice")) - 1 >= 0 Then
                                        If BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).IsValide = True Then
                                            If typedoc = "14" Then
                                                .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                            Else
                                                If typedoc = "12" Then
                                                    .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                Else
                                                    If typedoc = "13" Then
                                                        .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                    Else
                                                        If typedoc = "16" Then
                                                            .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Intitule Souche>' and Valeurlue ='" & Join(Split(Trim(EnteteSoucheDocument), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where S_Intitule ='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Correspond")), "'"), "''") & "'", OleSocieteConnect)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <> 0 Then
                                        If CInt(statistTab.Rows(0).Item("cbIndice")) - 1 >= 0 Then
                                            If BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).IsValide = True Then
                                                If typedoc = "14" Then
                                                    .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                Else
                                                    If typedoc = "12" Then
                                                        .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                    Else
                                                        If typedoc = "13" Then
                                                            .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                        Else
                                                            If typedoc = "16" Then
                                                                .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                .DO_Piece = Strings.UCase(PieceInterne)
            Else
                If Datagridaffiche.Columns.Contains("EnteteSoucheDocument") = True Then
                    If Trim(EnteteSoucheDocument) <> "" Then
                        If EstNumeric(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone) = True Then
                            statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where cbIndice ='" & CInt(CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone)) + 1) & "'", OleSocieteConnect)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then
                                If BaseCial.FactorySoucheAchat.ReadIntitule(statistTab.Rows(0).Item("S_Intitule")).IsValide = True Then
                                    If typedoc = "14" Then
                                        .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatReprise, DocumentProvenanceType.DocProvenanceNormale)
                                    Else
                                        If typedoc = "12" Then
                                            .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatCommandeConf, DocumentProvenanceType.DocProvenanceNormale)
                                        Else
                                            If typedoc = "13" Then
                                                .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                                .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatLivraison, DocumentProvenanceType.DocProvenanceNormale)
                                            Else
                                                If typedoc = "16" Then
                                                    .DO_Souche = CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone))
                                                    If Datagridaffiche.Columns.Contains("ProvenanceFacture") = True Then
                                                        If Trim(ProvenanceFacture) = "1" Then
                                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceRetour)
                                                        Else
                                                            If Trim(ProvenanceFacture) = "2" Then
                                                                .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceAvoir)
                                                            Else
                                                                If Trim(ProvenanceFacture) = "3" Then
                                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceTicket)
                                                                Else
                                                                    If Trim(ProvenanceFacture) = "4" Then
                                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceRectif)
                                                                    Else
                                                                        If Trim(ProvenanceFacture) = "0" Then
                                                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                        Else
                                                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(statistTab.Rows(0).Item("S_Intitule"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If BaseCial.FactorySoucheAchat.ExistIntitule(Trim(EnteteSoucheDocument)) = True Then
                                statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where S_Intitule ='" & Join(Split(Trim(EnteteSoucheDocument), "'"), "''") & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If CInt(statistTab.Rows(0).Item("cbIndice")) - 1 >= 0 Then
                                        If BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).IsValide = True Then
                                            If typedoc = "14" Then
                                                .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatReprise, DocumentProvenanceType.DocProvenanceNormale)
                                            Else
                                                If typedoc = "12" Then
                                                    .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatCommandeConf, DocumentProvenanceType.DocProvenanceNormale)
                                                Else
                                                    If typedoc = "13" Then
                                                        .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatLivraison, DocumentProvenanceType.DocProvenanceNormale)
                                                    Else
                                                        If typedoc = "16" Then
                                                            .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                            If Datagridaffiche.Columns.Contains("ProvenanceFacture") = True Then
                                                                If Trim(ProvenanceFacture) = "1" Then
                                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceRetour)
                                                                Else
                                                                    If Trim(ProvenanceFacture) = "2" Then
                                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceAvoir)
                                                                    Else
                                                                        If Trim(ProvenanceFacture) = "3" Then
                                                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceTicket)
                                                                        Else
                                                                            If Trim(ProvenanceFacture) = "4" Then
                                                                                .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceRectif)
                                                                            Else
                                                                                If Trim(ProvenanceFacture) = "0" Then
                                                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                                Else
                                                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            Else
                                                                .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(EnteteSoucheDocument)).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Intitule Souche>' and Valeurlue ='" & Join(Split(Trim(EnteteSoucheDocument), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where S_Intitule ='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Correspond")), "'"), "''") & "'", OleSocieteConnect)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <> 0 Then
                                        If CInt(statistTab.Rows(0).Item("cbIndice")) - 1 >= 0 Then
                                            If BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).IsValide = True Then
                                                If typedoc = "14" Then
                                                    .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatReprise, DocumentProvenanceType.DocProvenanceNormale)
                                                Else
                                                    If typedoc = "12" Then
                                                        .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatCommandeConf, DocumentProvenanceType.DocProvenanceNormale)
                                                    Else
                                                        If typedoc = "13" Then
                                                            .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatLivraison, DocumentProvenanceType.DocProvenanceNormale)
                                                        Else
                                                            If typedoc = "16" Then
                                                                .DO_Souche = CInt(statistTab.Rows(0).Item("cbIndice")) - 1
                                                                If Datagridaffiche.Columns.Contains("ProvenanceFacture") = True Then
                                                                    If Trim(ProvenanceFacture) = "1" Then
                                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceRetour)
                                                                    Else
                                                                        If Trim(ProvenanceFacture) = "2" Then
                                                                            .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceAvoir)
                                                                        Else
                                                                            If Trim(ProvenanceFacture) = "3" Then
                                                                                .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceTicket)
                                                                            Else
                                                                                If Trim(ProvenanceFacture) = "4" Then
                                                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceRectif)
                                                                                Else
                                                                                    If Trim(ProvenanceFacture) = "0" Then
                                                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                                    Else
                                                                                        .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                Else
                                                                    .DO_Piece = BaseCial.FactorySoucheAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))).ReadCurrentPiece(DocumentType.DocumentTypeAchatFacture, DocumentProvenanceType.DocProvenanceNormale)
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If Datagridaffiche.Columns.Contains("EnteteNatureTransaction") = True Then
                If EstNumeric(Trim(EnteteNatureTransaction), DecimalNomb, DecimalMone) = True Then
                    .DO_Transaction = CInt(RenvoiTaux(Trim(EnteteNatureTransaction), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteTauxescompte") = True Then
                If EstNumeric(Trim(EnteteTauxescompte), DecimalNomb, DecimalMone) = True Then
                    .DO_TxEscompte = CDbl(RenvoiMontant(Trim(EnteteTauxescompte), FormatMnt, DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = True Then
                If BaseCial.FactoryExpedition.ExistIntitule(Trim(EnteteIntituleExpédition)) = True Then
                    .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(EnteteIntituleExpédition))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition Expedition>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleExpédition), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCial.FactoryExpedition.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteNomReprésentant") = True Then
                If Datagridaffiche.Columns.Contains("EntetePrenomReprésentant") = True Then
                    If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(EnteteNomReprésentant), Trim(EntetePrenomReprésentant)) = True Then
                        .Collaborateur = BaseCpta.FactoryCollaborateur.ReadNomPrenom(Trim(EnteteNomReprésentant), Trim(EntetePrenomReprésentant))
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteCodeTiers") = True Or EnteteCodeTiers <> "" Then
                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                    .SetDefaultFournisseur(BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiers)))
                    If IsNothing(BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiers)).Devise) = False Then
                        DeviseTiers = BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiers)).Devise.D_Intitule
                    End If
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .SetDefaultFournisseur(BaseCpta.FactoryFournisseur.ReadNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))))
                            If IsNothing(BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiers)).Devise) = False Then
                                DeviseTiers = BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiers)).Devise.D_Intitule
                            End If
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteCodeTiersPayeur") = True Then
                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiersPayeur)) = True Then
                    .TiersPayeur = BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiersPayeur))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiersPayeur), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .TiersPayeur = BaseCpta.FactoryFournisseur.ReadNumero(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteReference") = True Then
                .DO_Ref = EnteteReference
            End If
            .Write()
            .CouldModified()
            Try

                'Application des mise a jour du cours (parite) du document a importe
                If Datagridaffiche.Columns.Contains("EnteteCours") = True Then
                    If EstNumeric(Trim(EnteteCours), DecimalNomb, DecimalMone) = True Then
                        .DO_Cours = CDbl(RenvoiTaux(Trim(EnteteCours), DecimalNomb, DecimalMone))
                        .Write()
                    End If
                End If

                If Datagridaffiche.Columns.Contains("EnteteCompteGeneral") = True Then
                    If BaseCpta.FactoryCompteG.ExistNumero(Trim(EnteteCompteGeneral)) = True Then
                        .CompteG = BaseCpta.FactoryCompteG.ReadNumero(Trim(EnteteCompteGeneral))
                        .Write()
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Compte General>' and Valeurlue ='" & Join(Split(Trim(EnteteCompteGeneral), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If BaseCpta.FactoryCompteG.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                .CompteG = BaseCpta.FactoryCompteG.ReadNumero(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                .Write()
                            End If
                        End If
                    End If
                End If

                If Datagridaffiche.Columns.Contains("EnteteFraisExpedition") = True Then
                    If EstNumeric(Trim(EnteteFraisExpedition), DecimalNomb, DecimalMone) = True Then
                        .FraisExpedition = CDbl(RenvoiMontant(Trim(EnteteFraisExpedition), FormatMnt, DecimalNomb, DecimalMone))
                        .Write()
                    End If
                End If
                If Datagridaffiche.Columns.Contains("EnteteCatégorieComptable") = True Then
                    If BaseCial.FactoryCategorieComptaAchat.ExistIntitule(Trim(EnteteCatégorieComptable)) = True Then
                        .CategorieCompta = BaseCial.FactoryCategorieComptaAchat.ReadIntitule(Trim(EnteteCatégorieComptable))
                        .Write()
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Categorie Comptable>' and Valeurlue ='" & Join(Split(Trim(EnteteCatégorieComptable), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If BaseCial.FactoryCategorieComptaAchat.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                .CategorieCompta = BaseCial.FactoryCategorieComptaAchat.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                .Write()
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = True Then
                    If BaseCpta.FactoryDevise.ExistIntitule(Trim(EnteteIntituleDevise)) = True Then
                        .Devise = BaseCpta.FactoryDevise.ReadIntitule(Trim(EnteteIntituleDevise))
                        .Write()
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Code Devise>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleDevise), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count <> 0 Then
                            If BaseCpta.FactoryDevise.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                .Devise = BaseCpta.FactoryDevise.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                .Write()
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = False Then
                        If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = False Then
                            If BaseCpta.FactoryDevise.ExistIntitule(Trim(DeviseTiers)) = True Then
                                .Devise = BaseCpta.FactoryDevise.ReadIntitule(Trim(DeviseTiers))
                                .Write()
                            End If
                        End If
                    End If
                End If
                If InStr(IdentifiantCommande, ",") <> 0 Then
                    If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                        Dim OleAdaptaterCa As OleDbDataAdapter
                        Dim OleCaDataset As DataSet
                        Dim OledatableCa As DataTable
                        OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                        OleCaDataset = New DataSet
                        OleAdaptaterCa.Fill(OleCaDataset)
                        OledatableCa = OleCaDataset.Tables(0)
                        If OledatableCa.Rows.Count <> 0 Then
                            Try
                                Dim OleDocAdapter As OleDbDataAdapter
                                Dim OleDocDataset As DataSet
                                Dim OleDocDatable As DataTable
                                OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                OleDocDataset = New DataSet
                                OleDocAdapter.Fill(OleDocDataset)
                                OleDocDatable = OleDocDataset.Tables(0)
                                If OleDocDatable.Rows.Count = 1 Then
                                    Dim Reliquat As IBODocumentAchat3 = Nothing
                                    If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatCommandeConf, Join(Split(Trim(PieceCommande), "'"), "''")) = True Then
                                        Reliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, Join(Split(Trim(PieceCommande), "'"), "''"))
                                    Else
                                        If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatCommande, Join(Split(Trim(PieceCommande), "'"), "''")) = True Then
                                            Reliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommande, Join(Split(Trim(PieceCommande), "'"), "''"))
                                        End If
                                    End If
                                    If IsNothing(Reliquat) = False Then
                                        If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = False Then
                                            .Devise = Reliquat.Devise
                                        End If
                                        If Datagridaffiche.Columns.Contains("Entete1") = False Then
                                            .DO_Coord(1) = Reliquat.DO_Coord(1)
                                        End If
                                        If Datagridaffiche.Columns.Contains("Entete2") = False Then
                                            .DO_Coord(2) = Reliquat.DO_Coord(2)
                                        End If
                                        If Datagridaffiche.Columns.Contains("Entete3") = False Then
                                            .DO_Coord(3) = Reliquat.DO_Coord(3)
                                        End If
                                        If Datagridaffiche.Columns.Contains("Entete4") = False Then
                                            .DO_Coord(4) = Reliquat.DO_Coord(4)
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteNomReprésentant") = False Then
                                            If Datagridaffiche.Columns.Contains("EntetePrenomReprésentant") = False Then
                                                .Collaborateur = Reliquat.Collaborateur
                                            End If
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteCodeAffaire") = False Then
                                            .CompteA = Reliquat.CompteA
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteCatégorieComptable") = False Then
                                            .CategorieCompta = Reliquat.CategorieCompta
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteReference") = False Then
                                            .DO_Ref = Reliquat.DO_Ref
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = False Then
                                            .Expedition = Reliquat.Expedition
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteConditiondeLivraison") = False Then
                                            .ConditionLivraison = Reliquat.ConditionLivraison
                                        End If
                                        If Datagridaffiche.Columns.Contains("EnteteCodeTiersPayeur") = False Then
                                            .TiersPayeur = Reliquat.TiersPayeur
                                        End If
                                        For i As Integer = 1 To Reliquat.InfoLibre.Count
                                            .InfoLibre.Item(i) = Reliquat.InfoLibre(i)
                                        Next
                                        .Write()
                                    End If
                                End If
                            Catch ex As Exception

                            End Try
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = True Then
                    If BaseCial.FactoryExpedition.ExistIntitule(Trim(EnteteIntituleExpédition)) = True Then
                        .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(EnteteIntituleExpédition))
                        .Write()
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition Expedition>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleExpédition), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count <> 0 Then
                            If BaseCial.FactoryExpedition.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                .Write()
                            End If
                        End If
                    End If
                End If
                ErreurJrn.WriteLine("-----------------------------------------------------------------------------------------------------")
                ErreurJrn.WriteLine("")

                If typedoc = "14" Then
                    ErreurJrn.WriteLine("Bon de Retour N° : " & Trim(Document.DO_Piece) & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                Else
                    If typedoc = "12" Then
                        ErreurJrn.WriteLine("Commande N° : " & Trim(Document.DO_Piece) & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                    Else
                        If typedoc = "13" Then
                            ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(Document.DO_Piece) & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                        Else
                            If typedoc = "16" Then
                                ErreurJrn.WriteLine("Facture Achat N° : " & Trim(Document.DO_Piece) & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception

            End Try
            'Traitement des Infos Libres
            Try
                If infoListe.Count > 0 Then
                    While infoListe.Count <> 0
                        OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoListe.Item(0)).Name) & "' And Libre=True", OleConnenection)
                        OleDeleteDataset = New DataSet
                        OleAdaptaterDelete.Fill(OleDeleteDataset)
                        OledatableDelete = OleDeleteDataset.Tables(0)
                        If OledatableDelete.Rows.Count <> 0 Then
                            'L'info Libre Parametrée par l'utilisateur existe dans Sage
                            If Document.InfoLibre.Count <> 0 Then
                                If IsNothing(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) = False Then
                                    If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                        statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCENTETE' and CB_Name ='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "'", OleSocieteConnect)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            'Texte
                                            If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                OleRecherDataset = New DataSet
                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                If OleRechDatable.Rows.Count <> 0 Then
                                                    If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                        Document.Write()
                                                    End If
                                                Else
                                                    If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)
                                                        Document.Write()
                                                    End If
                                                End If
                                            End If
                                            'Table
                                            If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                OleRecherDataset = New DataSet
                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                If OleRechDatable.Rows.Count <> 0 Then
                                                    If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                        Document.Write()
                                                    End If
                                                Else
                                                    If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)
                                                        Document.Write()
                                                    End If
                                                End If
                                            End If
                                            'Montant
                                            If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            'Valeur
                                            If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If

                                            'Date Court
                                            If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            'Date Longue
                                            If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    'nothing
                                End If
                            End If
                        End If
                        'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                        infoListe.RemoveAt(0)
                    End While
                End If
            Catch ex As Exception
                exceptionTrouve = True
                If typedoc = "14" Then
                    ErreurJrn.WriteLine("Bon de Retour N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                Else
                    If typedoc = "12" Then
                        ErreurJrn.WriteLine("Commande N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                    Else
                        If typedoc = "13" Then
                            ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                        Else
                            If typedoc = "16" Then
                                ErreurJrn.WriteLine("Facture Achat N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                            End If
                        End If
                    End If
                End If

            End Try
        End With
    End Sub
    Private Sub Creation_Ligne_Article(ByRef FormatDatefichier As String, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String, ByRef ErreurCreationEntete As Boolean)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim OleDocAdapter As OleDbDataAdapter
        Dim OleDocDataset As DataSet
        Dim OleDocDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        Dim PrixUnitDevise As Double = 0
        Dim PrixUnit As Double = 0
        Dim TypPrix As Object = 0
        Dim PrixUnitTC As Double = 0
        Dim ValRemise1 As Double = 0
        Dim ValRemise2 As Double = 0
        Dim ValRemise3 As Double = 0
        Dim TypRemise1 As Object = 0
        Dim TypRemise2 As Object = 0
        Dim TypRemise3 As Object = 0
        Dim Depot_No As Integer
        Dim CbMarq As Integer = 0
        Dim EstLivraisonTotal As Boolean = False
        Dim LigneReliquatInfo As IBODocumentAchatLigne3 = Nothing
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        Try
            If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                    If CDbl(RenvoiMontant(Trim(LignePrixUnitaireDevise), FormatMnt, DecimalNomb, DecimalMone)) <> 0 Then
                        BaseCial.FactoryDocumentLigne.AutoSet_PrixLigne = True
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                BaseCial.FactoryDocumentLigne.AutoSet_PrixLigne = False
            End If
            LigneDocument = Document.FactoryDocumentLigne.Create
            With LigneDocument
                If Datagridaffiche.Columns.Contains("LigneReferenceArticleTiers") = True Then
                    .AF_RefFourniss = LigneReferenceArticleTiers
                End If
                If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = True Then
                    If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = True Then
                        If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant)) = True Then
                            .Collaborateur = BaseCpta.FactoryCollaborateur.ReadNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant))
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePlanAnalytique") = True Then
                    If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = True Then
                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(LignePlanAnalytique)) = True Then
                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(LignePlanAnalytique))
                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(LigneCodeAffaire))
                            Else
                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                        .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                    End If
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(LignePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                        .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(LigneCodeAffaire))
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                                .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneIntituleDepot") = True Then
                    If BaseCial.FactoryDepot.ExistIntitule(Trim(LigneIntituleDepot)) = True Then
                        .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(LigneIntituleDepot))
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(LigneIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("IDDepotLigne") = True Then
                    If IsNumeric(Trim(IDDepotLigne)) = True Then
                        statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotLigne)) & "'", OleSocieteConnect)
                        statistDs = New DataSet
                        statistAdap.Fill(statistDs)
                        statistTab = statistDs.Tables(0)
                        If statistTab.Rows.Count <> 0 Then
                            Depot_No = CInt(Trim(IDDepotLigne))
                            .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotLigne), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <> 0 Then
                                        Depot_No = CInt(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                        .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneFraisApproche") = True Then
                    If EstNumeric(Trim(LigneFraisApproche), DecimalNomb, DecimalMone) = True Then
                        .DL_Frais = CDbl(RenvoiMontant(Trim(LigneFraisApproche), FormatMnt, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneDesignationArticle") = True Then
                    If LigneDesignationArticle <> "" Then
                        .DL_Design = LigneDesignationArticle
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePoidsNet") = True Then
                    If EstNumeric(Trim(LignePoidsNet), DecimalNomb, DecimalMone) = True Then
                        .DL_PoidsNet = CDbl(RenvoiMontant(Trim(LignePoidsNet), FormatQte, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePoidsBrut") = True Then
                    If EstNumeric(Trim(LignePoidsBrut), DecimalNomb, DecimalMone) = True Then
                        .DL_PoidsBrut = CDbl(RenvoiMontant(Trim(LignePoidsBrut), FormatQte, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixdeRevientUnitaire") = True Then
                    If EstNumeric(Trim(LignePrixdeRevientUnitaire), DecimalNomb, DecimalMone) = True Then
                        .DL_PrixRU = CDbl(RenvoiMontant(Trim(LignePrixdeRevientUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneReference") = True Then
                    .DO_Ref = Trim(LigneReference)
                End If
                If Datagridaffiche.Columns.Contains("LigneValorisé") = True Then
                    If Trim(LigneValorisé) = "0" Then
                        .Valorisee = False
                    Else
                        .Valorisee = True
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneDatedeLivraison") = True Then
                    If Trim(LigneDatedeLivraison) <> "" Then
                        .DO_DateLivr = RenvoieDateValide(Trim(LigneDatedeLivraison), FormatDatefichier)
                    End If
                End If

                If Datagridaffiche.Columns.Contains("LigneDatedeFabrication") = True Then
                    If Trim(LigneDatedeFabrication) <> "" Then
                        .LS_Fabrication = RenvoieDateValide(Trim(LigneDatedeFabrication), FormatDatefichier)
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneDatedePeremption") = True Then
                    If Trim(LigneDatedePeremption) <> "" Then
                        .LS_Peremption = RenvoieDateValide(Trim(LigneDatedePeremption), FormatDatefichier)
                    End If
                End If
                If Datagridaffiche.Columns.Contains("EnteteCodeTiers") = True Then
                    If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                            If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                    .SetDefaultArticle(BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)), CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)))
                                End If
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                        If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                            .SetDefaultArticle(BaseCial.FactoryArticle.ReadReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))), CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)))
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count <> 0 Then
                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                                        If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                            .SetDefaultArticle(BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)), CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)))
                                        End If
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Correspond")), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCial.FactoryArticle.ExistReference(Trim(statistTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                    .SetDefaultArticle(BaseCial.FactoryArticle.ReadReference(Trim(statistTab.Rows(0).Item("Code_Article_Dis"))), CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)))
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneNSerieLot") = True Then
                    .LS_NoSerie = LigneNSerieLot
                End If
                If Datagridaffiche.Columns.Contains("LigneEnumereConditionnement") = True Then
                    .EU_Enumere = Trim(LigneEnumereConditionnement)
                End If
                If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                    If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                        .EU_Qte = CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone))
                    End If
                End If
                Dim ExisteCommande As Boolean = False
                Dim EstPieceCommande As Object = Nothing
                Dim EstDL_NoRef As Object = Nothing
                Dim DateCmde As Date
                If ErreurCreationEntete = False Then
                    If Datagridaffiche.Columns.Contains("EnteteCodeTiers") = True Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                            If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                                If InStr(IdentifiantCommande, ",") <> 0 Then
                                    If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                            Dim OleAdaptaterLe As OleDbDataAdapter
                                            Dim OleLeDataset As DataSet
                                            Dim OledatableLe As DataTable
                                            OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                            OleLeDataset = New DataSet
                                            OleAdaptaterLe.Fill(OleLeDataset)
                                            OledatableLe = OleLeDataset.Tables(0)
                                            If OledatableLe.Rows.Count <> 0 Then
                                                Dim OleAdaptaterCa As OleDbDataAdapter
                                                Dim OleCaDataset As DataSet
                                                Dim OledatableCa As DataTable
                                                OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                                OleCaDataset = New DataSet
                                                OleAdaptaterCa.Fill(OleCaDataset)
                                                OledatableCa = OleCaDataset.Tables(0)
                                                If OledatableCa.Rows.Count <> 0 Then
                                                    Try
                                                        OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                        OleDocDataset = New DataSet
                                                        OleDocAdapter.Fill(OleDocDataset)
                                                        OleDocDatable = OleDocDataset.Tables(0)
                                                        If OleDocDatable.Rows.Count = 1 Then
                                                            DateCmde = OleDocDatable.Rows(0).Item("DO_Date")
                                                            ExisteCommande = True
                                                            EstPieceCommande = Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''")
                                                            OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                            OleRecherDataset = New DataSet
                                                            OleRecherAdapter.Fill(OleRecherDataset)
                                                            OleRechDatable = OleRecherDataset.Tables(0)
                                                            If OleRechDatable.Rows.Count = 1 Then
                                                                Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                                Dim OleCaDataset1 As DataSet
                                                                Dim OledatableCa1 As DataTable
                                                                OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                                OleCaDataset1 = New DataSet
                                                                OleAdaptaterCa1.Fill(OleCaDataset1)
                                                                OledatableCa1 = OleCaDataset1.Tables(0)
                                                                If OledatableCa1.Rows.Count <> 0 Then
                                                                    EstDL_NoRef = OleRechDatable.Rows(0).Item("DL_NoRef")
                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 10 Then
                                                                    Else
                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                            If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommande, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                DocumentReliquat.CouldModified()
                                                                            End If
                                                                        Else
                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                                If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                    DocumentReliquat.CouldModified()
                                                                                End If
                                                                            Else
                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 13 Then
                                                                                    If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                        DocumentReliquat.CouldModified()
                                                                                    End If
                                                                                Else
                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                                        If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                            DocumentReliquat.CouldModified()
                                                                                        End If
                                                                                    Else
                                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 15 Then
                                                                                            If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatAvoir, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                DocumentReliquat.CouldModified()
                                                                                            End If
                                                                                        Else
                                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 16 Then
                                                                                                If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                    DocumentReliquat.CouldModified()
                                                                                                End If
                                                                                            Else
                                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 17 Then
                                                                                                    If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFactureCpta, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                        DocumentReliquat.CouldModified()
                                                                                                    End If
                                                                                                Else
                                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 18 Then
                                                                                                        If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatArchive, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                            DocumentReliquat.CouldModified()
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    PieceReliquat = OleRechDatable.Rows(0).Item("DO_Piece")
                                                                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                                        If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) <= 0 Then
                                                                            Try
                                                                                Try
                                                                                    If IsNothing(DocumentReliquat) = False Then
                                                                                        For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                            With LigneReliquat
                                                                                                If IsNothing(LigneDocument.Article) = False Then
                                                                                                    If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(LigneDocument.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                        LigneDocument.DL_Qte = LigneReliquat.DL_Qte
                                                                                                        If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = False Then
                                                                                                            LigneDocument.CompteA = LigneReliquat.CompteA
                                                                                                        End If
                                                                                                        If Datagridaffiche.Columns.Contains("LigneEnumereConditionnement") = False Then
                                                                                                            LigneDocument.EU_Enumere = LigneReliquat.EU_Enumere
                                                                                                        End If
                                                                                                        If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = False Then
                                                                                                            If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = False Then
                                                                                                                LigneDocument.Collaborateur = LigneReliquat.Collaborateur
                                                                                                            End If
                                                                                                        End If
                                                                                                        LigneReliquatInfo = LigneReliquat
                                                                                                        PrixUnitTC = .DL_PUTTC
                                                                                                        PrixUnitDevise = .DL_PUDevise
                                                                                                        PrixUnit = .DL_PrixUnitaire
                                                                                                        ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                        If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                            TypRemise1 = 0
                                                                                                        Else
                                                                                                            If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                TypRemise1 = 1
                                                                                                            Else
                                                                                                                If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                    TypRemise1 = 2
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                        ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                        If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                            TypRemise2 = 0
                                                                                                        Else
                                                                                                            If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                TypRemise2 = 1
                                                                                                            Else
                                                                                                                If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                    TypRemise2 = 2
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                        ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                        If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                            TypRemise3 = 0
                                                                                                        Else
                                                                                                            If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                TypRemise3 = 1
                                                                                                            Else
                                                                                                                If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                    TypRemise3 = 2
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                        CbMarq = OleRechDatable.Rows(0).Item("cbMarq")
                                                                                                        .Remove()
                                                                                                        EstLivraisonTotal = True
                                                                                                    End If
                                                                                                End If
                                                                                            End With
                                                                                        Next
                                                                                    End If
                                                                                Catch ex As Exception

                                                                                End Try
                                                                                ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul ou négatif")
                                                                                If IsNothing(DocumentReliquat) = False Then
                                                                                    If DocumentReliquat.FactoryDocumentLigne.List.Count = 0 Then
                                                                                        Try
                                                                                            DocumentReliquat.Read()
                                                                                            DocumentReliquat.Remove()
                                                                                            ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " supprimé !")
                                                                                        Catch ex As Exception
                                                                                            ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Erreur de suppression :" & ex.Message)
                                                                                        End Try
                                                                                    End If
                                                                                End If
                                                                            Catch ex As Exception
                                                                                exceptionTrouve = True
                                                                                ErreurJrn.WriteLine("Erreur de Suppression de l'Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul. Erreur Système :" & ex.Message)
                                                                            End Try
                                                                        Else
                                                                            Try
                                                                                If IsNothing(DocumentReliquat) = False Then
                                                                                    For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                        With LigneReliquat
                                                                                            If IsNothing(LigneDocument.Article) = False Then
                                                                                                If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(LigneDocument.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                    If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = False Then
                                                                                                        LigneDocument.CompteA = LigneReliquat.CompteA
                                                                                                    End If
                                                                                                    If Datagridaffiche.Columns.Contains("LigneEnumereConditionnement") = False Then
                                                                                                        LigneDocument.EU_Enumere = LigneReliquat.EU_Enumere
                                                                                                    End If
                                                                                                    If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = False Then
                                                                                                        If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = False Then
                                                                                                            LigneDocument.Collaborateur = LigneReliquat.Collaborateur
                                                                                                        End If
                                                                                                    End If
                                                                                                    LigneReliquatInfo = LigneReliquat
                                                                                                    PrixUnitTC = .DL_PUTTC
                                                                                                    PrixUnitDevise = .DL_PUDevise
                                                                                                    PrixUnit = .DL_PrixUnitaire
                                                                                                    ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                    If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                        TypRemise1 = 0
                                                                                                    Else
                                                                                                        If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                            TypRemise1 = 1
                                                                                                        Else
                                                                                                            If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                TypRemise1 = 2
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                    ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                    If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                        TypRemise2 = 0
                                                                                                    Else
                                                                                                        If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                            TypRemise2 = 1
                                                                                                        Else
                                                                                                            If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                TypRemise2 = 2
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                    ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                    If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                        TypRemise3 = 0
                                                                                                    Else
                                                                                                        If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                            TypRemise3 = 1
                                                                                                        Else
                                                                                                            If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                TypRemise3 = 2
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                    'Mise à Jour OB
                                                                                                    .DL_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                    .DL_QteBL = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                    If LigneReliquat.Article.FactoryArticleCond.List.Count = 0 Then
                                                                                                        .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                    Else
                                                                                                        For Each ArtCond As IBOArticleCond3 In LigneReliquat.Article.FactoryArticleCond.List
                                                                                                            If ArtCond.EC_Enumere = .EU_Enumere Then
                                                                                                                If ArtCond.EC_Quantite <> 0 Then
                                                                                                                    .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), ".")) / ArtCond.EC_Quantite
                                                                                                                Else
                                                                                                                    .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                                End If
                                                                                                            End If
                                                                                                        Next
                                                                                                    End If
                                                                                                    .Write()
                                                                                                End If
                                                                                            End If
                                                                                        End With
                                                                                    Next
                                                                                End If
                                                                                ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                            Catch ex As Exception
                                                                                exceptionTrouve = True
                                                                                ErreurJrn.WriteLine("Erreur de mise à jour de l'Article Reliquat :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) & " Erreur Système :" & ex.Message)
                                                                            End Try
                                                                        End If
                                                                    Else
                                                                        'Article Commentaire
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    Catch ex As Exception
                                                        exceptionTrouve = False
                                                        ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                                    End Try
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            Dim fournisseurAdapCa As OleDbDataAdapter
                            Dim fournisseurDataset As DataSet
                            Dim fournisseurdatableCa As DataTable
                            fournisseurAdapCa = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            fournisseurDataset = New DataSet
                            fournisseurAdapCa.Fill(fournisseurDataset)
                            fournisseurdatableCa = fournisseurDataset.Tables(0)
                            If fournisseurdatableCa.Rows.Count <> 0 Then
                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurdatableCa.Rows(0).Item("Correspond"))) = True Then
                                    If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                                        If InStr(IdentifiantCommande, ",") <> 0 Then
                                            If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                                If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                                    Dim OleAdaptaterLe As OleDbDataAdapter
                                                    Dim OleLeDataset As DataSet
                                                    Dim OledatableLe As DataTable
                                                    OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                                    OleLeDataset = New DataSet
                                                    OleAdaptaterLe.Fill(OleLeDataset)
                                                    OledatableLe = OleLeDataset.Tables(0)
                                                    If OledatableLe.Rows.Count <> 0 Then
                                                        Dim OleAdaptaterCa As OleDbDataAdapter
                                                        Dim OleCaDataset As DataSet
                                                        Dim OledatableCa As DataTable
                                                        OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                                        OleCaDataset = New DataSet
                                                        OleAdaptaterCa.Fill(OleCaDataset)
                                                        OledatableCa = OleCaDataset.Tables(0)
                                                        If OledatableCa.Rows.Count <> 0 Then
                                                            Try
                                                                OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                                OleDocDataset = New DataSet
                                                                OleDocAdapter.Fill(OleDocDataset)
                                                                OleDocDatable = OleDocDataset.Tables(0)
                                                                If OleDocDatable.Rows.Count = 1 Then
                                                                    DateCmde = OleDocDatable.Rows(0).Item("DO_Date")
                                                                    ExisteCommande = True
                                                                    EstPieceCommande = Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''")
                                                                    OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Join(Split(Trim(fournisseurdatableCa.Rows(0).Item("Correspond")), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                                    OleRecherDataset = New DataSet
                                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                                    If OleRechDatable.Rows.Count = 1 Then
                                                                        Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                                        Dim OleCaDataset1 As DataSet
                                                                        Dim OledatableCa1 As DataTable
                                                                        OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                                        OleCaDataset1 = New DataSet
                                                                        OleAdaptaterCa1.Fill(OleCaDataset1)
                                                                        OledatableCa1 = OleCaDataset1.Tables(0)
                                                                        If OledatableCa1.Rows.Count <> 0 Then
                                                                            EstDL_NoRef = OleRechDatable.Rows(0).Item("DL_NoRef")
                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 10 Then
                                                                            Else
                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                                    If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommande, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                        DocumentReliquat.CouldModified()
                                                                                    End If
                                                                                Else
                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                                        If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                            DocumentReliquat.CouldModified()
                                                                                        End If
                                                                                    Else
                                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 13 Then
                                                                                            If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                DocumentReliquat.CouldModified()
                                                                                            End If
                                                                                        Else
                                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                                                If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                    DocumentReliquat.CouldModified()
                                                                                                End If
                                                                                            Else
                                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 15 Then
                                                                                                    If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatAvoir, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                        DocumentReliquat.CouldModified()
                                                                                                    End If
                                                                                                Else
                                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 16 Then
                                                                                                        If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                            DocumentReliquat.CouldModified()
                                                                                                        End If
                                                                                                    Else
                                                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 17 Then
                                                                                                            If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFactureCpta, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                                DocumentReliquat.CouldModified()
                                                                                                            End If
                                                                                                        Else
                                                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 18 Then
                                                                                                                If PieceReliquat <> OleRechDatable.Rows(0).Item("DO_Piece") Then
                                                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatArchive, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                                    DocumentReliquat.CouldModified()
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                            PieceReliquat = OleRechDatable.Rows(0).Item("DO_Piece")
                                                                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                                                If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) <= 0 Then
                                                                                    Try
                                                                                        Try
                                                                                            If IsNothing(DocumentReliquat) = False Then
                                                                                                For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                                    With LigneReliquat
                                                                                                        If IsNothing(LigneDocument.Article) = False Then
                                                                                                            If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(LigneDocument.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                                LigneDocument.DL_Qte = LigneReliquat.DL_Qte
                                                                                                                If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = False Then
                                                                                                                    LigneDocument.CompteA = LigneReliquat.CompteA
                                                                                                                End If
                                                                                                                If Datagridaffiche.Columns.Contains("LigneEnumereConditionnement") = False Then
                                                                                                                    LigneDocument.EU_Enumere = LigneReliquat.EU_Enumere
                                                                                                                End If
                                                                                                                If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = False Then
                                                                                                                    If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = False Then
                                                                                                                        LigneDocument.Collaborateur = LigneReliquat.Collaborateur
                                                                                                                    End If
                                                                                                                End If
                                                                                                                LigneReliquatInfo = LigneReliquat
                                                                                                                PrixUnitTC = .DL_PUTTC
                                                                                                                PrixUnitDevise = .DL_PUDevise
                                                                                                                PrixUnit = .DL_PrixUnitaire
                                                                                                                ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                                If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                                    TypRemise1 = 0
                                                                                                                Else
                                                                                                                    If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                        TypRemise1 = 1
                                                                                                                    Else
                                                                                                                        If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                            TypRemise1 = 2
                                                                                                                        End If
                                                                                                                    End If
                                                                                                                End If
                                                                                                                ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                                If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                                    TypRemise2 = 0
                                                                                                                Else
                                                                                                                    If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                        TypRemise2 = 1
                                                                                                                    Else
                                                                                                                        If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                            TypRemise2 = 2
                                                                                                                        End If
                                                                                                                    End If
                                                                                                                End If
                                                                                                                ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                                If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                                    TypRemise3 = 0
                                                                                                                Else
                                                                                                                    If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                        TypRemise3 = 1
                                                                                                                    Else
                                                                                                                        If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                            TypRemise3 = 2
                                                                                                                        End If
                                                                                                                    End If
                                                                                                                End If
                                                                                                                CbMarq = OleRechDatable.Rows(0).Item("cbMarq")
                                                                                                                .Remove()
                                                                                                                .Write()
                                                                                                                EstLivraisonTotal = True
                                                                                                            End If
                                                                                                        End If
                                                                                                    End With
                                                                                                Next
                                                                                            End If
                                                                                        Catch ex As Exception

                                                                                        End Try
                                                                                        ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul")
                                                                                        If IsNothing(DocumentReliquat) = False Then
                                                                                            If DocumentReliquat.FactoryDocumentLigne.List.Count = 0 Then
                                                                                                Try
                                                                                                    DocumentReliquat.Read()
                                                                                                    DocumentReliquat.Remove()
                                                                                                    ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " supprimé !")
                                                                                                Catch ex As Exception
                                                                                                    ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Erreur de suppression :" & ex.Message)
                                                                                                End Try
                                                                                            End If
                                                                                        End If
                                                                                    Catch ex As Exception
                                                                                        exceptionTrouve = True
                                                                                        ErreurJrn.WriteLine("Erreur de Suppression de l'Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul. Erreur Système :" & ex.Message)
                                                                                    End Try
                                                                                Else
                                                                                    Try
                                                                                        If IsNothing(DocumentReliquat) = False Then
                                                                                            For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                                With LigneReliquat
                                                                                                    If IsNothing(LigneDocument.Article) = False Then
                                                                                                        If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(LigneDocument.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                            If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = False Then
                                                                                                                LigneDocument.CompteA = LigneReliquat.CompteA
                                                                                                            End If
                                                                                                            If Datagridaffiche.Columns.Contains("LigneEnumereConditionnement") = False Then
                                                                                                                LigneDocument.EU_Enumere = LigneReliquat.EU_Enumere
                                                                                                            End If
                                                                                                            If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = False Then
                                                                                                                If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = False Then
                                                                                                                    LigneDocument.Collaborateur = LigneReliquat.Collaborateur
                                                                                                                End If
                                                                                                            End If
                                                                                                            LigneReliquatInfo = LigneReliquat
                                                                                                            PrixUnitTC = .DL_PUTTC
                                                                                                            PrixUnitDevise = .DL_PUDevise
                                                                                                            PrixUnit = .DL_PrixUnitaire
                                                                                                            ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                            If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                                TypRemise1 = 0
                                                                                                            Else
                                                                                                                If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                    TypRemise1 = 1
                                                                                                                Else
                                                                                                                    If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                        TypRemise1 = 2
                                                                                                                    End If
                                                                                                                End If
                                                                                                            End If
                                                                                                            ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                            If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                                TypRemise2 = 0
                                                                                                            Else
                                                                                                                If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                    TypRemise2 = 1
                                                                                                                Else
                                                                                                                    If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                        TypRemise2 = 2
                                                                                                                    End If
                                                                                                                End If
                                                                                                            End If
                                                                                                            ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                            If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                                TypRemise3 = 0
                                                                                                            Else
                                                                                                                If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                    TypRemise3 = 1
                                                                                                                Else
                                                                                                                    If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                        TypRemise3 = 2
                                                                                                                    End If
                                                                                                                End If
                                                                                                            End If
                                                                                                            .DL_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                            .DL_QteBL = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                            If LigneReliquat.Article.FactoryArticleCond.List.Count = 0 Then
                                                                                                                .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                            Else
                                                                                                                For Each ArtCond As IBOArticleCond3 In LigneReliquat.Article.FactoryArticleCond.List
                                                                                                                    If ArtCond.EC_Enumere = .EU_Enumere Then
                                                                                                                        If ArtCond.EC_Quantite <> 0 Then
                                                                                                                            .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), ".")) / ArtCond.EC_Quantite
                                                                                                                        Else
                                                                                                                            .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                                        End If
                                                                                                                    End If
                                                                                                                Next
                                                                                                            End If
                                                                                                            .Write()
                                                                                                        End If
                                                                                                    End If
                                                                                                End With
                                                                                            Next
                                                                                        End If
                                                                                        ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                                    Catch ex As Exception
                                                                                        exceptionTrouve = True
                                                                                        ErreurJrn.WriteLine("Erreur de mise à jour de l'Article Reliquat :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) & " Erreur Système :" & ex.Message)
                                                                                    End Try
                                                                                End If
                                                                            Else

                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            Catch ex As Exception
                                                                exceptionTrouve = False
                                                                ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                                            End Try
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                        If Trim(LigneTypePrixUnitaire) = "1" Then
                            If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                .DL_PUTTC = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        Else
                            If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        End If
                    Else
                        If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                            .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                        End If
                    End If
                Else
                    If ExisteCommande = True Then
                        If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = False Then
                            If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = True Then
                                If Trim(EnteteIntituleDevise) = "" Then
                                    If .DO_Type = DocumentType.DocumentTypeAchatLivraison Or .DO_Type = DocumentType.DocumentTypeAchatFacture Then
                                        .DL_PUTTC = PrixUnitTC
                                        .DL_PrixUnitaire = PrixUnit
                                    End If
                                End If
                            Else
                                If .DO_Type = DocumentType.DocumentTypeAchatLivraison Or .DO_Type = DocumentType.DocumentTypeAchatFacture Then
                                    .DL_PUTTC = PrixUnitTC
                                    .DL_PrixUnitaire = PrixUnit
                                End If
                            End If
                        End If
                    Else
                        If IsNothing(.Article) = False Then
                            If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = False Then
                                If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = True Then
                                    If Trim(EnteteIntituleDevise) = "" Then
                                        OleRecherAdapter = New OleDbDataAdapter("Select  * From F_ARTFOURNISS WHERE AR_Ref='" & Join(Split(.Article.AR_Ref, "'"), "''") & "' And  CT_Num ='" & Document.Tiers.CT_Num & "'", OleSocieteConnect)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If Convert.IsDBNull(OleRechDatable.Rows(0).Item("AF_PrixAch")) = False Then
                                                .DL_PrixUnitaire = OleRechDatable.Rows(0).Item("AF_PrixAch")
                                            Else
                                                .DL_PrixUnitaire = .Article.AR_PrixAchat
                                            End If
                                        Else
                                            .DL_PrixUnitaire = .Article.AR_PrixAchat
                                        End If
                                    End If
                                Else
                                    If BaseCpta.FactoryDevise.ExistIntitule(Trim(DeviseTiers)) = False Then
                                        OleRecherAdapter = New OleDbDataAdapter("Select  * From F_ARTFOURNISS WHERE AR_Ref='" & Join(Split(.Article.AR_Ref, "'"), "''") & "' And  CT_Num ='" & Document.Tiers.CT_Num & "'", OleSocieteConnect)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If Convert.IsDBNull(OleRechDatable.Rows(0).Item("AF_PrixAch")) = False Then
                                                .DL_PrixUnitaire = OleRechDatable.Rows(0).Item("AF_PrixAch")
                                            Else
                                                .DL_PrixUnitaire = .Article.AR_PrixAchat
                                            End If
                                        Else
                                            .DL_PrixUnitaire = .Article.AR_PrixAchat
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                    If BaseCpta.FactoryDevise.ExistIntitule(Trim(EnteteIntituleDevise)) = True Then
                        If Trim(EnteteIntituleDevise) <> "" Then
                            If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                                .DL_PUDevise = CDbl(RenvoiMontant(Trim(LignePrixUnitaireDevise), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        Else
                            If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                                .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaireDevise), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        End If
                    Else
                        If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                            .DL_PUDevise = CDbl(RenvoiMontant(Trim(LignePrixUnitaireDevise), FormatMnt, DecimalNomb, DecimalMone))
                        End If
                    End If
                Else
                    If ExisteCommande = True Then
                        If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = False Then
                            If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = True Then
                                If Trim(EnteteIntituleDevise) <> "" Then
                                    If .DO_Type = DocumentType.DocumentTypeAchatLivraison Or .DO_Type = DocumentType.DocumentTypeAchatFacture Then
                                        .DL_PUDevise = PrixUnitDevise
                                    End If
                                End If
                            Else
                                If BaseCpta.FactoryDevise.ExistIntitule(Trim(DeviseTiers)) = True Then
                                    If .DO_Type = DocumentType.DocumentTypeAchatLivraison Or .DO_Type = DocumentType.DocumentTypeAchatFacture Then
                                        .DL_PUDevise = PrixUnitDevise
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If IsNothing(.Article) = False Then
                            If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = False Then
                                If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = True Then
                                    If Trim(EnteteIntituleDevise) <> "" Then
                                        OleRecherAdapter = New OleDbDataAdapter("Select  * From F_ARTFOURNISS WHERE AR_Ref='" & Join(Split(.Article.AR_Ref, "'"), "''") & "' And  CT_Num ='" & Document.Tiers.CT_Num & "'", OleSocieteConnect)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If Convert.IsDBNull(OleRechDatable.Rows(0).Item("AF_PrixDev")) = False Then
                                                .DL_PUDevise = OleRechDatable.Rows(0).Item("AF_PrixDev")
                                            End If
                                        End If
                                    End If
                                Else
                                    If BaseCpta.FactoryDevise.ExistIntitule(Trim(DeviseTiers)) = True Then
                                        OleRecherAdapter = New OleDbDataAdapter("Select  * From F_ARTFOURNISS WHERE AR_Ref='" & Join(Split(.Article.AR_Ref, "'"), "''") & "' And  CT_Num ='" & Document.Tiers.CT_Num & "'", OleSocieteConnect)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If Convert.IsDBNull(OleRechDatable.Rows(0).Item("AF_PrixDev")) = False Then
                                                .DL_PUDevise = OleRechDatable.Rows(0).Item("AF_PrixDev")
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                Dim ExisteRemise As Boolean = False
                Dim RemiseDescriptif As Boolean = False
                If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                    RemiseDescriptif = True
                    If Trim(LigneTauxRemise1) <> "" Then
                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone)) = 0 Then
                                ExisteRemise = True
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                    RemiseDescriptif = True
                    If Trim(LigneTauxRemise2) <> "" Then
                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone)) = 0 Then
                                ExisteRemise = True
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                    RemiseDescriptif = True
                    If Trim(LigneTauxRemise3) <> "" Then
                        If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone)) = 0 Then
                                ExisteRemise = True
                            End If
                        End If
                    End If
                End If

                If Datagridaffiche.Columns.Contains("LigneTypeRemise1") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                        If Trim(LigneTypeRemise1) = "1" Then
                            If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                            End If
                        Else
                            If Trim(LigneTypeRemise1) = "2" Then
                                If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                    .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If Trim(LigneTypeRemise1) = "0" Then
                                    If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                                        .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(1).REM_Valeur = ValRemise1
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                            .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                            .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(1).REM_Valeur = ValRemise1
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTypeRemise2") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                        If Trim(LigneTypeRemise2) = "1" Then
                            If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                            End If
                            If Trim(LigneTypeRemise2) = "2" Then
                                If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                    .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If Trim(LigneTypeRemise2) = "0" Then
                                    If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                                        .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise2 = 0 Then
                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise2 = 1 Then
                                    .Remise.Remise(2).REM_Valeur = ValRemise2
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise2 = 2 Then
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                            .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                            .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise2 = 0 Then
                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise2 = 1 Then
                                    .Remise.Remise(2).REM_Valeur = ValRemise2
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise2 = 2 Then
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If Datagridaffiche.Columns.Contains("LigneTypeRemise3") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                        If Trim(LigneTypeRemise3) = "1" Then
                            If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                            End If
                        Else
                            If Trim(LigneTypeRemise3) = "2" Then
                                If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                    .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If Trim(LigneTypeRemise3) = "0" Then
                                    If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                                        .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise3 = 0 Then
                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise3 = 1 Then
                                    .Remise.Remise(3).REM_Valeur = ValRemise3
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise3 = 2 Then
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                        If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                            .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                            .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise3 = 0 Then
                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise3 = 1 Then
                                    .Remise.Remise(3).REM_Valeur = ValRemise3
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise3 = 2 Then
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If ExisteRemise = False And RemiseDescriptif = False And ExisteCommande = False Then
                    .SetDefaultRemise()
                End If
                Dim lectur = .DL_QteBC * .Article.AR_PoidsNet
                .DL_PoidsNet = .DL_QteBC * .Article.AR_PoidsNet 'Correction du 16/03/2015 Hermann'
                .Write()
                If Datagridaffiche.Columns.Contains("LigneDesignationArticle") = True Then
                    If LigneDesignationArticle <> "" Then
                        .DL_Design = LigneDesignationArticle
                    End If
                    If Trim(LigneDatedeLivraison) = "" Then
                        .DO_DateLivr = .DL_DateBC
                    End If
                    .Write()
                End If
                If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                        .DL_Qte = CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))
                        .DL_QteBL = CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))
                        .Write()
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = False Then
                    If IsNothing(LigneDocument.Article) = False Then
                        For Each ArticleIBI As IBOArticleCond3 In LigneDocument.Article.FactoryArticleCond.List
                            If ArticleIBI.EC_Enumere = LigneDocument.EU_Enumere Then
                                If ArticleIBI.EC_Quantite <> 0 Then
                                    .EU_Qte = CDbl(RenvoiMontantConditionnement(.DL_Qte / ArticleIBI.EC_Quantite, FormatQte, DecimalNomb, DecimalMone))
                                    .Write()
                                End If
                                Exit For
                            End If
                        Next
                    End If
                End If
                If ExisteCommande = True Then
                    If Trim(EstPieceCommande) <> "" Then
                        ListeReliquat.Add(Trim(EstPieceCommande) & ControlChars.Tab & EstDL_NoRef & ControlChars.Tab & .Document.DO_Piece & ControlChars.Tab & PieceArticle & ControlChars.Tab & CbMarq & ControlChars.Tab & EstLivraisonTotal & ControlChars.Tab & DateCmde)
                    End If
                End If

                If IsNothing(LigneDocument.Article) = False Then
                    ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                Else
                    ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                End If
                Try
                    If IsNothing(LigneReliquatInfo) = False Then
                        For i As Integer = 1 To LigneReliquatInfo.InfoLibre.Count
                            LigneDocument.InfoLibre.Item(i) = LigneReliquatInfo.InfoLibre(i)
                        Next i
                        LigneDocument.Write()
                        LigneReliquatInfo = Nothing
                    End If
                Catch ex As Exception

                End Try
                Try
                    statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & IdentifiantArticle & "'", OleSocieteConnect)
                    statistDs = New DataSet
                    statistAdap.Fill(statistDs)
                    statistTab = statistDs.Tables(0)
                    If statistTab.Rows.Count <> 0 Then
                        'Texte
                        If statistTab.Rows(0).Item("CB_Type") = 9 Then
                            LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(PieceArticle)
                            LigneDocument.Write()
                        End If
                        'Table
                        If statistTab.Rows(0).Item("CB_Type") = 22 Then
                            LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(PieceArticle)
                            LigneDocument.Write()
                        End If
                        'Montant
                        If statistTab.Rows(0).Item("CB_Type") = 20 Then
                            If EstNumeric(Trim(PieceArticle), DecimalNomb, DecimalMone) = True Then
                                LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = CDbl(RenvoiTaux(Trim(PieceArticle), DecimalNomb, DecimalMone))
                                LigneDocument.Write()
                            End If
                        End If
                        'Valeur
                        If statistTab.Rows(0).Item("CB_Type") = 7 Then
                            If EstNumeric(Trim(PieceArticle), DecimalNomb, DecimalMone) = True Then
                                LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = CDbl(RenvoiTaux(Trim(PieceArticle), DecimalNomb, DecimalMone))
                                LigneDocument.Write()
                            End If
                        End If
                    End If
                Catch ex As Exception

                End Try
                'Traitement des Infos Libres
                Try
                    If infoLigne.Count > 0 Then
                        While infoLigne.Count <> 0
                            OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoLigne.Item(0)).Name) & "' And InfoLigne=True", OleConnenection)
                            OleDeleteDataset = New DataSet
                            OleAdaptaterDelete.Fill(OleDeleteDataset)
                            OledatableDelete = OleDeleteDataset.Tables(0)
                            If OledatableDelete.Rows.Count <> 0 Then
                                'L'info Libre Parametrée par l'utilisateur existe dans Sage
                                If LigneDocument.InfoLibre.Count <> 0 Then
                                    If IsNothing(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) = False Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "'", OleSocieteConnect)
                                            statistDs = New DataSet
                                            statistAdap.Fill(statistDs)
                                            statistTab = statistDs.Tables(0)
                                            If statistTab.Rows.Count <> 0 Then
                                                'Texte
                                                If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                            LigneDocument.Write()
                                                        End If
                                                    Else
                                                        If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)
                                                            LigneDocument.Write()
                                                        End If
                                                    End If
                                                End If
                                                'Table
                                                If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                            LigneDocument.Write()
                                                        End If
                                                    Else
                                                        If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)
                                                            LigneDocument.Write()
                                                        End If
                                                    End If
                                                End If
                                                'Montant
                                                If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                                'Valeur
                                                If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If

                                                'Date Court
                                                If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                                'Date Longue
                                                If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                If IsNothing(LigneDocument.Article) = False Then
                                                    ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                Else
                                                    ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                End If
                                            End If
                                        End If
                                    Else
                                        'nothing
                                    End If
                                End If
                            End If
                            'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                            infoLigne.RemoveAt(0)
                        End While
                    End If
                Catch ex As Exception
                    exceptionTrouve = True
                    If IsNothing(LigneDocument.Article) = False Then
                        ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Erreur de Création de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                    Else
                        ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Erreur de Création de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                    End If
                End Try

            End With
        Catch ex As Exception
            exceptionTrouve = True
            ErreurJrn.WriteLine("Code Article : " & Trim(LigneCodeArticle) & " N°Pièce : " & EntetePieceInterne & " Erreur système de Création de l'article : " & ex.Message)
            ListePiece.Add(EntetePieceInterne)
        End Try
        If ListeReliquat.Count <> 0 Then
            Dim OleComDeletAna As OleDbCommand
            Dim DeleteEcriture As String
            For i As Integer = 0 To ListeReliquat.Count - 1
                Dim ListeBL() As String = Split(ListeReliquat.Item(i), ControlChars.Tab)
                If Trim(ListeBL(0)) <> "" Then
                    If Trim(ListeBL(1)) <> "" Then
                        If IsDate(Trim(ListeBL(6))) = True Then
                            Try
                                Document.Read()
                                DeleteEcriture = "SET ARITHABORT ON UPDATE  F_DOCLIGNE SET DL_PieceBC='" & Trim(ListeBL(0)) & "', DL_NoRef=" & Trim(ListeBL(1)) & ",DL_DateBC=CONVERT(DATETIME, '" & Format(CDate(Trim(ListeBL(6))), "yyyy/MM/dd") & "', 102)  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(ListeBL(3)), ","), ".") & "' And DO_Type=13 SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                Document.CouldModified()
                            Catch ex As Exception
                            End Try
                        Else
                            Try
                                Document.Read()
                                DeleteEcriture = "SET ARITHABORT ON UPDATE  F_DOCLIGNE SET DL_PieceBC='" & Trim(ListeBL(0)) & "', DL_NoRef=" & Trim(ListeBL(1)) & "  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(ListeBL(3)), ","), ".") & "' And DO_Type=13 SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                Document.CouldModified()
                            Catch ex As Exception
                            End Try
                        End If
                    Else
                        If IsDate(Trim(ListeBL(6))) = True Then
                            Try
                                Document.Read()
                                DeleteEcriture = "SET ARITHABORT ON UPDATE  F_DOCLIGNE SET DL_PieceBC='" & Trim(ListeBL(0)) & "',DL_DateBC=CONVERT(DATETIME, '" & Format(CDate(Trim(ListeBL(6))), "yyyy/MM/dd") & "', 102)  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(ListeBL(3)), ","), ".") & "' And DO_Type=13 SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                Document.CouldModified()
                            Catch ex As Exception
                            End Try
                        Else
                            Try
                                Document.Read()
                                DeleteEcriture = "SET ARITHABORT ON UPDATE  F_DOCLIGNE SET DL_PieceBC='" & Trim(ListeBL(0)) & "'  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(ListeBL(3)), ","), ".") & "' And DO_Type=13 SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                Document.CouldModified()
                            Catch ex As Exception
                            End Try
                        End If
                    End If
                End If
            Next i
            ListeReliquat = New List(Of String)
        End If
    End Sub
    Private Sub CreationTouslesTiers(ByRef EnteteCodeTiers As String, ByRef EntetePieceInterne As String, ByRef EnteteTyPeDocument As String, ByRef Document As IBODocumentAchat3, ByRef infoListe As List(Of Integer), ByRef FormatDatefichier As String, ByRef DocumentPieceCreation As Object, ByRef PieceAutomat As Object, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        If Trim(EntetePieceInterne) = Trim(EntetePiecePrecedent) Then
            If IsNothing(Document) = True Then
                If Trim(EnteteTyPeDocument) = "14" Then
                    Try
                        Document = BaseCial.FactoryDocumentAchat.CreateType(DocumentType.DocumentTypeAchatReprise)
                        Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                    Catch ex As Exception
                        ErreurJrn.WriteLine("Erreur de Création Entête de Bon Retour achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                        ListePiece.Add(EntetePieceInterne)
                        Er_cre_entete_doc = True
                    End Try
                Else
                    If Trim(EnteteTyPeDocument) = "12" Then
                        Try
                            Document = BaseCial.FactoryDocumentAchat.CreateType(DocumentType.DocumentTypeAchatCommandeConf)
                            Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                        Catch ex As Exception
                            ErreurJrn.WriteLine("Erreur de Création Entête de Commande Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                            ListePiece.Add(EntetePieceInterne)
                            Er_cre_entete_doc = True
                        End Try
                    Else
                        If Trim(EnteteTyPeDocument) = "13" Then
                            Try
                                Document = BaseCial.FactoryDocumentAchat.CreateType(DocumentType.DocumentTypeAchatLivraison)
                                Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                            Catch ex As Exception
                                ErreurJrn.WriteLine("Erreur de Création Entête de Bon de Reception N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                ListePiece.Add(EntetePieceInterne)
                                Er_cre_entete_doc = True
                            End Try
                        Else
                            If Trim(EnteteTyPeDocument) = "16" Then
                                Try
                                    If Datagridaffiche.Columns.Contains("ProvenanceFacture") = True Then
                                        If Trim(ProvenanceFacture) = "1" Then
                                            Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceRetour)
                                        Else
                                            If Trim(ProvenanceFacture) = "2" Then
                                                Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceAvoir)
                                            Else
                                                If Trim(ProvenanceFacture) = "3" Then
                                                    Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceTicket)
                                                Else
                                                    If Trim(ProvenanceFacture) = "4" Then
                                                        Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceRectif)
                                                    Else
                                                        If Trim(ProvenanceFacture) = "0" Then
                                                            Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceNormale)
                                                        Else
                                                            Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceNormale)
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Else
                                        Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceNormale)
                                    End If
                                    Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                                Catch ex As Exception
                                    ErreurJrn.WriteLine("Erreur de Création Entête de Facture Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                    ListePiece.Add(EntetePieceInterne)
                                    Er_cre_entete_doc = True
                                End Try
                            End If
                        End If
                    End If
                End If
                If IsNothing(Document) = False Then
                    'Création Ligne du document
                    Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle, Er_cre_entete_doc)
                End If
            Else
                'Création Ligne Document piece precedente = piece en cours et document existe
                Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle, Er_cre_entete_doc)
            End If
        Else
            ' piece precedent <> piece en cours
            Document = Nothing
            If IsNothing(Document) = True Then
                If Trim(EnteteTyPeDocument) = "14" Then
                    Try
                        Document = BaseCial.FactoryDocumentAchat.CreateType(DocumentType.DocumentTypeAchatReprise)
                        Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                    Catch ex As Exception
                        ErreurJrn.WriteLine("Erreur de Création Entête de Bon Retour achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                        ListePiece.Add(EntetePieceInterne)
                        Er_cre_entete_doc = True
                    End Try
                Else
                    If Trim(EnteteTyPeDocument) = "12" Then
                        Try
                            Document = BaseCial.FactoryDocumentAchat.CreateType(DocumentType.DocumentTypeAchatCommandeConf)
                            Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                        Catch ex As Exception
                            ErreurJrn.WriteLine("Erreur de Création Entête de  Commande Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                            ListePiece.Add(EntetePieceInterne)
                            Er_cre_entete_doc = True
                        End Try
                    Else
                        If Trim(EnteteTyPeDocument) = "13" Then
                            Try
                                Document = BaseCial.FactoryDocumentAchat.CreateType(DocumentType.DocumentTypeAchatLivraison)
                                Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                            Catch ex As Exception
                                ErreurJrn.WriteLine("Erreur de Création Entête de Bon de Reception N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                ListePiece.Add(EntetePieceInterne)
                                Er_cre_entete_doc = True
                            End Try
                        Else
                            If Trim(EnteteTyPeDocument) = "16" Then
                                Try
                                    If Datagridaffiche.Columns.Contains("ProvenanceFacture") = True Then
                                        If Trim(ProvenanceFacture) = "1" Then
                                            Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceRetour)
                                        Else
                                            If Trim(ProvenanceFacture) = "2" Then
                                                Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceAvoir)
                                            Else
                                                If Trim(ProvenanceFacture) = "3" Then
                                                    Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceTicket)
                                                Else
                                                    If Trim(ProvenanceFacture) = "4" Then
                                                        Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceRectif)
                                                    Else
                                                        If Trim(ProvenanceFacture) = "0" Then
                                                            Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceNormale)
                                                        Else
                                                            Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceNormale)
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Else
                                        Document = BaseCial.FactoryDocumentAchat.CreateFacture(DocumentProvenanceType.DocProvenanceNormale)
                                    End If
                                    Creation_Entete_Document(EnteteTyPeDocument, FormatDatefichier, DocumentPieceCreation, EntetePieceInterne, PieceAutomat, PieceCommande, IdentifiantCommande)
                                Catch ex As Exception
                                    ErreurJrn.WriteLine("Erreur de Création Entête de Facture Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                    ListePiece.Add(EntetePieceInterne)
                                    Er_cre_entete_doc = True
                                End Try
                            End If
                        End If
                    End If
                End If
                If IsNothing(Document) = False Then
                    'Création Ligne Document
                    Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle, Er_cre_entete_doc)
                End If
            End If
        End If
        EntetePiecePrecedent = EntetePieceInterne
    End Sub
    Private Function Verification_Integration_Fichier(ByVal sPathFilexporter As String, ByVal spathFileFormat As String, ByRef Formatype As String, ByRef Base_Excel As String, ByRef sColumnsSepar As String, ByRef FormatdeDatefich As String, ByRef PieceCreation As Object, ByRef PieceAutomatique As Object) As Boolean
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim m As Integer
        Dim jColD As Integer
        Dim iLine As Integer
        Dim aRows() As String
        Dim iColPosition, iColGauchetxt As Integer
        Dim i As Integer, aCols() As String
        Initialiser()
        iLine = 0
        aRows = Nothing
        Document = Nothing
        If Trim(Formatype) = "Excel" Then
            Try
                If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                    ProgressBar1.Value = ProgressBar1.Minimum
                    Datagridaffiche.Rows.Clear()
                    NbreTotal = DecFormat
                    OleAdaptater = New OleDbDataAdapter("select * from [" & Base_Excel & "$] ", OleExcelConnected)
                    OleAfficheDataset = New DataSet
                    OleAdaptater.Fill(OleAfficheDataset)
                    Oledatable = OleAfficheDataset.Tables(0)
                    If Oledatable.Rows.Count <> 0 Then
                        ProgresMax = Oledatable.Rows.Count - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To Oledatable.Rows.Count - 1
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <= Oledatable.Columns.Count Then
                                    If iColPosition <> 0 Then
                                        If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                                            Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Oledatable.Rows(i).Item(iColPosition - 1))
                                        Else
                                            Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                        End If
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Verification_Integrer_Ecriture(FormatdeDatefich, PieceCreation, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                m = iLine
                            Else
                                If i = (Oledatable.Rows.Count - 1) Then
                                    Me.Refresh()
                                    Verification_Integrer_Ecriture(FormatdeDatefich, PieceCreation, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                    m = iLine
                                End If
                            End If
                        Next i
                    End If
                Else
                    ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                End If
            Catch ex As Exception
                exceptionTrouve = True
            End Try
        Else
            If Trim(Formatype) = "Délimité" Or Trim(Formatype) = "Tabulation" Or Trim(Formatype) = "Pipe" Then
                Try
                    If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                        aRows = GetArrayFile(sPathFilexporter, aRows)
                        NbreTotal = DecFormat
                        ProgressBar1.Value = ProgressBar1.Minimum
                        Datagridaffiche.Rows.Clear()
                        ProgresMax = UBound(aRows) + 1 - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To UBound(aRows)
                            aCols = Split(aRows(i), sColumnsSepar)
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <> 0 Then
                                    If iColPosition <= (UBound(aCols) + 1) Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(aCols(iColPosition - 1))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Verification_Integrer_Ecriture(FormatdeDatefich, PieceCreation, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                m = iLine
                            Else
                                If i = UBound(aRows) Then
                                    Me.Refresh()
                                    Verification_Integrer_Ecriture(FormatdeDatefich, PieceCreation, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                    m = iLine
                                End If
                            End If
                        Next i
                    Else
                        ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                    End If
                Catch ex As Exception
                    exceptionTrouve = True
                End Try
            Else
                If Trim(Formatype) = "Longueur Fixe" Then
                    Try
                        If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            NbreTotal = DecFormat
                            ProgressBar1.Value = ProgressBar1.Minimum
                            Datagridaffiche.Rows.Clear()
                            ProgresMax = UBound(aRows) + 1 - DecFormat
                            m = 0
                            infoListe = New List(Of Integer)
                            infoLigne = New List(Of Integer)
                            For i = DecFormat To UBound(aRows)
                                Datagridaffiche.RowCount = iLine + 1 - m
                                For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                    iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), "]") - 1))
                                    iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Next jColD
                                iLine = iLine + 1
                                If i Mod 10 = 0 Then
                                    Me.Refresh()
                                    Verification_Integrer_Ecriture(FormatdeDatefich, PieceCreation, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                    m = iLine
                                Else
                                    If i = UBound(aRows) Then
                                        Me.Refresh()
                                        Verification_Integrer_Ecriture(FormatdeDatefich, PieceCreation, PieceAutomatique, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                        m = iLine
                                    End If
                                End If
                            Next i
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                        exceptionTrouve = True
                    End Try
                End If
            End If
        End If
        Verification_Integration_Fichier = ExisteLecture
    End Function
    Private Function TranscodageTypedocument(ByRef vTypedocument As String) As String
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Try
            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Typedocument>' and Valeurlue ='" & Join(Split(Trim(vTypedocument), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
            fournisseurDs = New DataSet
            fournisseurAdap.Fill(fournisseurDs)
            fournisseurTab = fournisseurDs.Tables(0)
            If fournisseurTab.Rows.Count <> 0 Then
                Return fournisseurTab.Rows(0).Item("Correspond")
            Else
                Return vTypedocument
            End If
        Catch ex As Exception
            Return vTypedocument
        End Try
    End Function
    Private Sub Verification_Integrer_Ecriture(ByRef FormatfichierDate As String, ByRef PieceCreationDocument As Object, ByRef PieceAutoma As Object, ByRef FormatIntegrer As Object, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Me.Cursor = Cursors.WaitCursor
        BT_integrer.Enabled = False
        If Datagridaffiche.RowCount >= 0 Then
            ProgressBar1.Maximum = ProgresMax
            Try
                For numLigne = 0 To Datagridaffiche.RowCount - 1
                    vidage()
                    NbreTotal = NbreTotal + 1
                    Label5.Refresh()
                    Label5.Text = "Vérification des Integrations!"
                    For numColonne = 0 To Datagridaffiche.ColumnCount - 1
                        'Entête Document
                        If Trim(PieceAutoma) = "non" Then
                            If Datagridaffiche.Columns.Contains(PieceCreationDocument) = True Then
                                If Strings.Len(Trim(Datagridaffiche.Rows(numLigne).Cells(PieceCreationDocument).Value)) <= 8 Then
                                    EntetePieceInterne = Formatage_Chaine(Trim(Datagridaffiche.Rows(numLigne).Cells(PieceCreationDocument).Value))
                                Else
                                    EntetePieceInterne = Formatage_Chaine(Strings.Left(Trim(Datagridaffiche.Rows(numLigne).Cells(PieceCreationDocument).Value), 8))
                                    ErreurJrn.WriteLine("N°Pièce du Fichier :" & Trim(Datagridaffiche.Rows(numLigne).Cells(PieceCreationDocument).Value) & "  a été tronquée")
                                End If
                            End If
                        Else
                            EntetePieceInterne = Trim(Datagridaffiche.Rows(numLigne).Cells(PieceCreationDocument).Value)
                        End If
                        If InStr(IdentifiantCommande, ",") <> 0 Then
                            If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                PieceCommande = Join(Split(Trim(Datagridaffiche.Rows(numLigne).Cells(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)).Value), "'"), "''")
                            End If
                        End If

                        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                            PieceArticle = Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantArticle).Value)
                        End If
                        Dim OleDocAdapter As OleDbDataAdapter
                        Dim OleDocDataset As DataSet
                        Dim OleDocDatable As DataTable
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiers" Then
                            OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE DO_PIECE='" & Join(Split(Trim(PieceCommande), "'"), "''") & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                            OleDocDataset = New DataSet
                            OleDocAdapter.Fill(OleDocDataset)
                            OleDocDatable = OleDocDataset.Tables(0)
                            If OleDocDatable.Rows.Count <> 0 Then
                                If Trim(EnteteCodeTiers) = "" Then
                                    EnteteCodeTiers = OleDocDatable.Rows(0).Item("DO_Tiers")
                                End If
                            Else
                                EnteteCodeTiers = Formatage_Chaine(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                            End If
                            If EnteteCodeTiers = "" Then
                                ErreurJrn.WriteLine("<La commande Client est introuvable et le client non trouvé N¤ Pièce : " & Trim(EntetePieceInterne) & " Le BL ne sera pas importé")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "ProvenanceFacture" Then
                            ProvenanceFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiers" Then
                        '    EnteteCodeTiers = Formatage_Chaine(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                        'End If

                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTyPeDocument" Then
                            EnteteTyPeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteContact" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 35 Then
                                EnteteContact = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteContact = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 35)
                                ErreurJrn.WriteLine("Le Contact  :" & EnteteContact & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete1" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete1 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 1 :" & Entete1 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete2" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete2 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 2 :" & Entete2 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete3" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete3 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 3 :" & Entete3 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete4" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete4 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete4 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 4 :" & Entete4 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteBLFacture" Then
                            EnteteBLFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCatégorieComptable" Then
                            EnteteCatégorieComptable = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCatégorietarifaire" Then
                            EnteteCatégorietarifaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeAffaire" Then
                            EnteteCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiersPayeur" Then
                            EnteteCodeTiersPayeur = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteFraisExpedition" Then
                            EnteteFraisExpedition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteColisagedeLivraison" Then
                            EnteteColisagedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCompteGeneral" Then
                            EnteteCompteGeneral = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteConditiondeLivraison" Then
                            EnteteConditiondeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteDateDocument" Then
                            EnteteDateDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteDateLivraison" Then
                            EnteteDateLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteEcartValorisation" Then
                            EnteteEcartValorisation = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleDepot" Then
                            EnteteIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotEntete" Then
                            IDDepotEntete = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotLigne" Then
                            IDDepotLigne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleDevise" Then
                            EnteteIntituleDevise = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleExpédition" Then
                            EnteteIntituleExpédition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNatureTransaction" Then
                            EnteteNatureTransaction = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNombredeFacture" Then
                            EnteteNombredeFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNomReprésentant" Then
                            EnteteNomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EntetePrenomReprésentant" Then
                            EntetePrenomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "EntetePlanAnalytique" Then
                            EntetePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                EnteteReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                                ErreurJrn.WriteLine("La Référence en Entête :" & EnteteReference & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteRegimeDocument" Then
                            EnteteRegimeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteSoucheDocument" Then
                            EnteteSoucheDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTauxescompte" Then
                            EnteteTauxescompte = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'Ligne Document
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeAffaire" Then
                            LigneCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedeFabrication" Then
                            LigneDatedeFabrication = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedeLivraison" Then
                            LigneDatedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedePeremption" Then
                            LigneDatedePeremption = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDesignationArticle" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 69 Then
                                LigneDesignationArticle = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneDesignationArticle = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 69)
                                ErreurJrn.WriteLine("La Désignation Article :" & LigneDesignationArticle & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneEnumereConditionnement" Then
                            LigneEnumereConditionnement = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneFraisApproche" Then
                            LigneFraisApproche = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneIntituleDepot" Then
                            LigneIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneNomRepresentant" Then
                            LigneNomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneNSerieLot" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 30 Then
                                LigneNSerieLot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneNSerieLot = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 30)
                                ErreurJrn.WriteLine("Le N°SerieLot :" & LigneNSerieLot & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePlanAnalytique" Then
                            LignePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsBrut" Then
                            LignePoidsBrut = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsNet" Then
                            LignePoidsNet = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrenomRepresentant" Then
                            LignePrenomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixdeRevientUnitaire" Then
                            LignePrixdeRevientUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaire" Then
                            LignePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaireDevise" Then
                            LignePrixUnitaireDevise = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneValorisé" Then
                            LigneValorisé = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypePrixUnitaire" Then
                            LigneTypePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            LigneQuantite = Trim(Datagridaffiche.Rows(numLigne).Cells("LigneQuantite").Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneQuantiteConditionne" Then
                            LigneQuantiteConditionne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                LigneReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                                ErreurJrn.WriteLine("La Référence en Ligne :" & LigneReference & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeArticle" Then
                            LigneCodeArticle = Formatage_Article(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneReferenceArticleTiers" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 18 Then
                                LigneReferenceArticleTiers = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReferenceArticleTiers = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 18)
                                ErreurJrn.WriteLine("La Référence Article/Tiers :" & LigneReferenceArticleTiers & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise1" Then
                            LigneTauxRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise2" Then
                            LigneTauxRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise3" Then
                            LigneTauxRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise1" Then
                            LigneTypeRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise2" Then
                            LigneTypeRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise3" Then
                            LigneTypeRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'RECHERCHE DE L'INTITULE DE L'INFO LIBRE
                        If Trim(FormatIntegrer) = "Longueur Fixe" Then
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{"))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        Else
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "[")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "["))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        End If
                    Next numColonne
                    If InStr(IdentifiantCommande, ",") <> 0 Then
                        If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                            Dim OleAdaptaterCa As OleDbDataAdapter
                            Dim OleCaDataset As DataSet
                            Dim OledatableCa As DataTable
                            OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                            OleCaDataset = New DataSet
                            OleAdaptaterCa.Fill(OleCaDataset)
                            OledatableCa = OleCaDataset.Tables(0)
                            If OledatableCa.Rows.Count <> 0 Then
                                Try
                                    Dim OleDocAdapter As OleDbDataAdapter
                                    Dim OleDocDataset As DataSet
                                    Dim OleDocDatable As DataTable
                                    OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                    OleDocDataset = New DataSet
                                    OleDocAdapter.Fill(OleDocDataset)
                                    OleDocDatable = OleDocDataset.Tables(0)
                                    If OleDocDatable.Rows.Count = 1 Then
                                        If Trim(EnteteCodeTiers) = "" Then
                                            EnteteCodeTiers = OleDocDatable.Rows(0).Item("DO_Tiers")
                                        End If
                                    End If
                                Catch ex As Exception

                                End Try
                            End If
                        End If
                    End If
                    'Creation Effective du Document Commercial
                    EnteteTyPeDocument = TranscodageTypedocument(EnteteTyPeDocument)
                    If Trim(EnteteTyPeDocument) = "14" Then 'Bon de Retour
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                            Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count <> 0 Then
                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le fournisseur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " n'existe pas dans la base Sage")
                                End If
                            Else
                                ExisteLecture = False
                                exceptionTrouve = True
                                ErreurJrn.WriteLine("Le fournisseur : " & Trim(EnteteCodeTiers) & " n'existe pas dans la base Sage et dans la table de Correspondance")
                            End If
                        End If
                    Else
                        If Trim(EnteteTyPeDocument) = "12" Then 'Commande
                            If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                        Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    Else
                                        ExisteLecture = False
                                        exceptionTrouve = True
                                        ErreurJrn.WriteLine("Le fournisseur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " n'existe pas dans la base Sage")
                                    End If
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le fournisseur : " & Trim(EnteteCodeTiers) & " n'existe pas dans la base Sage et dans la table de Correspondance")
                                End If
                            End If
                        Else
                            If Trim(EnteteTyPeDocument) = "13" Then 'Livraison
                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                    Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                Else
                                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                    fournisseurDs = New DataSet
                                    fournisseurAdap.Fill(fournisseurDs)
                                    fournisseurTab = fournisseurDs.Tables(0)
                                    If fournisseurTab.Rows.Count <> 0 Then
                                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                            Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        Else
                                            ExisteLecture = False
                                            exceptionTrouve = True
                                            ErreurJrn.WriteLine("Le fournisseur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " n'existe pas dans la base Sage")
                                        End If
                                    Else
                                        ExisteLecture = False
                                        exceptionTrouve = True
                                        ErreurJrn.WriteLine("Le fournisseur : " & Trim(EnteteCodeTiers) & " n'existe pas dans la base Sage et dans la table de Correspondance")
                                    End If
                                End If
                            Else
                                If Trim(EnteteTyPeDocument) = "16" Then 'Facture
                                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                                        Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    Else
                                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "'  And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        fournisseurDs = New DataSet
                                        fournisseurAdap.Fill(fournisseurDs)
                                        fournisseurTab = fournisseurDs.Tables(0)
                                        If fournisseurTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                                Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCreationDocument, PieceAutoma, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            Else
                                                ExisteLecture = False
                                                exceptionTrouve = True
                                                ErreurJrn.WriteLine("Le fournisseur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " n'existe pas dans la base Sage")
                                            End If
                                        Else
                                            ExisteLecture = False
                                            exceptionTrouve = True
                                            ErreurJrn.WriteLine("Le fournisseur : " & Trim(EnteteCodeTiers) & " n'existe pas dans la base Sage et dans la table de Correspondance")
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le type de document ne correspond à aucune de ces valeurs (12:Commande achat,13:Bon de reception,16:Facture achat)")
                                End If
                            End If
                        End If
                    End If
                    NbreLigne = NbreLigne + 1
                    ProgressBar1.Value = ProgressBar1.Value + 1
                    Label8.Text = NbreLigne & "/" & ProgresMax
                    Label8.Refresh()
                Next numLigne
            Catch ex As Exception
                ExisteLecture = False
                exceptionTrouve = True
                ErreurJrn.WriteLine("Une erreur s'est produit au moment de la lecture du fichier  : " & Trim(EnteteCodeTiers) & "  " & ex.Message)
            End Try
        End If
        Datagridaffiche.Rows.Clear()
        Me.Cursor = Cursors.Default
        BT_integrer.Enabled = True
    End Sub
    Private Sub Verification_Parametrage(ByRef EnteteCodeTiers As String, ByRef EntetePieceInterne As String, ByRef EnteteTyPeDocument As String, ByRef Document As IBODocumentAchat3, ByRef infoListe As List(Of Integer), ByRef FormatDatefichier As String, ByRef PieceCreationDocument As Object, ByRef PieceAutomtique As Object, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim OleDocAdapter As OleDbDataAdapter
        Dim OleDocDataset As DataSet
        Dim OleDocDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        Dim Depot_No As Integer
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        If Trim(PieceAutomtique) = "non" Then
            If EnteteTyPeDocument = "14" Then
                If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                    If Trim(LigneQuantite) <> "" Then
                        If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                    If Trim(LigneQuantiteConditionne) <> "" Then
                        If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                            End If
                        End If
                    End If
                End If
                If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatReprise, EntetePieceInterne) = True Then
                    ErreurJrn.WriteLine("Bon de Retour N° : " & EntetePieceInterne & " Existe déja ")
                    ExisteLecture = False
                End If
            Else
                If EnteteTyPeDocument = "12" Then
                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                        If Trim(LigneQuantite) <> "" Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                End If
                            End If
                        End If
                    End If
                    If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                        If Trim(LigneQuantiteConditionne) <> "" Then
                            If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                                If CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                End If
                            End If
                        End If
                    End If
                    If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatCommandeConf, EntetePieceInterne) = True Then
                        ErreurJrn.WriteLine("Commande N° : " & EntetePieceInterne & " Existe déja ")
                        ExisteLecture = False
                    End If
                Else
                    If EnteteTyPeDocument = "13" Then
                        If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatLivraison, EntetePieceInterne) = True Then
                            ErreurJrn.WriteLine("Bon de Reception N° : " & EntetePieceInterne & " Existe déja ")
                            ExisteLecture = False
                        End If
                    Else
                        If EnteteTyPeDocument = "16" Then
                            If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatFacture, EntetePieceInterne) = True Then
                                ErreurJrn.WriteLine("Facture Achat N° : " & EntetePieceInterne & " Existe déja ")
                                ExisteLecture = False
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteTyPeDocument") = True Then
            If Trim(EnteteTyPeDocument) <> "" Then
                If Trim(EnteteTyPeDocument) = "14" Then
                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                        If Trim(LigneQuantite) <> "" Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                End If
                            End If
                        End If
                    End If
                    If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                        If Trim(LigneQuantiteConditionne) <> "" Then
                            If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                                If CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                End If
                            End If
                        End If
                    End If
                Else
                    If Trim(EnteteTyPeDocument) = "12" Then
                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            If Trim(LigneQuantite) <> "" Then
                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                            If Trim(LigneQuantiteConditionne) <> "" Then
                                If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If Trim(EnteteTyPeDocument) = "13" Then
                        Else
                            'ErreurJrn.WriteLine("Le type du document " & EnteteTyPeDocument & " dois être égal à 14:Bon de Retour achat, 12:Commande achat,13:Bon de reception,16:Facture achat : " & EntetePieceInterne & " le statut par défaut va être utilisé")
                        End If
                    End If
                End If
            End If
        End If
        If Trim(EntetePieceInterne) <> "" Then
        Else
            ErreurJrn.WriteLine("Le N°Pièce du fichier : " & EntetePieceInterne & " ne doit pas être vide ")
            ExisteLecture = False
        End If
        If Datagridaffiche.Columns.Contains("EnteteFraisExpedition") = True Then
            If Trim(EnteteFraisExpedition) <> "" Then
                If EstNumeric(Trim(EnteteFraisExpedition), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Frais d'Expédition : " & Trim(EnteteFraisExpedition) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCatégorieComptable") = True Then
            If Trim(EnteteCatégorieComptable) <> "" Then
                If BaseCial.FactoryCategorieComptaAchat.ExistIntitule(Trim(EnteteCatégorieComptable)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Categorie Comptable>' and Valeurlue ='" & Join(Split(Trim(EnteteCatégorieComptable), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryCategorieComptaAchat.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé Catégorie Comptable vente : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé Catégorie Comptable vente : " & Trim(EnteteCatégorieComptable) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("EnteteUniteColis") = True Then
            If Trim(EnteteUniteColis) <> "" Then
                If BaseCial.FactoryUnite.ExistIntitule(Trim(EnteteUniteColis)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Intitule Unite Colisage>' and Valeurlue ='" & Join(Split(Trim(EnteteUniteColis), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryUnite.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Unité de Livraison : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Unité de Livraison : " & Trim(EnteteUniteColis) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCatégorietarifaire") = True Then
            If Trim(EnteteCatégorietarifaire) <> "" Then
                If BaseCial.FactoryCategorieTarif.ExistIntitule(Trim(EnteteCatégorietarifaire)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Categorie Tarifaire>' and Valeurlue ='" & Join(Split(Trim(EnteteCatégorietarifaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryCategorieTarif.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé Catégorie tarifaire : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé Catégorie tarifaire : " & Trim(EnteteCatégorietarifaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EntetePlanAnalytique") = True Then
            If Datagridaffiche.Columns.Contains("EnteteCodeAffaire") = True Then
                If Trim(EntetePlanAnalytique) <> "" Then
                    If Trim(EnteteCodeAffaire) <> "" Then
                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(EntetePlanAnalytique)) = True Then
                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(EntetePlanAnalytique))
                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                            Else
                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(EnteteCodeAffaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(EntetePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                            End If
                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(EnteteCodeAffaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(EntetePlanAnalytique) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCompteGeneral") = True Then
            If Trim(EnteteCompteGeneral) <> "" Then
                If BaseCpta.FactoryCompteG.ExistNumero(Trim(EnteteCompteGeneral)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Compte General>' and Valeurlue ='" & Join(Split(Trim(EnteteCompteGeneral), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCpta.FactoryCompteG.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Compte Général : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le Compte Général : " & Trim(EnteteCompteGeneral) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteConditiondeLivraison") = True Then
            If Trim(EnteteConditiondeLivraison) <> "" Then
                If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(EnteteConditiondeLivraison)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition de Livraison>' and Valeurlue ='" & Join(Split(Trim(EnteteConditiondeLivraison), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé Condition de livraison : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé Condition de livraison : " & Trim(EnteteConditiondeLivraison) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("IDDepotEntete") = True Then
            If IsNumeric(Trim(IDDepotEntete)) = True Then
                statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotEntete)) & "'", OleSocieteConnect)
                statistDs = New DataSet
                statistAdap.Fill(statistDs)
                statistTab = statistDs.Tables(0)
                If statistTab.Rows.Count <> 0 Then
                    Depot_No = CInt(Trim(IDDepotEntete))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotEntete), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then
                                Depot_No = CInt(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< L'ID dépôt : " & fournisseurTab.Rows(0).Item("Correspond") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                            End If
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'ID dépôt : " & fournisseurTab.Rows(0).Item("Correspond") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " existant dans la table de paramétrage n'est pas numérique>")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'ID dépôt : " & Trim(IDDepotEntete) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            Else
                ExisteLecture = False
                ErreurJrn.WriteLine("< L'ID dépôt : " & IDDepotEntete & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " existant dans le fichier n'est pas numérique>")
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteIntituleDepot") = True Then
            If Trim(EnteteIntituleDepot) <> "" Then
                If BaseCial.FactoryDepot.ExistIntitule(Trim(EnteteIntituleDepot)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(EnteteIntituleDepot) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("IDDepotLigne") = True Then
            If IsNumeric(Trim(IDDepotLigne)) = True Then
                statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotLigne)) & "'", OleSocieteConnect)
                statistDs = New DataSet
                statistAdap.Fill(statistDs)
                statistTab = statistDs.Tables(0)
                If statistTab.Rows.Count <> 0 Then
                    Depot_No = CInt(Trim(IDDepotLigne))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotLigne), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then
                                Depot_No = CInt(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< L'ID dépôt : " & fournisseurTab.Rows(0).Item("Correspond") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                            End If
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'ID dépôt : " & fournisseurTab.Rows(0).Item("Correspond") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " existant dans la table de paramétrage n'est pas numérique>")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'ID dépôt : " & Trim(IDDepotLigne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            Else
                ExisteLecture = False
                ErreurJrn.WriteLine("< L'ID dépôt : " & IDDepotLigne & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " existant dans le fichier n'est pas numérique>")
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneIntituleDepot") = True Then
            If Trim(LigneIntituleDepot) <> "" Then
                If BaseCial.FactoryDepot.ExistIntitule(Trim(LigneIntituleDepot)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(LigneIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(LigneIntituleDepot) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If

            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteIntituleDevise") = True Then
            If Trim(EnteteIntituleDevise) <> "" Then
                If BaseCpta.FactoryDevise.ExistIntitule(Trim(EnteteIntituleDevise)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Code Devise>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleDevise), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCpta.FactoryDevise.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then

                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé de la  devise : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé de la  devise : " & Trim(EnteteIntituleDevise) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteColisagedeLivraison") = True Then
            If Trim(EnteteColisagedeLivraison) <> "" Then
                If EstNumeric(Trim(EnteteColisagedeLivraison), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Colisage de livraison : " & Trim(EnteteColisagedeLivraison) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneDatedeLivraison") = True Then
            If Trim(LigneDatedeLivraison) <> "" Then
                If Verificatdate(Trim(LigneDatedeLivraison), FormatDatefichier, "Date de Livraison en Ligne") = True Then
                Else
                    ExisteLecture = False
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("EnteteCours") = True Then
            If Trim(EnteteCours) <> "" Then
                If EstNumeric(Trim(EnteteCours), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Cours du document : " & Trim(EnteteCours) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteDateDocument") = True Then
            If Trim(EnteteDateDocument) <> "" Then
                If Verificatdate(Trim(EnteteDateDocument), FormatDatefichier, "Date de Document") = True Then
                Else
                    ExisteLecture = False
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteDateLivraison") = True Then
            If Trim(EnteteDateLivraison) <> "" Then
                If Verificatdate(Trim(EnteteDateLivraison), FormatDatefichier, "Date de Livraison") = True Then
                Else
                    ExisteLecture = False
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteEcartValorisation") = True Then
            If Trim(EnteteEcartValorisation) <> "" Then
                If EstNumeric(Trim(EnteteEcartValorisation), DecimalNomb, DecimalMone) = True Then

                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< L'Ecart de valorisation : " & Trim(EnteteEcartValorisation) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteNombredeFacture") = True Then
            If Trim(EnteteNombredeFacture) <> "" Then
                If EstNumeric(Trim(EnteteNombredeFacture), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Nombre de Facture : " & Trim(EnteteNombredeFacture) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteRegimeDocument") = True Then
            If Trim(EnteteRegimeDocument) <> "" Then
                If EstNumeric(Trim(EnteteRegimeDocument), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Regime du document : " & Trim(EnteteRegimeDocument) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If

            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteSoucheDocument") = True Then
            If Trim(EnteteSoucheDocument) <> "" Then
                If EstNumeric(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone) = True Then
                    statistAdap = New OleDbDataAdapter("select * from P_SOUCHEACHAT where cbIndice ='" & CInt(CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone)) + 1) & "'", OleSocieteConnect)
                    statistDs = New DataSet
                    statistAdap.Fill(statistDs)
                    statistTab = statistDs.Tables(0)
                    If statistTab.Rows.Count <> 0 Then

                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Indice de la  Souche du Document : " & CInt(CInt(RenvoiTaux(Trim(EnteteSoucheDocument), DecimalNomb, DecimalMone)) + 1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                    End If
                Else
                    If BaseCial.FactorySoucheAchat.ExistIntitule(Trim(EnteteSoucheDocument)) = True Then


                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Intitule Souche>' and Valeurlue ='" & Join(Split(Trim(EnteteSoucheDocument), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count <> 0 Then
                            If BaseCial.FactorySoucheAchat.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then

                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< L'Intitulé de la  Souche du Document : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                            End If
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé de la  Souche du Document : " & Trim(EnteteSoucheDocument) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteNatureTransaction") = True Then
            If Trim(EnteteNatureTransaction) <> "" Then
                If EstNumeric(Trim(EnteteNatureTransaction), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La Nature de transaction : " & Trim(EnteteNatureTransaction) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteTauxescompte") = True Then
            If Trim(EnteteTauxescompte) <> "" Then
                If EstNumeric(Trim(EnteteTauxescompte), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Taux d'escompte : " & Trim(EnteteTauxescompte) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = True Then
            If Trim(EnteteIntituleExpédition) <> "" Then
                If BaseCial.FactoryExpedition.ExistIntitule(Trim(EnteteIntituleExpédition)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition Expedition>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleExpédition), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCial.FactoryExpedition.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then

                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé de la  condition d'expédition : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé de la  condition d'expédition : " & Trim(EnteteIntituleExpédition) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteNomReprésentant") = True Then
            If Datagridaffiche.Columns.Contains("EntetePrenomReprésentant") = True Then
                If Trim(EnteteNomReprésentant) <> "" Then
                    If Trim(EntetePrenomReprésentant) <> "" Then
                        If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(EnteteNomReprésentant), Trim(EntetePrenomReprésentant)) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Nom/Prenom du representant : " & Trim(EnteteNomReprésentant) & "/" & Trim(EntetePrenomReprésentant) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCodeTiersPayeur") = True Then
            If Trim(EnteteCodeTiersPayeur) <> "" Then
                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiersPayeur)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiersPayeur), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then

                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Code tiers payeur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le Code tiers payeur : " & Trim(EnteteCodeTiersPayeur) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = True Then
            If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = True Then
                If Trim(LigneNomRepresentant) <> "" Then
                    If Trim(LignePrenomRepresentant) <> "" Then
                        If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant)) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Nom/Prenom du representant : " & Trim(LigneNomRepresentant) & "/" & Trim(LignePrenomRepresentant) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePlanAnalytique") = True Then
            If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = True Then
                If Trim(LignePlanAnalytique) <> "" Then
                    If Trim(LigneCodeAffaire) <> "" Then
                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(LignePlanAnalytique)) = True Then
                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(LignePlanAnalytique))
                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                            Else
                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(LigneCodeAffaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(LignePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                            End If
                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(LigneCodeAffaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(LignePlanAnalytique) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneFraisApproche") = True Then
            If Trim(LigneFraisApproche) <> "" Then
                If EstNumeric(Trim(LigneFraisApproche), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("<Frais  d'approche : " & Trim(LigneFraisApproche) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("LignePoidsNet") = True Then
            If Trim(LignePoidsNet) <> "" Then
                If EstNumeric(Trim(LignePoidsNet), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le poids Net : " & Trim(LignePoidsNet) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePoidsBrut") = True Then
            If Trim(LignePoidsBrut) <> "" Then
                If EstNumeric(Trim(LignePoidsBrut), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le poids brut : " & Trim(LignePoidsBrut) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePrixdeRevientUnitaire") = True Then
            If Trim(LignePrixdeRevientUnitaire) <> "" Then
                If EstNumeric(Trim(LignePrixdeRevientUnitaire), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix de revient unitaire : " & Trim(LignePrixdeRevientUnitaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
            If Trim(LignePrixUnitaire) <> "" Then
                If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire : " & Trim(LignePrixUnitaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
            If Trim(LignePrixUnitaireDevise) <> "" Then
                If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire Devise : " & Trim(LignePrixUnitaireDevise) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
            If Trim(LigneTypePrixUnitaire) = "1" Then
            Else
                If Trim(LigneTypePrixUnitaire) = "0" Then
                Else
                    ErreurJrn.WriteLine("Le type de prix ne correspond à 0/1 : " & Trim(LigneTypePrixUnitaire) & " par défaut est utilisé - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("LigneDatedeFabrication") = True Then
            If Trim(LigneDatedeFabrication) <> "" Then
                If IsDate(Trim(LigneDatedeFabrication)) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La date de Fabrication : " & Trim(LigneDatedeFabrication) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas au format date >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneDatedePeremption") = True Then
            If Trim(LigneDatedePeremption) <> "" Then
                If IsDate(Trim(LigneDatedePeremption)) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La date de Peremption : " & Trim(LigneDatedePeremption) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas au format date >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
            If Trim(LigneQuantite) <> "" Then
                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then

                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
            If Trim(LigneQuantiteConditionne) <> "" Then
                If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCodeTiers") = True Or EnteteCodeTiers <> "" Then
            If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
                If Trim(LigneCodeArticle) <> "" Then
                    If Trim(EnteteCodeTiers) <> "" Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                            If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                                If BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)).AR_SuiviStock = SuiviStockType.SuiviStockTypeSerie Then
                                    'ExisteLecture = False
                                    'ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Série >")
                                End If
                                If BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)).AR_SuiviStock = SuiviStockType.SuiviStockTypeLot Then

                                End If
                                If BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)).AR_Type = ArticleType.ArticleTypeGamme Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est de type Gamme >")
                                End If
                                If Trim(LigneQuantite) <> "" Then

                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La quantité pour La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " doit être obligatoire >")
                                End If
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                        If BaseCial.FactoryArticle.ReadReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))).AR_SuiviStock = SuiviStockType.SuiviStockTypeSerie Then
                                            'ExisteLecture = False
                                            'ErreurJrn.WriteLine("< La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Série >")
                                        End If
                                        If BaseCial.FactoryArticle.ReadReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))).AR_SuiviStock = SuiviStockType.SuiviStockTypeLot Then
                                            'ExisteLecture = False
                                            'ErreurJrn.WriteLine("< La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Lot >")
                                        End If
                                        If BaseCial.FactoryArticle.ReadReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))).AR_Type = ArticleType.ArticleTypeGamme Then
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est de type Gamme >")
                                        End If
                                        If Trim(LigneQuantite) <> "" Then

                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< La quantité pour La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " doit être obligatoire >")
                                        End If
                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " - fournisseur : " & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count <> 0 Then
                                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                                        If BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)).AR_SuiviStock = SuiviStockType.SuiviStockTypeSerie Then
                                            'ExisteLecture = False
                                            'ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Série >")
                                        End If
                                        If BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)).AR_SuiviStock = SuiviStockType.SuiviStockTypeLot Then
                                            'ExisteLecture = False
                                            'ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Lot >")
                                        End If
                                        If BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)).AR_Type = ArticleType.ArticleTypeGamme Then
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est de type Gamme >")
                                        End If
                                        If Trim(LigneQuantite) <> "" Then

                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< La quantité pour La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " doit être obligatoire >")
                                        End If
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Correspond")), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCial.FactoryArticle.ExistReference(Trim(statistTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                                If BaseCial.FactoryArticle.ReadReference(Trim(statistTab.Rows(0).Item("Code_Article_Dis"))).AR_SuiviStock = SuiviStockType.SuiviStockTypeSerie Then
                                                    'ExisteLecture = False
                                                    'ErreurJrn.WriteLine("< La Référence Article : " & Trim(statistTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Série >")
                                                End If
                                                If BaseCial.FactoryArticle.ReadReference(Trim(statistTab.Rows(0).Item("Code_Article_Dis"))).AR_SuiviStock = SuiviStockType.SuiviStockTypeLot Then
                                                    'ExisteLecture = False
                                                    'ErreurJrn.WriteLine("< La Référence Article : " & Trim(statistTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est suivi en Lot >")
                                                End If
                                                If BaseCial.FactoryArticle.ReadReference(Trim(statistTab.Rows(0).Item("Code_Article_Dis"))).AR_Type = ArticleType.ArticleTypeGamme Then
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("< La Référence Article : " & Trim(statistTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est de type Gamme >")
                                                End If
                                                If Trim(LigneQuantite) <> "" Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("< La quantité pour La Référence Article : " & Trim(statistTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " doit être obligatoire >")
                                                End If
                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("< La Référence Article : " & Trim(statistTab.Rows(0).Item("Code_Article_Dis")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                            End If
                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " - fournisseur : " & Join(Split(Trim(fournisseurTab.Rows(0).Item("Correspond")), "'"), "''") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code du fournisseur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas  dans Sage >")
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le Code du fournisseur : " & Trim(EnteteCodeTiers) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                            End If
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le Code du fournisseur : " & Trim(EnteteCodeTiers) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " est Obligatoire >")
                    End If

                Else
                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                        If Trim(LigneQuantite) <> "" Then
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< La quantité :" & Trim(LigneQuantite) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                        End If
                    End If
                    If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                        If Trim(LignePrixUnitaire) <> "" Then
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le prix unitaire :" & Trim(LignePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                        End If
                    End If
                    If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                        If Trim(LignePrixUnitaireDevise) <> "" Then
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le prix unitaire Devise :" & Trim(LignePrixUnitaireDevise) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                        End If
                    End If
                    If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                        If Trim(LigneTypePrixUnitaire) <> "" Then
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le prix unitaire TTC :" & Trim(LigneTypePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                        End If
                    End If
                End If
            Else
                If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                    If Trim(LigneQuantite) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< La quantité :" & Trim(LigneQuantite) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                    If Trim(LignePrixUnitaire) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le prix unitaire :" & Trim(LignePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                    If Trim(LignePrixUnitaireDevise) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le prix unitaire Devise :" & Trim(LignePrixUnitaireDevise) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                    If Trim(LigneTypePrixUnitaire) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le prix unitaire TTC :" & Trim(LigneTypePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCodeTiers") = True Or EnteteCodeTiers <> "" Then
            If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiers)) = True Then
                If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                    If InStr(IdentifiantCommande, ",") <> 0 Then
                        If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                            If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                Dim OleAdaptaterLe As OleDbDataAdapter
                                Dim OleLeDataset As DataSet
                                Dim OledatableLe As DataTable
                                OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                OleLeDataset = New DataSet
                                OleAdaptaterLe.Fill(OleLeDataset)
                                OledatableLe = OleLeDataset.Tables(0)
                                If OledatableLe.Rows.Count <> 0 Then
                                    Dim OleAdaptaterCa As OleDbDataAdapter
                                    Dim OleCaDataset As DataSet
                                    Dim OledatableCa As DataTable
                                    OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                    OleCaDataset = New DataSet
                                    OleAdaptaterCa.Fill(OleCaDataset)
                                    OledatableCa = OleCaDataset.Tables(0)
                                    If OledatableCa.Rows.Count <> 0 Then
                                        Try
                                            OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                            OleDocDataset = New DataSet
                                            OleDocAdapter.Fill(OleDocDataset)
                                            OleDocDatable = OleDocDataset.Tables(0)
                                            If OleDocDatable.Rows.Count = 1 Then
                                                OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                OleRecherDataset = New DataSet
                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                If OleRechDatable.Rows.Count = 0 Then
                                                    ErreurJrn.WriteLine("< L'Article Reliquat Recherché : " & Trim(PieceArticle) & " dans le document N°: " & Trim(PieceCommande) & " Code Tiers : " & Trim(EnteteCodeTiers) & " n'existe pas dans Sage")
                                                Else
                                                    If OleRechDatable.Rows.Count > 1 Then
                                                        ExisteLecture = False
                                                        ErreurJrn.WriteLine("< L'Article Reliquat Recherché : " & Trim(PieceArticle) & " dans le document N° : " & Trim(PieceCommande) & " Code Tiers : " & Trim(EnteteCodeTiers) & " existe plusieurs fois dans le document")
                                                    Else
                                                        If OleRechDatable.Rows.Count = 1 Then
                                                            Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                            Dim OleCaDataset1 As DataSet
                                                            Dim OledatableCa1 As DataTable
                                                            OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                            OleCaDataset1 = New DataSet
                                                            OleAdaptaterCa1.Fill(OleCaDataset1)
                                                            OledatableCa1 = OleCaDataset1.Tables(0)
                                                            If OledatableCa1.Rows.Count <> 0 Then
                                                                Dim OleComDeletAna As OleDbCommand
                                                                Dim DeleteEcriture As String
                                                                Try
                                                                    DeleteEcriture = "SET ARITHABORT ON"
                                                                    OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                    OleComDeletAna.Connection = OleSocieteConnect
                                                                    OleComDeletAna.ExecuteNonQuery()
                                                                    DeleteEcriture = "UPDATE  F_DOCLIGNE SET " & Trim(IdentifiantArticle) & "='" & Join(Split(Trim(PieceArticle), "'"), "''") & "'  WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Trim(EnteteCodeTiers) & "'And DO_Type=12 And DO_Domaine=1"
                                                                    OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                    OleComDeletAna.Connection = OleSocieteConnect
                                                                    OleComDeletAna.ExecuteNonQuery()
                                                                    DeleteEcriture = "SET ARITHABORT OFF"
                                                                    OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                    OleComDeletAna.Connection = OleSocieteConnect
                                                                    OleComDeletAna.ExecuteNonQuery()
                                                                Catch ex As Exception
                                                                    ExisteLecture = False
                                                                    ErreurJrn.WriteLine("< Erreur de Mise à Jour de l'info Libre  : " & Trim(IdentifiantArticle) & " Pour identification de la ligne en Objet Métier >  Erreur système rattachée : " & ex.Message)
                                                                End Try
                                                            Else
                                                                exceptionTrouve = False
                                                                ErreurJrn.WriteLine("< Le Champ où est adressé les valeurs de  N°Ligne  : " & Trim(IdentifiantArticle) & " n'est pas une information libre dans Sage")
                                                            End If
                                                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                    If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                        'ExisteLecture = False
                                                                        ErreurJrn.WriteLine("N°Article Reliquat :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                    End If
                                                                Else
                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                        If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                            'ExisteLecture = False
                                                                            ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                        End If
                                                                    Else
                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                            If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                                'ExisteLecture = False
                                                                                ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                If OleDocDatable.Rows.Count > 1 Then
                                                    ErreurJrn.WriteLine("< Le document Reliquat  existe plusieurs fois dans Sage : " & Trim(PieceCommande))
                                                    ExisteLecture = False
                                                Else
                                                    If OleDocDatable.Rows.Count = 0 Then
                                                        ErreurJrn.WriteLine("< Le document Reliquat  n'existe pas dans Sage : " & Trim(PieceCommande))
                                                    End If
                                                End If
                                            End If

                                        Catch ex As Exception
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                        End Try
                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< Erreur de Recherche du champ de critère en Ligne de document Colonne : " & Trim(IdentifiantCommande))
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Erreur de Recherche du champ de critère en Ligne de document Colonne : " & Trim(IdentifiantArticle))
                                End If
                            End If
                        End If
                    End If
                End If
            Else
                Dim fournisseurAdapCa As OleDbDataAdapter
                Dim fournisseurDataset As DataSet
                Dim fournisseurdatableCa As DataTable
                fournisseurAdapCa = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiers), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                fournisseurDataset = New DataSet
                fournisseurAdapCa.Fill(fournisseurDataset)
                fournisseurdatableCa = fournisseurDataset.Tables(0)
                If fournisseurdatableCa.Rows.Count <> 0 Then
                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurdatableCa.Rows(0).Item("Correspond"))) = True Then
                        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                            If InStr(IdentifiantCommande, ",") <> 0 Then
                                If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                        Dim OleAdaptaterLe As OleDbDataAdapter
                                        Dim OleLeDataset As DataSet
                                        Dim OledatableLe As DataTable
                                        OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                        OleLeDataset = New DataSet
                                        OleAdaptaterLe.Fill(OleLeDataset)
                                        OledatableLe = OleLeDataset.Tables(0)
                                        If OledatableLe.Rows.Count <> 0 Then
                                            Dim OleAdaptaterCa As OleDbDataAdapter
                                            Dim OleCaDataset As DataSet
                                            Dim OledatableCa As DataTable
                                            OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                            OleCaDataset = New DataSet
                                            OleAdaptaterCa.Fill(OleCaDataset)
                                            OledatableCa = OleCaDataset.Tables(0)
                                            If OledatableCa.Rows.Count <> 0 Then
                                                Try
                                                    OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                    OleDocDataset = New DataSet
                                                    OleDocAdapter.Fill(OleDocDataset)
                                                    OleDocDatable = OleDocDataset.Tables(0)
                                                    If OleDocDatable.Rows.Count = 1 Then
                                                        OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Join(Split(Trim(fournisseurdatableCa.Rows(0).Item("Correspond")), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count = 0 Then
                                                            ErreurJrn.WriteLine("< L'Article Reliquat Recherché : " & Trim(PieceArticle) & " dans le document N°: " & Trim(PieceCommande) & " Code Tiers : " & Trim(fournisseurdatableCa.Rows(0).Item("Correspond")) & " n'existe pas dans Sage")
                                                        Else
                                                            If OleRechDatable.Rows.Count > 1 Then
                                                                ExisteLecture = False
                                                                ErreurJrn.WriteLine("< L'Article Reliquat Recherché : " & Trim(PieceArticle) & " dans le document N° : " & Trim(PieceCommande) & " Code Tiers : " & Trim(fournisseurdatableCa.Rows(0).Item("Correspond")) & " existe plusieurs fois dans le document")
                                                            Else
                                                                If OleRechDatable.Rows.Count = 1 Then
                                                                    Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                                    Dim OleCaDataset1 As DataSet
                                                                    Dim OledatableCa1 As DataTable
                                                                    OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                                    OleCaDataset1 = New DataSet
                                                                    OleAdaptaterCa1.Fill(OleCaDataset1)
                                                                    OledatableCa1 = OleCaDataset1.Tables(0)
                                                                    If OledatableCa1.Rows.Count <> 0 Then
                                                                        Dim OleComDeletAna As OleDbCommand
                                                                        Dim DeleteEcriture As String
                                                                        Try
                                                                            DeleteEcriture = "SET ARITHABORT ON"
                                                                            OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                            OleComDeletAna.Connection = OleSocieteConnect
                                                                            OleComDeletAna.ExecuteNonQuery()
                                                                            DeleteEcriture = "UPDATE  F_DOCLIGNE SET " & Trim(IdentifiantArticle) & "='" & Join(Split(Trim(PieceArticle), "'"), "''") & "'  WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Join(Split(Trim(fournisseurdatableCa.Rows(0).Item("Correspond")), "'"), "''") & "'And DO_Type=12 And DO_Domaine=1"
                                                                            OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                            OleComDeletAna.Connection = OleSocieteConnect
                                                                            OleComDeletAna.ExecuteNonQuery()
                                                                            DeleteEcriture = "SET ARITHABORT OFF"
                                                                            OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                            OleComDeletAna.Connection = OleSocieteConnect
                                                                            OleComDeletAna.ExecuteNonQuery()
                                                                        Catch ex As Exception
                                                                            ExisteLecture = False
                                                                            ErreurJrn.WriteLine("< Erreur de Mise à Jour de l'info Libre  : " & Trim(IdentifiantArticle) & " Pour identification de la ligne en Objet Métier >  Erreur système rattachée : " & ex.Message)
                                                                        End Try
                                                                    Else
                                                                        exceptionTrouve = False
                                                                        ErreurJrn.WriteLine("< Le Champ où est adressé les valeurs de  N°Ligne  : " & Trim(IdentifiantArticle) & " n'est pas une information libre dans Sage")
                                                                    End If
                                                                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                            If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                                'ExisteLecture = False
                                                                                ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                            End If
                                                                        Else
                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                                If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                                    'ExisteLecture = False
                                                                                    ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                                End If
                                                                            Else
                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                                    If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                                        'ExisteLecture = False
                                                                                        ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        If OleDocDatable.Rows.Count > 1 Then
                                                            ErreurJrn.WriteLine("< Le document Reliquat  existe plusieurs fois dans Sage : " & Trim(PieceCommande))
                                                            ExisteLecture = False
                                                        Else
                                                            If OleDocDatable.Rows.Count = 0 Then
                                                                ErreurJrn.WriteLine("< Le document Reliquat  n'existe pas dans Sage : " & Trim(PieceCommande))
                                                            End If
                                                        End If
                                                    End If
                                                Catch ex As Exception
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                                End Try
                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("< Erreur de Recherche du champ de critère en Ligne de document Colonne : " & Trim(IdentifiantCommande))
                                            End If
                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Erreur de Recherche du champ de critère en Ligne de document Colonne : " & Trim(IdentifiantArticle))
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le Code du Fournisseur : " & Trim(fournisseurdatableCa.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas  dans Sage >")
                    End If
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Code du Fournisseur : " & Trim(EnteteCodeTiers) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                End If
            End If
        Else
            ErreurJrn.WriteLine("< Le Fournisseur n'existe pas dans le descriptif d'import- N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " >")
        End If
        If Datagridaffiche.Columns.Contains("LigneTypeRemise1") = True Then
            If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                If Trim(LigneTauxRemise1) <> "" Then
                    If Trim(LigneTypeRemise1) = "1" Then
                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                        End If
                    Else
                        If Trim(LigneTypeRemise1) = "2" Then
                            If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                            End If
                        Else
                            If Trim(LigneTypeRemise1) = "0" Then
                                If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                If Trim(LigneTauxRemise1) <> "" Then
                    If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                    End If
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("LigneTypeRemise2") = True Then
            If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                If Trim(LigneTauxRemise2) <> "" Then
                    If Trim(LigneTypeRemise2) = "1" Then
                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                        End If
                        If Trim(LigneTypeRemise2) = "2" Then
                            If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                            End If
                        Else
                            If Trim(LigneTypeRemise2) = "0" Then
                                If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                If Trim(LigneTauxRemise2) <> "" Then
                    If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneTypeRemise3") = True Then
            If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                If Trim(LigneTauxRemise3) <> "" Then
                    If Trim(LigneTypeRemise3) = "1" Then
                        If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                        End If
                    Else
                        If Trim(LigneTypeRemise3) = "2" Then
                            If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                            End If
                        Else
                            If Trim(LigneTypeRemise3) = "0" Then
                                If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                If Trim(LigneTauxRemise3) <> "" Then
                    If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then

                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                    End If
                End If
            End If
        End If
        'Traitement des Infos Libres
        Try
            If infoLigne.Count > 0 Then
                While infoLigne.Count <> 0
                    OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoLigne.Item(0)).Name) & "' And InfoLigne=True", OleConnenection)
                    OleDeleteDataset = New DataSet
                    OleAdaptaterDelete.Fill(OleDeleteDataset)
                    OledatableDelete = OleDeleteDataset.Tables(0)
                    If OledatableDelete.Rows.Count <> 0 Then
                        'L'info Libre Parametrée par l'utilisateur existe dans Sage
                        If IsNothing(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) = False Then
                            If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    'Texte
                                    If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Table
                                    If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Montant
                                    If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Valeur
                                    If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If

                                    'Date Court
                                    If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Date Longue
                                    If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Ligne de Document :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                End If
                            End If
                        Else
                            'nothing
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Ligne de Document :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table de Paramétrage")
                    End If
                    'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                    infoLigne.RemoveAt(0)
                End While
            End If
        Catch ex As Exception
            exceptionTrouve = True
            ExisteLecture = False
            ErreurJrn.WriteLine(" Erreur de Création de L'information Libre Ligne Document " & ex.Message & ", vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données")
        End Try
        'Traitement des Infos Libres
        Try
            If infoListe.Count > 0 Then
                While infoListe.Count <> 0
                    OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoListe.Item(0)).Name) & "' And Libre=True", OleConnenection)
                    OleDeleteDataset = New DataSet
                    OleAdaptaterDelete.Fill(OleDeleteDataset)
                    OledatableDelete = OleDeleteDataset.Tables(0)
                    If OledatableDelete.Rows.Count <> 0 Then
                        'L'info Libre Parametrée par l'utilisateur existe dans Sage
                        If IsNothing(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) = False Then
                            If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCENTETE' and CB_Name ='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    'Texte
                                    If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Table
                                    If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Montant
                                    If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Valeur
                                    If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If

                                    'Date Court
                                    If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Date Longue
                                    If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Entête de Document :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                End If
                            End If
                        Else
                            'nothing
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Entête de Document :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table de Paramétrage")
                    End If
                    'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                    infoListe.RemoveAt(0)
                End While
            End If
        Catch ex As Exception
            ExisteLecture = False
            exceptionTrouve = True
            ErreurJrn.WriteLine(" Erreur de Création de L'information Libre Entête de Document " & ex.Message & " , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données")
        End Try
    End Sub
    Private Sub Modification_Integration_Fichier(ByVal sPathFilexporter As String, ByVal spathFileFormat As String, ByRef Formatype As String, ByRef Base_Excel As String, ByRef sColumnsSepar As String, ByRef IdentifiantPiece As String, ByRef FormatdeDatefich As String)
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim m As Integer
        Dim jColD As Integer
        Dim iLine As Integer
        Dim aRows() As String
        Dim iColPosition, iColGauchetxt As Integer
        Dim i As Integer, aCols() As String
        Initialiser()
        iLine = 0
        aRows = Nothing
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If
        End If
        If Trim(Formatype) = "Excel" Then
            Try
                If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                    ProgressBar1.Value = ProgressBar1.Minimum
                    Datagridaffiche.Rows.Clear()
                    NbreTotal = DecFormat
                    OleAdaptater = New OleDbDataAdapter("select * from [" & Base_Excel & "$] ", OleExcelConnected)
                    OleAfficheDataset = New DataSet
                    OleAdaptater.Fill(OleAfficheDataset)
                    Oledatable = OleAfficheDataset.Tables(0)
                    If Oledatable.Rows.Count <> 0 Then
                        ProgresMax = Oledatable.Rows.Count - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To Oledatable.Rows.Count - 1
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <= Oledatable.Columns.Count Then
                                    If iColPosition <> 0 Then
                                        If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                                            Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Oledatable.Rows(i).Item(iColPosition - 1))
                                        Else
                                            Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                        End If
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Modification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                m = iLine
                            Else
                                If i = (Oledatable.Rows.Count - 1) Then
                                    Me.Refresh()
                                    Modification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                    m = iLine
                                End If
                            End If
                        Next i
                    End If
                Else
                    ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                End If
            Catch ex As Exception
                exceptionTrouve = True
            End Try
        Else
            If Trim(Formatype) = "Délimité" Or Trim(Formatype) = "Tabulation" Or Trim(Formatype) = "Pipe" Then
                Try
                    If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                        aRows = GetArrayFile(sPathFilexporter, aRows)
                        NbreTotal = DecFormat
                        ProgressBar1.Value = ProgressBar1.Minimum
                        Datagridaffiche.Rows.Clear()
                        ProgresMax = UBound(aRows) + 1 - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To UBound(aRows)
                            aCols = Split(aRows(i), sColumnsSepar)
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <> 0 Then
                                    If iColPosition <= (UBound(aCols) + 1) Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(aCols(iColPosition - 1))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Modification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                m = iLine
                            Else
                                If i = UBound(aRows) Then
                                    Me.Refresh()
                                    Modification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                    m = iLine
                                End If
                            End If
                        Next i
                    Else
                        ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                    End If
                Catch ex As Exception
                    exceptionTrouve = True
                End Try
            Else
                If Trim(Formatype) = "Longueur Fixe" Then
                    Try
                        If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            NbreTotal = DecFormat
                            ProgressBar1.Value = ProgressBar1.Minimum
                            Datagridaffiche.Rows.Clear()
                            ProgresMax = UBound(aRows) + 1 - DecFormat
                            m = 0
                            infoListe = New List(Of Integer)
                            infoLigne = New List(Of Integer)
                            For i = DecFormat To UBound(aRows)
                                Datagridaffiche.RowCount = iLine + 1 - m
                                For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                    iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), "]") - 1))
                                    iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Next jColD
                                iLine = iLine + 1
                                If i Mod 10 = 0 Then
                                    Me.Refresh()
                                    Modification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                    m = iLine
                                Else
                                    If i = UBound(aRows) Then
                                        Me.Refresh()
                                        Modification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)), FormatQte)
                                        m = iLine
                                    End If
                                End If
                            Next i
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                        exceptionTrouve = True
                    End Try
                End If
            End If
        End If

    End Sub
    Private Sub Modification_Integrer_Ecriture(ByRef IdentifiantPiece As String, ByRef FormatfichierDate As String, ByRef FormatIntegrer As Object, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String, ByRef FormatQteU As Integer)
        Me.Cursor = Cursors.WaitCursor
        BT_integrer.Enabled = False
        If Datagridaffiche.RowCount >= 0 Then
            ProgressBar1.Maximum = ProgresMax
            Try
                For numLigne = 0 To Datagridaffiche.RowCount - 1
                    vidage()
                    NbreTotal = NbreTotal + 1
                    Label5.Refresh()
                    Label5.Text = "Modification des Integrations!"
                    For numColonne = 0 To Datagridaffiche.ColumnCount - 1
                        'Entête Document
                        If Datagridaffiche.Columns.Contains(IdentifiantPiece) = True Then
                            If Strings.Len(Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value)) <= 8 Then
                                EntetePieceInterne = Formatage_Chaine(Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value))
                            Else
                                EntetePieceInterne = Formatage_Chaine(Strings.Left(Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value), 8))
                            End If
                        End If
                        If InStr(IdentifiantCommande, ",") <> 0 Then
                            If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                PieceCommande = Join(Split(Trim(Datagridaffiche.Rows(numLigne).Cells(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)).Value), "'"), "''")
                            End If
                        End If

                        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                            PieceArticle = Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantArticle).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteStatutdocument" Then
                            EnteteStatutdocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "ProvenanceFacture" Then
                            ProvenanceFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiers" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                EnteteCodeTiers = Formatage_Chaine(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                            Else
                                EnteteCodeTiers = Formatage_Chaine(Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17))
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteContact" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 35 Then
                                EnteteContact = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteContact = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 35)
                            End If
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTyPeDocument" Then
                            EnteteTyPeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete1" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete1 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete2" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete2 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete3" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete3 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete4" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete4 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete4 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteBLFacture" Then
                            EnteteBLFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCatégorietarifaire" Then
                            EnteteCatégorietarifaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeAffaire" Then
                            EnteteCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiersPayeur" Then
                            EnteteCodeTiersPayeur = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteColisagedeLivraison" Then
                            EnteteColisagedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCompteGeneral" Then
                            EnteteCompteGeneral = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteConditiondeLivraison" Then
                            EnteteConditiondeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteFraisExpedition" Then
                            EnteteFraisExpedition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "EnteteDateLivraison" Then
                            EnteteDateLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteEcartValorisation" Then
                            EnteteEcartValorisation = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleDepot" Then
                            EnteteIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotEntete" Then
                            IDDepotEntete = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotLigne" Then
                            IDDepotLigne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleExpédition" Then
                            EnteteIntituleExpédition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNatureTransaction" Then
                            EnteteNatureTransaction = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNombredeFacture" Then
                            EnteteNombredeFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNomReprésentant" Then
                            EnteteNomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EntetePrenomReprésentant" Then
                            EntetePrenomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "EntetePlanAnalytique" Then
                            EntetePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                EnteteReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteRegimeDocument" Then
                            EnteteRegimeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTauxescompte" Then
                            EnteteTauxescompte = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'Ligne Document
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeAffaire" Then
                            LigneCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedeLivraison" Then
                            LigneDatedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDesignationArticle" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 69 Then
                                LigneDesignationArticle = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneDesignationArticle = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 69)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneEnumereConditionnement" Then
                            LigneEnumereConditionnement = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneFraisApproche" Then
                            LigneFraisApproche = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneIntituleDepot" Then
                            LigneIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneNomRepresentant" Then
                            LigneNomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePlanAnalytique" Then
                            LignePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsBrut" Then
                            LignePoidsBrut = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsNet" Then
                            LignePoidsNet = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrenomRepresentant" Then
                            LignePrenomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixdeRevientUnitaire" Then
                            LignePrixdeRevientUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaire" Then
                            LignePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaireDevise" Then
                            LignePrixUnitaireDevise = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneValorisé" Then
                            LigneValorisé = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypePrixUnitaire" Then
                            LigneTypePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            LigneQuantite = Trim(Datagridaffiche.Rows(numLigne).Cells("LigneQuantite").Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneQuantiteConditionne" Then
                            LigneQuantiteConditionne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                LigneReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeArticle" Then
                            LigneCodeArticle = Formatage_Article(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneReferenceArticleTiers" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 18 Then
                                LigneReferenceArticleTiers = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReferenceArticleTiers = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 18)
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise1" Then
                            LigneTauxRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise2" Then
                            LigneTauxRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise3" Then
                            LigneTauxRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise1" Then
                            LigneTypeRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise2" Then
                            LigneTypeRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise3" Then
                            LigneTypeRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'RECHERCHE DE L'INTITULE DE L'INFO LIBRE
                        If Trim(FormatIntegrer) = "Longueur Fixe" Then
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{"))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        Else
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "[")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "["))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        End If
                    Next numColonne
                    'Creation Effective du Document Commercial
                    Document = Nothing
                    'If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) Then
                    '    If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQteU, DecimalNomb, DecimalMone)) <> 0 Then
                    If Trim(EnteteTyPeDocument) = "14" Then 'Bon de Retour
                        If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatReprise, Trim(EntetePieceInterne)) = True Then
                            ModificationTouslespiece(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                        Else
                            ExisteLecture = False
                            exceptionTrouve = True
                            ErreurJrn.WriteLine("Le Bon de Retour N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                        End If
                    Else
                        If Trim(EnteteTyPeDocument) = "12" Then 'Commande
                            If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatCommandeConf, Trim(EntetePieceInterne)) = True Then
                                ModificationTouslespiece(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                            Else
                                ExisteLecture = False
                                exceptionTrouve = True
                                ErreurJrn.WriteLine("La Commande N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                            End If
                        Else
                            If Trim(EnteteTyPeDocument) = "13" Then 'Livraison
                                If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatLivraison, Trim(EntetePieceInterne)) = True Then
                                    ModificationTouslespiece(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le Bon livraison N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                                End If
                            Else
                                If Trim(EnteteTyPeDocument) = "16" Then 'Facture
                                    If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatFacture, Trim(EntetePieceInterne)) = True Then
                                        ModificationTouslespiece(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    Else
                                        ExisteLecture = False
                                        exceptionTrouve = True
                                        ErreurJrn.WriteLine("La Facture N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                                    End If
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le type de document ne correspond à aucune de ces valeurs (12:Commande achat,13:Bon reception,16:facture achat)")
                                End If
                            End If
                        End If
                    End If
                    '    End If
                    'End If
                    NbreLigne = NbreLigne + 1
                    ProgressBar1.Value = ProgressBar1.Value + 1
                    Label8.Text = NbreLigne & "/" & ProgresMax
                    Label8.Refresh()
                Next numLigne
            Catch ex As Exception
                ExisteLecture = False
                exceptionTrouve = True
                ErreurJrn.WriteLine("Une erreur s'est produit au moment de la lecture du fichier  : " & Trim(EnteteCodeTiers) & " " & ex.Message)
            End Try
        End If
        Datagridaffiche.Rows.Clear()
        Me.Cursor = Cursors.Default
        BT_integrer.Enabled = True
    End Sub
    Private Sub Modification_Ligne_Article(ByRef CodeArticle As String, ByRef FormatDatefichier As String, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim Tarifsupdate As String = Nothing
        Dim Tarifsupdateperso As String = Nothing
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim OleDocAdapter As OleDbDataAdapter
        Dim OleDocDataset As DataSet
        Dim OleDocDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        Dim PrixUnitDevise As Double = 0
        Dim PrixUnit As Double = 0
        Dim PrixUnitTC As Double = 0
        Dim ValRemise1 As Double = 0
        Dim ValRemise2 As Double = 0
        Dim ValRemise3 As Double = 0
        Dim TypRemise1 As Object = 0
        Dim TypRemise2 As Object = 0
        Dim TypRemise3 As Object = 0
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        For Each LigneDocument In Document.FactoryDocumentLigne.List
            If LigneDocument.Article.AR_Ref = Trim(CodeArticle) Then
                Try
                    With LigneDocument
                        If Datagridaffiche.Columns.Contains("LigneReferenceArticleTiers") = True Then
                            If Trim(LigneReferenceArticleTiers) <> "" Then
                                .AF_RefFourniss = LigneReferenceArticleTiers
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = True Then
                            If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = True Then
                                If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant)) = True Then
                                    .Collaborateur = BaseCpta.FactoryCollaborateur.ReadNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant))
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LignePlanAnalytique") = True Then
                            If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = True Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(LignePlanAnalytique)) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(LignePlanAnalytique))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                        .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(LigneCodeAffaire))
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                                .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                            End If
                                        End If
                                    End If
                                Else
                                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(LignePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                    fournisseurDs = New DataSet
                                    fournisseurAdap.Fill(fournisseurDs)
                                    fournisseurTab = fournisseurDs.Tables(0)
                                    If fournisseurTab.Rows.Count > 0 Then
                                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                                .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(LigneCodeAffaire))
                                            Else
                                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                statistDs = New DataSet
                                                statistAdap.Fill(statistDs)
                                                statistTab = statistDs.Tables(0)
                                                If statistTab.Rows.Count <> 0 Then
                                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                                        .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                                    Else
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneFraisApproche") = True Then
                            If EstNumeric(Trim(LigneFraisApproche), DecimalNomb, DecimalMone) = True Then
                                .DL_Frais = CDbl(RenvoiMontant(Trim(LigneFraisApproche), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        End If

                        If Datagridaffiche.Columns.Contains("LigneDesignationArticle") = True Then
                            If Trim(LigneDesignationArticle) <> "" Then
                                .DL_Design = LigneDesignationArticle
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LignePoidsNet") = True Then
                            If EstNumeric(Trim(LignePoidsNet), DecimalNomb, DecimalMone) = True Then
                                .DL_PoidsNet = CDbl(RenvoiMontant(Trim(LignePoidsNet), FormatQte, DecimalNomb, DecimalMone))
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LignePoidsBrut") = True Then
                            If EstNumeric(Trim(LignePoidsBrut), DecimalNomb, DecimalMone) = True Then
                                .DL_PoidsBrut = CDbl(RenvoiMontant(Trim(LignePoidsBrut), FormatQte, DecimalNomb, DecimalMone))
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneReference") = True Then
                            If Trim(LigneReference) <> "" Then
                                .DO_Ref = Trim(LigneReference)
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneValorisé") = True Then
                            If Trim(LigneValorisé) = "0" Then
                                .Valorisee = False
                            Else
                                .Valorisee = True
                            End If
                        End If
                        Dim QteLigne As Double = .DL_Qte

                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                .DL_Qte = CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                            If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                                .EU_Qte = CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone))
                            End If
                        Else
                            If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                    .EU_Qte = .DL_Qte
                                End If
                            End If
                        End If
                        Dim ExisteCommande As Boolean = False
                        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                            If InStr(IdentifiantCommande, ",") <> 0 Then
                                If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                        If Trim(LigneQuantite) <> "" Then
                                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                Dim OleAdaptaterLe As OleDbDataAdapter
                                                Dim OleLeDataset As DataSet
                                                Dim OledatableLe As DataTable
                                                OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                                OleLeDataset = New DataSet
                                                OleAdaptaterLe.Fill(OleLeDataset)
                                                OledatableLe = OleLeDataset.Tables(0)
                                                If OledatableLe.Rows.Count <> 0 Then
                                                    Dim OleAdaptaterCa As OleDbDataAdapter
                                                    Dim OleCaDataset As DataSet
                                                    Dim OledatableCa As DataTable
                                                    OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                                    OleCaDataset = New DataSet
                                                    OleAdaptaterCa.Fill(OleCaDataset)
                                                    OledatableCa = OleCaDataset.Tables(0)
                                                    If OledatableCa.Rows.Count <> 0 Then
                                                        Try
                                                            OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                            OleDocDataset = New DataSet
                                                            OleDocAdapter.Fill(OleDocDataset)
                                                            OleDocDatable = OleDocDataset.Tables(0)
                                                            If OleDocDatable.Rows.Count = 1 Then
                                                                ExisteCommande = True
                                                                OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Trim(Document.Fournisseur.CT_Num) & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                                OleRecherDataset = New DataSet
                                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                                If OleRechDatable.Rows.Count = 1 Then
                                                                    Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                                    Dim OleCaDataset1 As DataSet
                                                                    Dim OledatableCa1 As DataTable
                                                                    OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                                    OleCaDataset1 = New DataSet
                                                                    OleAdaptaterCa1.Fill(OleCaDataset1)
                                                                    OledatableCa1 = OleCaDataset1.Tables(0)
                                                                    If OledatableCa1.Rows.Count <> 0 Then
                                                                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                                                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                                                                .DL_Qte = QteLigne + CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))
                                                                                .DL_QteBL = QteLigne + CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))
                                                                                If IsNothing(.Article) = False Then
                                                                                    For Each ArtCond As IBOArticleCond3 In .Article.FactoryArticleCond.List
                                                                                        If ArtCond.EC_Enumere = .EU_Enumere Then
                                                                                            If ArtCond.EC_Quantite <> 0 Then
                                                                                                .EU_Qte = (QteLigne + CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) / ArtCond.EC_Quantite
                                                                                            Else
                                                                                                .EU_Qte = .DL_Qte
                                                                                            End If
                                                                                        End If
                                                                                    Next
                                                                                End If
                                                                            End If
                                                                        End If
                                                                        Dim DocumentReliquat As IBODocumentAchat3 = Nothing
                                                                        Dim LigneReliquat As IBODocumentAchatLigne3 = Nothing
                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 10 Then
                                                                        Else
                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommande, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                            Else
                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                Else
                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 13 Then
                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                    Else
                                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                        Else
                                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 15 Then
                                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatAvoir, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                            Else
                                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 16 Then
                                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                Else
                                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 17 Then
                                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFactureCpta, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                    Else
                                                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 18 Then
                                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatArchive, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                        If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) = 0 Then
                                                                            Try
                                                                                Try
                                                                                    If IsNothing(DocumentReliquat) = False Then
                                                                                        For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                            With LigneReliquat
                                                                                                If IsNothing(.Article) = False Then
                                                                                                    If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                        PrixUnitDevise = .DL_PUDevise
                                                                                                        PrixUnitTC = .DL_PUTTC
                                                                                                        PrixUnit = .DL_PrixUnitaire
                                                                                                        ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                        If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                            TypRemise1 = 0
                                                                                                        Else
                                                                                                            If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                TypRemise1 = 1
                                                                                                            Else
                                                                                                                If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                    TypRemise1 = 2
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                        ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                        If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                            TypRemise2 = 0
                                                                                                        Else
                                                                                                            If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                TypRemise2 = 1
                                                                                                            Else
                                                                                                                If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                    TypRemise2 = 2
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                        ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                        If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                            TypRemise3 = 0
                                                                                                        Else
                                                                                                            If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                                TypRemise3 = 1
                                                                                                            Else
                                                                                                                If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                    TypRemise3 = 2
                                                                                                                End If
                                                                                                            End If
                                                                                                        End If
                                                                                                        .Remove()
                                                                                                        .Write()
                                                                                                    End If
                                                                                                End If
                                                                                            End With
                                                                                        Next
                                                                                    End If
                                                                                Catch ex As Exception

                                                                                End Try
                                                                                ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul")
                                                                                If IsNothing(DocumentReliquat) = False Then
                                                                                    If DocumentReliquat.FactoryDocumentLigne.List.Count = 0 Then
                                                                                        Try
                                                                                            DocumentReliquat.Remove()
                                                                                            ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " supprimé !")
                                                                                        Catch ex As Exception
                                                                                            ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Erreur de suppression :" & ex.Message)
                                                                                        End Try
                                                                                    End If
                                                                                End If
                                                                            Catch ex As Exception
                                                                                exceptionTrouve = True
                                                                                ErreurJrn.WriteLine("Erreur de Suppression de l'Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul. Erreur Système :" & ex.Message)
                                                                            End Try
                                                                        Else
                                                                            Try
                                                                                If IsNothing(DocumentReliquat) = False Then
                                                                                    For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                        With LigneReliquat
                                                                                            If IsNothing(.Article) = False Then
                                                                                                If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                    PrixUnitDevise = .DL_PUDevise
                                                                                                    PrixUnitTC = .DL_PUTTC
                                                                                                    PrixUnit = .DL_PrixUnitaire
                                                                                                    ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                    If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                        TypRemise1 = 0
                                                                                                    Else
                                                                                                        If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                            TypRemise1 = 1
                                                                                                        Else
                                                                                                            If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                TypRemise1 = 2
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                    ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                    If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                        TypRemise2 = 0
                                                                                                    Else
                                                                                                        If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                            TypRemise2 = 1
                                                                                                        Else
                                                                                                            If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                TypRemise2 = 2
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                    ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                    If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                        TypRemise3 = 0
                                                                                                    Else
                                                                                                        If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                            TypRemise3 = 1
                                                                                                        Else
                                                                                                            If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                                TypRemise3 = 2
                                                                                                            End If
                                                                                                        End If
                                                                                                    End If
                                                                                                    .DL_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                    .DL_QteBL = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                    If LigneReliquat.Article.FactoryArticleCond.List.Count = 0 Then
                                                                                                        .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                    Else
                                                                                                        For Each ArtCond As IBOArticleCond3 In LigneReliquat.Article.FactoryArticleCond.List
                                                                                                            If ArtCond.EC_Enumere = .EU_Enumere Then
                                                                                                                If ArtCond.EC_Quantite <> 0 Then
                                                                                                                    .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), ".")) / ArtCond.EC_Quantite
                                                                                                                Else
                                                                                                                    .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                                End If
                                                                                                            End If
                                                                                                        Next
                                                                                                    End If
                                                                                                    .Write()
                                                                                                End If
                                                                                            End If
                                                                                        End With
                                                                                    Next
                                                                                End If
                                                                                ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                            Catch ex As Exception
                                                                                exceptionTrouve = True
                                                                                ErreurJrn.WriteLine("Erreur de mise à jour de l'Article Reliquat :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) & " Erreur Système :" & ex.Message)
                                                                            End Try
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        Catch ex As Exception
                                                            exceptionTrouve = False
                                                            ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                                        End Try
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                            If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                                If Trim(LigneTypePrixUnitaire) = "1" Then
                                    If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                        .DL_PUTTC = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                                    End If
                                Else
                                    If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                        .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                                    End If
                                End If
                            Else
                                If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                    .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                                End If
                            End If
                        Else
                            If .DO_Type = DocumentType.DocumentTypeAchatLivraison Then
                                If ExisteCommande = True Then
                                    .DL_PUTTC = PrixUnitTC
                                    .DL_PrixUnitaire = PrixUnit
                                End If
                            Else
                                .DL_PrixUnitaire = PrixUnit
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                            If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                                .DL_PUDevise = CDbl(RenvoiMontant(Trim(LignePrixUnitaireDevise), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        Else
                            If .DO_Type = DocumentType.DocumentTypeAchatLivraison Then
                                If ExisteCommande = True Then
                                    .DL_PUDevise = PrixUnitDevise
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneDatedeLivraison") = True Then
                            If Trim(LigneDatedeLivraison) <> "" Then
                                .DO_DateLivr = RenvoieDateValide(Trim(LigneDatedeLivraison), FormatDatefichier)
                            End If
                        End If
                        Dim ExisteRemise As Boolean = False
                        Dim RemiseDescriptif As Boolean = False
                        If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                            RemiseDescriptif = True
                            If Trim(LigneTauxRemise1) <> "" Then
                                If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone)) = 0 Then
                                        ExisteRemise = True
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                            RemiseDescriptif = True
                            If Trim(LigneTauxRemise2) <> "" Then
                                If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone)) = 0 Then
                                        ExisteRemise = True
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                            RemiseDescriptif = True
                            If Trim(LigneTauxRemise3) <> "" Then
                                If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone)) = 0 Then
                                        ExisteRemise = True
                                    End If
                                End If
                            End If
                        End If

                        If Datagridaffiche.Columns.Contains("LigneTypeRemise1") = True Then
                            If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                                If Trim(LigneTypeRemise1) = "1" Then
                                    If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                        .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                    End If
                                Else
                                    If Trim(LigneTypeRemise1) = "2" Then
                                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                            .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                            .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                        End If
                                    Else
                                        If Trim(LigneTypeRemise1) = "0" Then
                                            If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                                                .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                If RemiseDescriptif = False And ExisteCommande = True Then
                                    If TypRemise1 = 0 Then
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                                    Else
                                        If TypRemise1 = 1 Then
                                            .Remise.Remise(1).REM_Valeur = ValRemise1
                                            .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                        Else
                                            If TypRemise1 = 2 Then
                                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                            Else
                                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                                If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                    .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If RemiseDescriptif = False And ExisteCommande = True Then
                                    If TypRemise1 = 0 Then
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                                    Else
                                        If TypRemise1 = 1 Then
                                            .Remise.Remise(1).REM_Valeur = ValRemise1
                                            .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                        Else
                                            If TypRemise1 = 2 Then
                                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                            Else
                                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneTypeRemise2") = True Then
                            If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                                If Trim(LigneTypeRemise2) = "1" Then
                                    If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                        .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                    End If
                                    If Trim(LigneTypeRemise2) = "2" Then
                                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                            .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                            .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                        End If
                                    Else
                                        If Trim(LigneTypeRemise2) = "0" Then
                                            If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                                                .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                If RemiseDescriptif = False And ExisteCommande = True Then
                                    If TypRemise1 = 0 Then
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                                    Else
                                        If TypRemise1 = 1 Then
                                            .Remise.Remise(2).REM_Valeur = ValRemise2
                                            .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                        Else
                                            If TypRemise1 = 2 Then
                                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                            Else
                                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                                If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                    .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If RemiseDescriptif = False And ExisteCommande = True Then
                                    If TypRemise1 = 0 Then
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                                    Else
                                        If TypRemise1 = 1 Then
                                            .Remise.Remise(2).REM_Valeur = ValRemise2
                                            .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                        Else
                                            If TypRemise1 = 2 Then
                                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                            Else
                                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If

                        If Datagridaffiche.Columns.Contains("LigneTypeRemise3") = True Then
                            If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                                If Trim(LigneTypeRemise3) = "1" Then
                                    If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                        .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                    End If
                                Else
                                    If Trim(LigneTypeRemise3) = "2" Then
                                        If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                            .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                            .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                        End If
                                    Else
                                        If Trim(LigneTypeRemise3) = "0" Then
                                            If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                                                .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                If RemiseDescriptif = False And ExisteCommande = True Then
                                    If TypRemise1 = 0 Then
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                                    Else
                                        If TypRemise1 = 1 Then
                                            .Remise.Remise(3).REM_Valeur = ValRemise3
                                            .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                        Else
                                            If TypRemise1 = 2 Then
                                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                            Else
                                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Else
                            If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                                If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                    .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If RemiseDescriptif = False And ExisteCommande = True Then
                                    If TypRemise1 = 0 Then
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                                    Else
                                        If TypRemise1 = 1 Then
                                            .Remise.Remise(3).REM_Valeur = ValRemise3
                                            .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                        Else
                                            If TypRemise1 = 2 Then
                                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                            Else
                                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If

                        If ExisteRemise = False And RemiseDescriptif = False And ExisteCommande = False Then
                            .SetDefaultRemise()
                        End If
                        .Write()

                        If IsNothing(LigneDocument.Article) = False Then
                            ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Modifié Pour la pièce N° :" & Trim(EntetePieceInterne))
                        Else
                            ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Modifié Pour la pièce N° :" & Trim(EntetePieceInterne))
                        End If
                        'Traitement des Infos Libres
                        Try
                            If infoLigne.Count > 0 Then
                                While infoLigne.Count <> 0
                                    OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoLigne.Item(0)).Name) & "' And InfoLigne=True", OleConnenection)
                                    OleDeleteDataset = New DataSet
                                    OleAdaptaterDelete.Fill(OleDeleteDataset)
                                    OledatableDelete = OleDeleteDataset.Tables(0)
                                    If OledatableDelete.Rows.Count <> 0 Then
                                        'L'info Libre Parametrée par l'utilisateur existe dans Sage
                                        If LigneDocument.InfoLibre.Count <> 0 Then
                                            If IsNothing(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) = False Then
                                                If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                    statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "'", OleSocieteConnect)
                                                    statistDs = New DataSet
                                                    statistAdap.Fill(statistDs)
                                                    statistTab = statistDs.Tables(0)
                                                    If statistTab.Rows.Count <> 0 Then
                                                        'Texte
                                                        If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                            OleRecherDataset = New DataSet
                                                            OleRecherAdapter.Fill(OleRecherDataset)
                                                            OleRechDatable = OleRecherDataset.Tables(0)
                                                            If OleRechDatable.Rows.Count <> 0 Then
                                                                If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                                    LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                                    LigneDocument.Write()
                                                                End If
                                                            Else
                                                                If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then
                                                                    LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)
                                                                    LigneDocument.Write()
                                                                End If
                                                            End If
                                                        End If
                                                        'Table
                                                        If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                            OleRecherDataset = New DataSet
                                                            OleRecherAdapter.Fill(OleRecherDataset)
                                                            OleRechDatable = OleRecherDataset.Tables(0)
                                                            If OleRechDatable.Rows.Count <> 0 Then
                                                                If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                                    LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                                    LigneDocument.Write()
                                                                End If
                                                            Else
                                                                If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then
                                                                    LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)
                                                                    LigneDocument.Write()
                                                                End If
                                                            End If
                                                        End If
                                                        'Montant
                                                        If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                                            If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                                OleRecherDataset = New DataSet
                                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                                If OleRechDatable.Rows.Count <> 0 Then
                                                                    If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                                        LigneDocument.Write()
                                                                    End If
                                                                Else
                                                                    If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                                        LigneDocument.Write()
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                        'Valeur
                                                        If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                                            If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                                OleRecherDataset = New DataSet
                                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                                If OleRechDatable.Rows.Count <> 0 Then
                                                                    If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                                        LigneDocument.Write()
                                                                    End If
                                                                Else
                                                                    If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                                        LigneDocument.Write()
                                                                    End If
                                                                End If
                                                            End If
                                                        End If

                                                        'Date Court
                                                        If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                                            If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                                OleRecherDataset = New DataSet
                                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                                If OleRechDatable.Rows.Count <> 0 Then
                                                                    If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                                        LigneDocument.Write()
                                                                    End If
                                                                Else
                                                                    If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier)
                                                                        LigneDocument.Write()
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                        'Date Longue
                                                        If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                                            If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                                OleRecherDataset = New DataSet
                                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                                If OleRechDatable.Rows.Count <> 0 Then
                                                                    If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                                        LigneDocument.Write()
                                                                    End If
                                                                Else
                                                                    If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                        LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier)
                                                                        LigneDocument.Write()
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        If IsNothing(LigneDocument.Article) = False Then
                                                            ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                        Else
                                                            ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                'nothing
                                            End If
                                        End If
                                    End If
                                    'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                                    infoLigne.RemoveAt(0)
                                End While
                            End If
                        Catch ex As Exception
                            exceptionTrouve = True
                            If IsNothing(LigneDocument.Article) = False Then
                                ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                            Else
                                ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                            End If
                        End Try

                    End With
                Catch ex As Exception
                    exceptionTrouve = True
                    ErreurJrn.WriteLine("Code Article : " & Trim(LigneCodeArticle) & " N°Pièce : " & EntetePieceInterne & " Erreur système de Modification de l'article : " & ex.Message)
                    ListePiece.Add(EntetePieceInterne)
                End Try
            End If
        Next
        'l'article existe dans la base
    End Sub
    Private Sub Modification_Creation_Ligne_Article(ByRef FormatDatefichier As String, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim Tarifsupdate As String = Nothing
        Dim Tarifsupdateperso As String = Nothing
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim OleDocAdapter As OleDbDataAdapter
        Dim OleDocDataset As DataSet
        Dim OleDocDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        Dim PrixUnitDevise As Double = 0
        Dim PrixUnit As Double = 0
        Dim PrixUnitTC As Double = 0
        Dim ValRemise1 As Double = 0
        Dim ValRemise2 As Double = 0
        Dim ValRemise3 As Double = 0
        Dim TypRemise1 As Object = 0
        Dim TypRemise2 As Object = 0
        Dim TypRemise3 As Object = 0
        Dim DateCmde As Date
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        Try
            LigneDocument = Document.FactoryDocumentLigne.Create
            With LigneDocument
                If Datagridaffiche.Columns.Contains("LigneReferenceArticleTiers") = True Then
                    If Trim(LigneReferenceArticleTiers) <> "" Then
                        .AF_RefFourniss = LigneReferenceArticleTiers
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = True Then
                    If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = True Then
                        If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant)) = True Then
                            .Collaborateur = BaseCpta.FactoryCollaborateur.ReadNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant))
                        End If
                    End If
                End If                
                If Datagridaffiche.Columns.Contains("LignePlanAnalytique") = True Then
                    If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = True Then
                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(LignePlanAnalytique)) = True Then
                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(LignePlanAnalytique))
                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(LigneCodeAffaire))
                            Else
                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                        .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                    End If
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(LignePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                        .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(LigneCodeAffaire))
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                                .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneIntituleDepot") = True Then
                    If BaseCial.FactoryDepot.ExistIntitule(Trim(LigneIntituleDepot)) = True Then
                        .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(LigneIntituleDepot))
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(LigneIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("IDDepotLigne") = True Then
                    If IsNumeric(Trim(IDDepotLigne)) = True Then
                        statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotLigne)) & "'", OleSocieteConnect)
                        statistDs = New DataSet
                        statistAdap.Fill(statistDs)
                        statistTab = statistDs.Tables(0)
                        If statistTab.Rows.Count <> 0 Then
                            .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotLigne), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <> 0 Then
                                        .Depot = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneFraisApproche") = True Then
                    If EstNumeric(Trim(LigneFraisApproche), DecimalNomb, DecimalMone) = True Then
                        .DL_Frais = CDbl(RenvoiMontant(Trim(LigneFraisApproche), FormatMnt, DecimalNomb, DecimalMone))
                    End If
                End If

                If Datagridaffiche.Columns.Contains("LigneDesignationArticle") = True Then
                    If Trim(LigneDesignationArticle) <> "" Then
                        .DL_Design = LigneDesignationArticle
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePoidsNet") = True Then
                    If EstNumeric(Trim(LignePoidsNet), DecimalNomb, DecimalMone) = True Then
                        .DL_PoidsNet = CDbl(RenvoiMontant(Trim(LignePoidsNet), FormatQte, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePoidsBrut") = True Then
                    If EstNumeric(Trim(LignePoidsBrut), DecimalNomb, DecimalMone) = True Then
                        .DL_PoidsBrut = CDbl(RenvoiMontant(Trim(LignePoidsBrut), FormatQte, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixdeRevientUnitaire") = True Then
                    If EstNumeric(Trim(LignePrixdeRevientUnitaire), DecimalNomb, DecimalMone) = True Then
                        .DL_PrixRU = CDbl(RenvoiMontant(Trim(LignePrixdeRevientUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneReference") = True Then
                    If Trim(LigneReference) <> "" Then
                        .DO_Ref = Trim(LigneReference)
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneValorisé") = True Then
                    If Trim(LigneValorisé) = "0" Then
                        .Valorisee = False
                    Else
                        .Valorisee = True
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneEnumereConditionnement") = True Then
                    If Trim(LigneEnumereConditionnement) <> "" Then
                        .EU_Enumere = Trim(LigneEnumereConditionnement)
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                    If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                        .EU_Qte = CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone))
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(Document.Fournisseur.CT_Num)) = True Then
                        If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                .SetDefaultArticle(BaseCial.FactoryArticle.ReadReference(Trim(LigneCodeArticle)), CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)))
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(Document.Fournisseur.CT_Num), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count <> 0 Then
                                If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                        .SetDefaultArticle(BaseCial.FactoryArticle.ReadReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))), CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)))
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                Dim ExisteCommande As Boolean = False
                Dim EstPieceCommande As Object = Nothing
                Dim EstDL_NoRef As Object = Nothing
                If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                    If InStr(IdentifiantCommande, ",") <> 0 Then
                        If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                            If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                                If Trim(LigneQuantite) <> "" Then
                                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                        Dim OleAdaptaterLe As OleDbDataAdapter
                                        Dim OleLeDataset As DataSet
                                        Dim OledatableLe As DataTable
                                        OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                        OleLeDataset = New DataSet
                                        OleAdaptaterLe.Fill(OleLeDataset)
                                        OledatableLe = OleLeDataset.Tables(0)
                                        If OledatableLe.Rows.Count <> 0 Then
                                            Dim OleAdaptaterCa As OleDbDataAdapter
                                            Dim OleCaDataset As DataSet
                                            Dim OledatableCa As DataTable
                                            OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                            OleCaDataset = New DataSet
                                            OleAdaptaterCa.Fill(OleCaDataset)
                                            OledatableCa = OleCaDataset.Tables(0)
                                            If OledatableCa.Rows.Count <> 0 Then
                                                Try
                                                    OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "' And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                    OleDocDataset = New DataSet
                                                    OleDocAdapter.Fill(OleDocDataset)
                                                    OleDocDatable = OleDocDataset.Tables(0)
                                                    If OleDocDatable.Rows.Count = 1 Then
                                                        ExisteCommande = True
                                                        DateCmde = OleDocDatable.Rows(0).Item("DO_Date")
                                                        EstPieceCommande = Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''")
                                                        OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Trim(Document.Fournisseur.CT_Num) & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count = 1 Then
                                                            Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                            Dim OleCaDataset1 As DataSet
                                                            Dim OledatableCa1 As DataTable
                                                            OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                            OleCaDataset1 = New DataSet
                                                            OleAdaptaterCa1.Fill(OleCaDataset1)
                                                            OledatableCa1 = OleCaDataset1.Tables(0)
                                                            If OledatableCa1.Rows.Count <> 0 Then
                                                                EstDL_NoRef = OleRechDatable.Rows(0).Item("DL_NoRef")
                                                                Dim DocumentReliquat As IBODocumentAchat3 = Nothing
                                                                Dim LigneReliquat As IBODocumentAchatLigne3 = Nothing
                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 10 Then
                                                                Else
                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommande, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                    Else
                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                        Else
                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 13 Then
                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                            Else
                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                Else
                                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 15 Then
                                                                                        DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatAvoir, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                    Else
                                                                                        If OleRechDatable.Rows(0).Item("DO_Type") = 16 Then
                                                                                            DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                        Else
                                                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 17 Then
                                                                                                DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFactureCpta, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                            Else
                                                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 18 Then
                                                                                                    DocumentReliquat = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatArchive, OleRechDatable.Rows(0).Item("DO_Piece"))
                                                                                                End If
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                        End If
                                                                    End If
                                                                End If
                                                                If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) = 0 Then
                                                                    Try
                                                                        Try
                                                                            If IsNothing(DocumentReliquat) = False Then
                                                                                For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                    With LigneReliquat
                                                                                        If IsNothing(.Article) = False Then
                                                                                            If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                                PrixUnitTC = .DL_PUTTC
                                                                                                PrixUnitDevise = .DL_PUDevise
                                                                                                PrixUnit = .DL_PrixUnitaire
                                                                                                ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                                If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                    TypRemise1 = 0
                                                                                                Else
                                                                                                    If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                        TypRemise1 = 1
                                                                                                    Else
                                                                                                        If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                            TypRemise1 = 2
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                                ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                                If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                    TypRemise2 = 0
                                                                                                Else
                                                                                                    If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                        TypRemise2 = 1
                                                                                                    Else
                                                                                                        If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                            TypRemise2 = 2
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                                ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                                If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                    TypRemise3 = 0
                                                                                                Else
                                                                                                    If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                        TypRemise3 = 1
                                                                                                    Else
                                                                                                        If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                            TypRemise3 = 2
                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                                                                                                .Remove()
                                                                                                .Write()
                                                                                            End If
                                                                                        End If
                                                                                    End With
                                                                                Next
                                                                            End If
                                                                        Catch ex As Exception

                                                                        End Try
                                                                        ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul")
                                                                        If IsNothing(DocumentReliquat) = False Then
                                                                            If DocumentReliquat.FactoryDocumentLigne.List.Count = 0 Then
                                                                                Try
                                                                                    DocumentReliquat.Remove()
                                                                                    ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " supprimé !")
                                                                                Catch ex As Exception
                                                                                    ErreurJrn.WriteLine("Document Reliquat N°Pièce Sage :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Erreur de suppression :" & ex.Message)
                                                                                End Try
                                                                            End If
                                                                        End If
                                                                    Catch ex As Exception
                                                                        exceptionTrouve = True
                                                                        ErreurJrn.WriteLine("Erreur de Suppression de l'Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " Supprimé ! N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " Le reliquat est nul. Erreur Système :" & ex.Message)
                                                                    End Try
                                                                Else
                                                                    Try
                                                                        If IsNothing(DocumentReliquat) = False Then
                                                                            For Each LigneReliquat In DocumentReliquat.FactoryDocumentLigne.List
                                                                                With LigneReliquat
                                                                                    If IsNothing(.Article) = False Then
                                                                                        If Trim(OleRechDatable.Rows(0).Item("AR_Ref")) = Trim(.Article.AR_Ref) And LigneReliquat.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(OleRechDatable.Rows(0).Item("" & IdentifiantArticle & "")) Then
                                                                                            PrixUnitTC = .DL_PUTTC
                                                                                            PrixUnitDevise = .DL_PUDevise
                                                                                            PrixUnit = .DL_PrixUnitaire
                                                                                            ValRemise1 = .Remise.Remise(1).REM_Valeur
                                                                                            If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                TypRemise1 = 0
                                                                                            Else
                                                                                                If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                    TypRemise1 = 1
                                                                                                Else
                                                                                                    If .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                        TypRemise1 = 2
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                            ValRemise2 = .Remise.Remise(2).REM_Valeur
                                                                                            If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                TypRemise2 = 0
                                                                                            Else
                                                                                                If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                    TypRemise2 = 1
                                                                                                Else
                                                                                                    If .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                        TypRemise2 = 2
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                            ValRemise3 = .Remise.Remise(3).REM_Valeur
                                                                                            If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant Then
                                                                                                TypRemise3 = 0
                                                                                            Else
                                                                                                If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent Then
                                                                                                    TypRemise3 = 1
                                                                                                Else
                                                                                                    If .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite Then
                                                                                                        TypRemise3 = 2
                                                                                                    End If
                                                                                                End If
                                                                                            End If
                                                                                            .DL_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                            .DL_QteBL = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                            If LigneReliquat.Article.FactoryArticleCond.List.Count = 0 Then
                                                                                                .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                            Else
                                                                                                For Each ArtCond As IBOArticleCond3 In LigneReliquat.Article.FactoryArticleCond.List
                                                                                                    If ArtCond.EC_Enumere = .EU_Enumere Then
                                                                                                        If ArtCond.EC_Quantite <> 0 Then
                                                                                                            .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), ".")) / ArtCond.EC_Quantite
                                                                                                        Else
                                                                                                            .EU_Qte = CDbl(Join(Split((OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))), ","), "."))
                                                                                                        End If
                                                                                                    End If
                                                                                                Next
                                                                                            End If
                                                                                            .Write()
                                                                                        End If
                                                                                    End If
                                                                                End With
                                                                            Next
                                                                        End If
                                                                        ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                    Catch ex As Exception
                                                                        exceptionTrouve = True
                                                                        ErreurJrn.WriteLine("Erreur de mise à jour de l'Article Reliquat :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & " mise à jour ! Le reliquat est :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) & " Erreur Système :" & ex.Message)
                                                                    End Try
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                Catch ex As Exception
                                                    exceptionTrouve = False
                                                    ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                                End Try
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                        If Trim(LigneTypePrixUnitaire) = "1" Then
                            If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                .DL_PUTTC = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        Else
                            If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                                .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                            End If
                        End If
                    Else
                        If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                            .DL_PrixUnitaire = CDbl(RenvoiMontant(Trim(LignePrixUnitaire), FormatMnt, DecimalNomb, DecimalMone))
                        End If
                    End If
                Else
                    If .DO_Type = DocumentType.DocumentTypeAchatLivraison Then
                        If ExisteCommande = True Then
                            .DL_PUTTC = PrixUnitTC
                            .DL_PrixUnitaire = PrixUnit
                        End If
                    Else
                        .DL_PrixUnitaire = PrixUnit
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                    If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                        .DL_PUDevise = CDbl(RenvoiMontant(Trim(LignePrixUnitaireDevise), FormatMnt, DecimalNomb, DecimalMone))
                    End If
                Else
                    If .DO_Type = DocumentType.DocumentTypeAchatLivraison Then
                        If ExisteCommande = True Then
                            .DL_PUDevise = PrixUnitDevise
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneDatedeLivraison") = True Then
                    If Trim(LigneDatedeLivraison) <> "" Then
                        .DO_DateLivr = RenvoieDateValide(Trim(LigneDatedeLivraison), FormatDatefichier)
                    End If
                End If
                Dim ExisteRemise As Boolean = False
                Dim RemiseDescriptif As Boolean = False
                If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                    RemiseDescriptif = True
                    If Trim(LigneTauxRemise1) <> "" Then
                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone)) = 0 Then
                                ExisteRemise = True
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                    RemiseDescriptif = True
                    If Trim(LigneTauxRemise2) <> "" Then
                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone)) = 0 Then
                                ExisteRemise = True
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                    RemiseDescriptif = True
                    If Trim(LigneTauxRemise3) <> "" Then
                        If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                            If CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone)) <> 0 Or CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone)) = 0 Then
                                ExisteRemise = True
                            End If
                        End If
                    End If
                End If

                If Datagridaffiche.Columns.Contains("LigneTypeRemise1") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                        If Trim(LigneTypeRemise1) = "1" Then
                            If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                            End If
                        Else
                            If Trim(LigneTypeRemise1) = "2" Then
                                If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                    .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If Trim(LigneTypeRemise1) = "0" Then
                                    If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                                        .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(1).REM_Valeur = ValRemise1
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                            .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                            .Remise.Remise(1).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone))
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(1).REM_Valeur = ValRemise1
                                .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(1).REM_Valeur = ValRemise1
                                    .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(1).REM_Valeur = ValRemise1
                                        .Remise.Remise(1).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTypeRemise2") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                        If Trim(LigneTypeRemise2) = "1" Then
                            If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                            End If
                            If Trim(LigneTypeRemise2) = "2" Then
                                If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                    .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If Trim(LigneTypeRemise2) = "0" Then
                                    If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                                        .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(2).REM_Valeur = ValRemise2
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                            .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                            .Remise.Remise(2).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone))
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(2).REM_Valeur = ValRemise2
                                .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(2).REM_Valeur = ValRemise2
                                    .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(2).REM_Valeur = ValRemise2
                                        .Remise.Remise(2).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If Datagridaffiche.Columns.Contains("LigneTypeRemise3") = True Then
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                        If Trim(LigneTypeRemise3) = "1" Then
                            If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                            End If
                        Else
                            If Trim(LigneTypeRemise3) = "2" Then
                                If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                    .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                End If
                            Else
                                If Trim(LigneTypeRemise3) = "0" Then
                                    If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                                        .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(3).REM_Valeur = ValRemise3
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                Else
                    If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                        If EstNumeric(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone) = True Then
                            .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                            .Remise.Remise(3).REM_Valeur = CDbl(RenvoiTaux(Trim(LigneTauxRemise3), DecimalNomb, DecimalMone))
                        End If
                    Else
                        If RemiseDescriptif = False And ExisteCommande = True Then
                            If TypRemise1 = 0 Then
                                .Remise.Remise(3).REM_Valeur = ValRemise3
                                .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeMontant
                            Else
                                If TypRemise1 = 1 Then
                                    .Remise.Remise(3).REM_Valeur = ValRemise3
                                    .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                Else
                                    If TypRemise1 = 2 Then
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypeUnite
                                    Else
                                        .Remise.Remise(3).REM_Valeur = ValRemise3
                                        .Remise.Remise(3).REM_Type = RemiseType.RemiseTypePourcent
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If

                If ExisteRemise = False And RemiseDescriptif = False And ExisteCommande = False Then
                    .SetDefaultRemise()
                End If
                .Write()
                If ExisteCommande = True Then
                    If Trim(EstPieceCommande) <> "" Then
                        ListeReliquat.Add(Trim(EstPieceCommande) & ControlChars.Tab & EstDL_NoRef & ControlChars.Tab & .Document.DO_Piece & ControlChars.Tab & Join(Split(LigneDocument.DL_Qte, ","), "."))
                    End If
                End If
                If IsNothing(LigneDocument.Article) = False Then
                    ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                Else
                    ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Créé Pour la pièce N° :" & Trim(EntetePieceInterne))
                End If
                Try
                    statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & IdentifiantArticle & "'", OleSocieteConnect)
                    statistDs = New DataSet
                    statistAdap.Fill(statistDs)
                    statistTab = statistDs.Tables(0)
                    If statistTab.Rows.Count <> 0 Then
                        'Texte
                        If statistTab.Rows(0).Item("CB_Type") = 9 Then
                            LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(PieceArticle)
                            LigneDocument.Write()
                        End If
                        'Table
                        If statistTab.Rows(0).Item("CB_Type") = 22 Then
                            LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = Trim(PieceArticle)
                            LigneDocument.Write()
                        End If
                        'Montant
                        If statistTab.Rows(0).Item("CB_Type") = 20 Then
                            If EstNumeric(Trim(PieceArticle), DecimalNomb, DecimalMone) = True Then
                                LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = CDbl(RenvoiTaux(Trim(PieceArticle), DecimalNomb, DecimalMone))
                                LigneDocument.Write()
                            End If
                        End If
                        'Valeur
                        If statistTab.Rows(0).Item("CB_Type") = 7 Then
                            If EstNumeric(Trim(PieceArticle), DecimalNomb, DecimalMone) = True Then
                                LigneDocument.InfoLibre.Item("" & IdentifiantArticle & "") = CDbl(RenvoiTaux(Trim(PieceArticle), DecimalNomb, DecimalMone))
                                LigneDocument.Write()
                            End If
                        End If
                    End If
                Catch ex As Exception

                End Try
                'Traitement des Infos Libres
                Try
                    If infoLigne.Count > 0 Then
                        While infoLigne.Count <> 0
                            OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoLigne.Item(0)).Name) & "' And InfoLigne=True", OleConnenection)
                            OleDeleteDataset = New DataSet
                            OleAdaptaterDelete.Fill(OleDeleteDataset)
                            OledatableDelete = OleDeleteDataset.Tables(0)
                            If OledatableDelete.Rows.Count <> 0 Then
                                'L'info Libre Parametrée par l'utilisateur existe dans Sage
                                If LigneDocument.InfoLibre.Count <> 0 Then
                                    If IsNothing(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) = False Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "'", OleSocieteConnect)
                                            statistDs = New DataSet
                                            statistAdap.Fill(statistDs)
                                            statistTab = statistDs.Tables(0)
                                            If statistTab.Rows.Count <> 0 Then
                                                'Texte
                                                If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                            LigneDocument.Write()
                                                        End If
                                                    Else
                                                        If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)
                                                            LigneDocument.Write()
                                                        End If
                                                    End If
                                                End If
                                                'Table
                                                If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                            LigneDocument.Write()
                                                        End If
                                                    Else
                                                        If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then
                                                            LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)
                                                            LigneDocument.Write()
                                                        End If
                                                    End If
                                                End If
                                                'Montant
                                                If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                                'Valeur
                                                If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If

                                                'Date Court
                                                If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                                'Date Longue
                                                If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                                    If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                                        OleRecherDataset = New DataSet
                                                        OleRecherAdapter.Fill(OleRecherDataset)
                                                        OleRechDatable = OleRecherDataset.Tables(0)
                                                        If OleRechDatable.Rows.Count <> 0 Then
                                                            If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        Else
                                                            If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                                LigneDocument.InfoLibre.Item("" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier)
                                                                LigneDocument.Write()
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                If IsNothing(LigneDocument.Article) = False Then
                                                    ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                Else
                                                    ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                End If
                                            End If
                                        End If
                                    Else
                                        'nothing
                                    End If
                                End If
                            End If
                            'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                            infoLigne.RemoveAt(0)
                        End While
                    End If
                Catch ex As Exception
                    exceptionTrouve = True
                    If IsNothing(LigneDocument.Article) = False Then
                        ErreurJrn.WriteLine("Code Article : " & Trim(LigneDocument.Article.AR_Ref) & " Erreur de Création de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                    Else
                        ErreurJrn.WriteLine("Code Article : " & Trim("Vide") & " Erreur de Création de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                    End If
                End Try

            End With
        Catch ex As Exception
            exceptionTrouve = True
            ErreurJrn.WriteLine("Code Article : " & Trim(LigneCodeArticle) & " N°Pièce : " & EntetePieceInterne & " Erreur système de Création de l'article : " & ex.Message)
            ListePiece.Add(EntetePieceInterne)
        End Try
        Try
            If ListeReliquat.Count <> 0 Then
                Dim OleComDeletAna As OleDbCommand
                Dim DeleteEcriture As String
                For i As Integer = 0 To ListeReliquat.Count - 1
                    Dim ListeBL() As String = Split(ListeReliquat.Item(i), ControlChars.Tab)
                    If Trim(ListeBL(0)) <> "" Then
                        If Trim(ListeBL(1)) <> "" Then
                            Try
                                DeleteEcriture = "SET ARITHABORT ON"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                DeleteEcriture = "UPDATE  F_DOCLIGNE SET DL_PieceBC='" & Trim(ListeBL(0)) & "', DL_NoRef=" & Trim(ListeBL(1)) & "  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(PieceArticle), ","), ".") & "' And DO_Type=13"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                DeleteEcriture = "SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                            Catch ex As Exception
                            End Try
                        Else
                            Try
                                DeleteEcriture = "SET ARITHABORT ON"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                DeleteEcriture = "UPDATE  F_DOCLIGNE SET DL_PieceBC='" & Trim(ListeBL(0)) & "'  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(PieceArticle), ","), ".") & "' And DO_Type=13"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                DeleteEcriture = "SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                            Catch ex As Exception
                            End Try
                        End If
                        If IsDate(DateCmde) = True Then
                            Try
                                DeleteEcriture = "SET ARITHABORT ON"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                DeleteEcriture = "UPDATE  F_DOCLIGNE SET DL_DateBC=CONVERT(DATETIME, '" & Strings.Format(DateCmde, "yyyy-MM-dd") & "', 102)  WHERE DO_Piece='" & Trim(ListeBL(2)) & "' And  " & IdentifiantArticle & " ='" & Join(Split(Trim(PieceArticle), ","), ".") & "' And DO_Type=13"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                                DeleteEcriture = "SET ARITHABORT OFF"
                                OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                OleComDeletAna.Connection = OleSocieteConnect
                                OleComDeletAna.ExecuteNonQuery()
                            Catch ex As Exception
                            End Try
                        End If
                    End If
                Next i
            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub Modification_Entete_Document(ByRef typedoc As String, ByRef FormatDatefichier As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        ListeReliquat = New List(Of String)
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        With Document
            If Datagridaffiche.Columns.Contains("EnteteStatutdocument") = True Then
                If Trim(EnteteStatutdocument) = "0" Then
                    .DO_Statut = DocumentStatutType.DocumentStatutTypeSaisie
                Else
                    If Trim(EnteteStatutdocument) = "1" Then
                        .DO_Statut = DocumentStatutType.DocumentStatutTypeConfirme
                    Else
                        If Trim(EnteteStatutdocument) = "2" Then
                            .DO_Statut = DocumentStatutType.DocumentStatutTypeAPrepare
                        Else
                            .DO_Statut = DocumentStatutType.DocumentStatutTypeAPrepare
                        End If
                    End If
                End If
            Else
                .DO_Statut = DocumentStatutType.DocumentStatutTypeAPrepare
            End If
            If Datagridaffiche.Columns.Contains("EntetePlanAnalytique") = True Then
                If Datagridaffiche.Columns.Contains("EnteteCodeAffaire") = True Then
                    If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(EntetePlanAnalytique)) = True Then
                        PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(EntetePlanAnalytique))
                        If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                            .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(EnteteCodeAffaire))
                        Else
                            statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then
                                If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                    .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                End If
                            End If
                        End If
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(EntetePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                                    .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(EnteteCodeAffaire))
                                Else
                                    statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <> 0 Then
                                        If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then
                                            .CompteA = BaseCpta.FactoryCompteA.ReadNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond")))
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteCompteGeneral") = True Then
                If BaseCpta.FactoryCompteG.ExistNumero(Trim(EnteteCompteGeneral)) = True Then
                    .CompteG = BaseCpta.FactoryCompteG.ReadNumero(Trim(EnteteCompteGeneral))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Compte General>' and Valeurlue ='" & Join(Split(Trim(EnteteCompteGeneral), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCpta.FactoryCompteG.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .CompteG = BaseCpta.FactoryCompteG.ReadNumero(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteConditiondeLivraison") = True Then
                If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(EnteteConditiondeLivraison)) = True Then
                    .ConditionLivraison = BaseCial.FactoryConditionLivraison.ReadIntitule(Trim(EnteteConditiondeLivraison))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition de Livraison>' and Valeurlue ='" & Join(Split(Trim(EnteteConditiondeLivraison), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .ConditionLivraison = BaseCial.FactoryConditionLivraison.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteIntituleDepot") = True Then
                If BaseCial.FactoryDepot.ExistIntitule(Trim(EnteteIntituleDepot)) = True Then
                    .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(EnteteIntituleDepot))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("IDDepotEntete") = True Then
                If IsNumeric(Trim(IDDepotEntete)) = True Then
                    statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotEntete)) & "'", OleSocieteConnect)
                    statistDs = New DataSet
                    statistAdap.Fill(statistDs)
                    statistTab = statistDs.Tables(0)
                    If statistTab.Rows.Count <> 0 Then
                        .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotEntete), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count > 0 Then
                            If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    .DepotStockage = BaseCial.FactoryDepot.ReadIntitule(Trim(statistTab.Rows(0).Item("DE_Intitule")))
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteFraisExpedition") = True Then
                If EstNumeric(Trim(EnteteFraisExpedition), DecimalNomb, DecimalMone) = True Then
                    .FraisExpedition = CDbl(RenvoiMontant(Trim(EnteteFraisExpedition), FormatMnt, DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteContact") = True Then
                If Trim(EnteteContact) <> "" Then
                    .DO_Contact = EnteteContact
                End If
            End If
            If Datagridaffiche.Columns.Contains("Entete1") = True Then
                If Trim(Entete1) <> "" Then
                    .DO_Coord(1) = Entete1
                End If
            End If
            If Datagridaffiche.Columns.Contains("Entete2") = True Then
                If Trim(Entete2) <> "" Then
                    .DO_Coord(2) = Entete2
                End If
            End If
            If Datagridaffiche.Columns.Contains("Entete3") = True Then
                If Trim(Entete3) <> "" Then
                    .DO_Coord(3) = Entete3
                End If
            End If
            If Datagridaffiche.Columns.Contains("Entete4") = True Then
                If Trim(Entete4) <> "" Then
                    .DO_Coord(4) = Entete4
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteDateLivraison") = True Then
                If Trim(EnteteDateLivraison) <> "" Then
                    .DO_DateLivr = RenvoieDateValide(Trim(EnteteDateLivraison), FormatDatefichier)
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteEcartValorisation") = True Then
                If EstNumeric(Trim(EnteteEcartValorisation), DecimalNomb, DecimalMone) = True Then
                    .DO_Ecart = CDbl(RenvoiTaux(Trim(EnteteEcartValorisation), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteLangue") = True Then
                If Trim(EnteteLangue) = "0" Then
                    .DO_Langue = LangueType.LangueTypeAucune
                Else
                    If Trim(EnteteLangue) = "1" Then
                        .DO_Langue = LangueType.LangueTypeLangue1
                    Else
                        If Trim(EnteteLangue) = "2" Then
                            .DO_Langue = LangueType.LangueTypeLangue2
                        End If
                    End If
                End If
            End If


            If Datagridaffiche.Columns.Contains("EnteteRegimeDocument") = True Then
                If EstNumeric(Trim(EnteteRegimeDocument), DecimalNomb, DecimalMone) = True Then
                    .DO_Regime = CInt(RenvoiTaux(Trim(EnteteRegimeDocument), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteNatureTransaction") = True Then
                If EstNumeric(Trim(EnteteNatureTransaction), DecimalNomb, DecimalMone) = True Then
                    .DO_Transaction = CInt(RenvoiTaux(Trim(EnteteNatureTransaction), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteTauxescompte") = True Then
                If EstNumeric(Trim(EnteteTauxescompte), DecimalNomb, DecimalMone) = True Then
                    .DO_TxEscompte = CInt(RenvoiTaux(Trim(EnteteTauxescompte), DecimalNomb, DecimalMone))
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = True Then
                If BaseCial.FactoryExpedition.ExistIntitule(Trim(EnteteIntituleExpédition)) = True Then
                    .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(EnteteIntituleExpédition))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition Expedition>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleExpédition), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCial.FactoryExpedition.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteNomReprésentant") = True Then
                If Datagridaffiche.Columns.Contains("EntetePrenomReprésentant") = True Then
                    If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(EnteteNomReprésentant), Trim(EntetePrenomReprésentant)) = True Then
                        .Collaborateur = BaseCpta.FactoryCollaborateur.ReadNomPrenom(Trim(EnteteNomReprésentant), Trim(EntetePrenomReprésentant))
                    End If
                End If
            End If
            If Datagridaffiche.Columns.Contains("EnteteCodeTiersPayeur") = True Then
                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiersPayeur)) = True Then
                    .TiersPayeur = BaseCpta.FactoryFournisseur.ReadNumero(Trim(EnteteCodeTiersPayeur))
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiersPayeur), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .TiersPayeur = BaseCpta.FactoryFournisseur.ReadNumero(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                        End If
                    End If
                End If
            End If

            If Datagridaffiche.Columns.Contains("EnteteReference") = True Then
                If Trim(EnteteReference) <> "" Then
                    .DO_Ref = EnteteReference
                End If
            End If
            .Write()
            If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = True Then
                If BaseCial.FactoryExpedition.ExistIntitule(Trim(EnteteIntituleExpédition)) = True Then
                    .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(EnteteIntituleExpédition))
                    .Write()
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition Expedition>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleExpédition), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCial.FactoryExpedition.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            .Expedition = BaseCial.FactoryExpedition.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                            .Write()
                        End If
                    End If
                End If
            End If
            ErreurJrn.WriteLine("-----------------------------------------------------------------------------------------------------")
            ErreurJrn.WriteLine("")
            If typedoc = "14" Then
                ErreurJrn.WriteLine("Bon de Retour N° : " & Trim(Document.DO_Piece) & " Modifié Pour la pièce N° :" & Trim(EntetePieceInterne))
            Else
                If typedoc = "12" Then
                    ErreurJrn.WriteLine("Commande N° : " & Trim(Document.DO_Piece) & " Modifié Pour la pièce N° :" & Trim(EntetePieceInterne))
                Else
                    If typedoc = "13" Then
                        ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(Document.DO_Piece) & " Modifié Pour la pièce N° :" & Trim(EntetePieceInterne))
                    Else
                        If typedoc = "16" Then
                            ErreurJrn.WriteLine("Facture Achat N° : " & Trim(Document.DO_Piece) & " Modifié Pour la pièce N° :" & Trim(EntetePieceInterne))
                        End If
                    End If
                End If
            End If
            'Traitement des Infos Libres
            Try
                If infoListe.Count > 0 Then
                    While infoListe.Count <> 0
                        OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoListe.Item(0)).Name) & "' And Libre=True", OleConnenection)
                        OleDeleteDataset = New DataSet
                        OleAdaptaterDelete.Fill(OleDeleteDataset)
                        OledatableDelete = OleDeleteDataset.Tables(0)
                        If OledatableDelete.Rows.Count <> 0 Then
                            'L'info Libre Parametrée par l'utilisateur existe dans Sage
                            If Document.InfoLibre.Count <> 0 Then
                                If IsNothing(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) = False Then
                                    If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                        statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCENTETE' and CB_Name ='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "'", OleSocieteConnect)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            'Texte
                                            If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                OleRecherDataset = New DataSet
                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                If OleRechDatable.Rows.Count <> 0 Then
                                                    If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                        Document.Write()
                                                    End If
                                                Else
                                                    If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)
                                                        Document.Write()
                                                    End If
                                                End If
                                            End If
                                            'Table
                                            If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                                OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                OleRecherDataset = New DataSet
                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                If OleRechDatable.Rows.Count <> 0 Then
                                                    If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(OleRechDatable.Rows(0).Item("Correspond"))
                                                        Document.Write()
                                                    End If
                                                Else
                                                    If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then
                                                        Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)
                                                        Document.Write()
                                                    End If
                                                End If
                                            End If
                                            'Montant
                                            If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            'Valeur
                                            If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = CDbl(RenvoiTaux(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone))
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If

                                            'Date Court
                                            If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            'Date Longue
                                            If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                                If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                                    OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                                    OleRecherDataset = New DataSet
                                                    OleRecherAdapter.Fill(OleRecherDataset)
                                                    OleRechDatable = OleRecherDataset.Tables(0)
                                                    If OleRechDatable.Rows.Count <> 0 Then
                                                        If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    Else
                                                        If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                            Document.InfoLibre.Item("" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "") = RenvoieDateValide(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier)
                                                            Document.Write()
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        Else
                                            If typedoc = "14" Then
                                                ErreurJrn.WriteLine("Bon de Retour N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre de type Date Longue :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  De  valeur entrée '" & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " dans Sage")
                                            Else
                                                If typedoc = "12" Then
                                                    ErreurJrn.WriteLine("Commande N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre de type Date Longue :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  De  valeur entrée '" & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " dans Sage")
                                                Else
                                                    If typedoc = "13" Then
                                                        ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre de type Date Longue :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  De  valeur entrée '" & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " dans Sage")
                                                    Else
                                                        If typedoc = "16" Then
                                                            ErreurJrn.WriteLine("Facture Achat N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre de type Date Longue :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  De  valeur entrée '" & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " dans Sage")
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            If typedoc = "14" Then
                                                ErreurJrn.WriteLine("Bon de Retour N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                            Else
                                                If typedoc = "12" Then
                                                    ErreurJrn.WriteLine("Commande N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                Else
                                                    If typedoc = "13" Then
                                                        ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                    Else
                                                        If typedoc = "16" Then
                                                            ErreurJrn.WriteLine("Facture Vente N° : " & Trim(Document.DO_Piece) & " Impossible de traiter l'information libre :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                                        End If
                                                    End If
                                                End If
                                            End If

                                        End If
                                    End If
                                Else
                                    'nothing
                                End If
                            End If
                        End If
                        'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                        infoListe.RemoveAt(0)
                    End While
                End If
            Catch ex As Exception
                exceptionTrouve = True
                If typedoc = "14" Then
                    ErreurJrn.WriteLine("Bon de Retour N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                Else
                    If typedoc = "12" Then
                        ErreurJrn.WriteLine("Commande N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                    Else
                        If typedoc = "13" Then
                            ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                        Else
                            If typedoc = "16" Then
                                ErreurJrn.WriteLine("Facture Achat N° : " & Trim(Document.DO_Piece) & " Erreur de Modification de L'information Libre , vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données " & ex.Message)
                            End If
                        End If
                    End If
                End If

            End Try
        End With
    End Sub
    Private Sub ModificationTouslespiece(ByRef EnteteCodeTiers As String, ByRef EntetePieceInterne As String, ByRef EnteteTyPeDocument As String, ByRef Document As IBODocumentAchat3, ByRef infoListe As List(Of Integer), ByRef FormatDatefichier As String, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim TarifrsAdap As OleDbDataAdapter
        Dim TarifrsDs As DataSet
        Dim TarifrsTab As DataTable
        Dim Tarifsupdate As String = Nothing
        Dim Tarifsupdateperso As String = Nothing
        If Trim(EntetePieceInterne) = Trim(EntetePiecePrecedent) Then
            If IsNothing(Document) = True Then
                If Trim(EnteteTyPeDocument) = "14" Then
                    Try
                        Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, Trim(EntetePieceInterne))
                        Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                    Catch ex As Exception
                        exceptionTrouve = True
                        ErreurJrn.WriteLine("Erreur de Modification Entête de Bon de Retour N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                        ListePiece.Add(EntetePieceInterne)
                    End Try
                Else
                    If Trim(EnteteTyPeDocument) = "12" Then
                        Try
                            Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, Trim(EntetePieceInterne))
                            Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                        Catch ex As Exception
                            exceptionTrouve = True
                            ErreurJrn.WriteLine("Erreur de Modification Entête de Commande Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                            ListePiece.Add(EntetePieceInterne)
                        End Try
                    Else
                        If Trim(EnteteTyPeDocument) = "13" Then
                            Try
                                Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, Trim(EntetePieceInterne))
                                Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                            Catch ex As Exception
                                exceptionTrouve = True
                                ErreurJrn.WriteLine("Erreur de Modification Entête de Bon de Reception N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                ListePiece.Add(EntetePieceInterne)
                            End Try
                        Else
                            If Trim(EnteteTyPeDocument) = "16" Then
                                Try
                                    Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, Trim(EntetePieceInterne))
                                    Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                                Catch ex As Exception
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Erreur de Modification Entête de Facture Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                    ListePiece.Add(EntetePieceInterne)
                                End Try
                            End If
                        End If
                    End If
                End If
                If IsNothing(Document) = False Then
                    If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(Document.Fournisseur.CT_Num)) = True Then
                            If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                    Tarifsupdateperso = Nothing
                                    TarifrsAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Trim(Document.DO_Piece) & "' AND AR_Ref='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleSocieteConnect)
                                    TarifrsDs = New DataSet
                                    TarifrsAdap.Fill(TarifrsDs)
                                    TarifrsTab = TarifrsDs.Tables(0)
                                    If TarifrsTab.Rows.Count = 1 Then
                                        Modification_Ligne_Article(Join(Split(Trim(LigneCodeArticle), "'"), "''"), FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        'l'article existe dans la base
                                    Else
                                        If TarifrsTab.Rows.Count = 0 Then
                                            Modification_Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            'l article n'existe pas dans la pièce 
                                        End If
                                    End If
                                End If
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(Document.Fournisseur.CT_Num), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                        If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                            Tarifsupdateperso = Nothing
                                            TarifrsAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Trim(Document.DO_Piece) & "' AND AR_Ref='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''") & "'", OleSocieteConnect)
                                            TarifrsDs = New DataSet
                                            TarifrsAdap.Fill(TarifrsDs)
                                            TarifrsTab = TarifrsDs.Tables(0)
                                            If TarifrsTab.Rows.Count = 1 Then
                                                Modification_Ligne_Article(Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''"), FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                'l'article existe dans la base
                                            Else
                                                If TarifrsTab.Rows.Count = 0 Then
                                                    Modification_Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                    'l'article n'existe pas dans la pièce
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            Else 'document nothing
                If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
                    If BaseCpta.FactoryFournisseur.ExistNumero(Trim(Document.Fournisseur.CT_Num)) = True Then
                        If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                Tarifsupdateperso = Nothing
                                TarifrsAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Trim(Document.DO_Piece) & "' AND AR_Ref='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleSocieteConnect)
                                TarifrsDs = New DataSet
                                TarifrsAdap.Fill(TarifrsDs)
                                TarifrsTab = TarifrsDs.Tables(0)
                                If TarifrsTab.Rows.Count = 1 Then
                                    Modification_Ligne_Article(Join(Split(Trim(LigneCodeArticle), "'"), "''"), FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    'l'article existe dans la base
                                Else
                                    If TarifrsTab.Rows.Count = 0 Then
                                        Modification_Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        'l article n'existe pas dans la pièce 
                                    End If
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(Document.Fournisseur.CT_Num), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count <> 0 Then
                                If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                    If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                        Tarifsupdateperso = Nothing
                                        TarifrsAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Trim(Document.DO_Piece) & "' AND AR_Ref='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''") & "'", OleSocieteConnect)
                                        TarifrsDs = New DataSet
                                        TarifrsAdap.Fill(TarifrsDs)
                                        TarifrsTab = TarifrsDs.Tables(0)
                                        If TarifrsTab.Rows.Count = 1 Then
                                            Modification_Ligne_Article(Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''"), FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            'l'article existe dans la base
                                        Else
                                            If TarifrsTab.Rows.Count = 0 Then
                                                Modification_Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                'l'article n'existe pas dans la pièce
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            ' piece precedent <> piece en cours
            If IsNothing(Document) = True Then
                If Trim(EnteteTyPeDocument) = "14" Then
                    Try
                        Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, Trim(EntetePieceInterne))
                        Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                    Catch ex As Exception
                        exceptionTrouve = True
                        ErreurJrn.WriteLine("Erreur de Modification Entête de Bon de Retour N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                        ListePiece.Add(EntetePieceInterne)
                    End Try
                Else
                    If Trim(EnteteTyPeDocument) = "12" Then
                        Try
                            Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, Trim(EntetePieceInterne))
                            Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                        Catch ex As Exception
                            exceptionTrouve = True
                            ErreurJrn.WriteLine("Erreur de Modification Entête de Commande Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                            ListePiece.Add(EntetePieceInterne)
                        End Try
                    Else
                        If Trim(EnteteTyPeDocument) = "13" Then
                            Try
                                Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, Trim(EntetePieceInterne))
                                Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                            Catch ex As Exception
                                exceptionTrouve = True
                                ErreurJrn.WriteLine("Erreur de Modification Entête de Bon de Reception N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                ListePiece.Add(EntetePieceInterne)
                            End Try
                        Else
                            If Trim(EnteteTyPeDocument) = "16" Then
                                Try
                                    Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, Trim(EntetePieceInterne))
                                    Modification_Entete_Document(EnteteTyPeDocument, FormatDatefichier)
                                Catch ex As Exception
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Erreur de Modification Entête de Facture Achat N°Pièce Fchier : " & EntetePieceInterne & " Erreur système : " & ex.Message)
                                    ListePiece.Add(EntetePieceInterne)
                                End Try
                            End If
                        End If
                    End If
                End If
                If IsNothing(Document) = False Then
                    If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(Document.Fournisseur.CT_Num)) = True Then
                            If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                    Tarifsupdateperso = Nothing
                                    TarifrsAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Trim(Document.DO_Piece) & "' AND AR_Ref='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleSocieteConnect)
                                    TarifrsDs = New DataSet
                                    TarifrsAdap.Fill(TarifrsDs)
                                    TarifrsTab = TarifrsDs.Tables(0)
                                    If TarifrsTab.Rows.Count = 1 Then
                                        Modification_Ligne_Article(Join(Split(Trim(LigneCodeArticle), "'"), "''"), FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                        'l'article existe dans la base
                                    Else
                                        If TarifrsTab.Rows.Count = 0 Then
                                            Modification_Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                            'l article n'existe pas dans la pièce 
                                        End If
                                    End If
                                End If
                            Else
                                fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(Document.Fournisseur.CT_Num), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                                fournisseurDs = New DataSet
                                fournisseurAdap.Fill(fournisseurDs)
                                fournisseurTab = fournisseurDs.Tables(0)
                                If fournisseurTab.Rows.Count <> 0 Then
                                    If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                        If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                            Tarifsupdateperso = Nothing
                                            TarifrsAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Trim(Document.DO_Piece) & "' AND AR_Ref='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''") & "'", OleSocieteConnect)
                                            TarifrsDs = New DataSet
                                            TarifrsAdap.Fill(TarifrsDs)
                                            TarifrsTab = TarifrsDs.Tables(0)
                                            If TarifrsTab.Rows.Count = 1 Then
                                                Modification_Ligne_Article(Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''"), FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                'l'article existe dans la base
                                            Else
                                                If TarifrsTab.Rows.Count = 0 Then
                                                    Modification_Creation_Ligne_Article(FormatDatefichier, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                                    'l'article n'existe pas dans la pièce
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        End If
        EntetePiecePrecedent = EntetePieceInterne
    End Sub
    Private Sub RecuperationEnregistrementModifié(ByRef sPathFilexporter As String, ByRef spathFileFormat As String, ByRef typeFormat As String, ByRef Base_Excel As String, ByRef sColumnsSepar As String, ByRef ListePiece As List(Of String), ByRef IdentifiantPiece As String)
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim jColD As Integer
        Dim aRows(), aCols(), Dataname(), FichierRecup As String
        Dim iColPosition, iColGauchetxt As Integer
        Dim i, j As Integer
        aRows = Nothing
        Dataname = Split(sPathFilexporter, "\")
        FichierRecup = "Recup_" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & Dataname(UBound(Dataname))
        If ListePiece.Count <> 0 Then
            If Trim(typeFormat) = "Excel" Then
                'Dim Cnapplica As New Microsoft.Office.Interop.Excel.Application
                'Dim Cnbook As Microsoft.Office.Interop.Excel.Workbook
                'Dim Cnsheet As Microsoft.Office.Interop.Excel.Worksheet
                'Try
                '    If AffichFormatintegration(spathFileFormat, typeFormat) = True Then
                '        Datagridaffiche.Rows.Clear()
                '        OleAdaptater = New OleDbDataAdapter("select * from [" & Base_Excel & "$] ", OleExcelConnected)
                '        OleAfficheDataset = New DataSet
                '        OleAdaptater.Fill(OleAfficheDataset)
                '        Oledatable = OleAfficheDataset.Tables(0)
                '        If Oledatable.Rows.Count <> 0 Then
                '            Cnapplica = CreateObject("Excel.Application")
                '            Cnbook = Cnapplica.Workbooks.Add
                '            Cnsheet = Cnbook.Worksheets.Add
                '            For i = Cnbook.Sheets.Count To 1 Step -1
                '                If Cnbook.Sheets(i).name() = Base_Excel Then
                '                    Cnbook.Worksheets(i).Delete()
                '                End If
                '            Next i
                '            Cnsheet.Name = Base_Excel
                '            ProgressBar1.Value = ProgressBar1.Minimum
                '            ProgressBar1.Maximum = Oledatable.Rows.Count - DecFormat
                '            j = 0 + CInt(DecFormat)
                '            For i = DecFormat To Oledatable.Rows.Count - 1
                '                If Datagridaffiche.Columns.Contains(IdentifiantPiece) = True Then
                '                    iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1), "(")))
                '                    If iColPosition <= Oledatable.Columns.Count Then
                '                        If iColPosition <> 0 Then
                '                            If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                '                                If ListePiece.Contains(Trim(Oledatable.Rows(i).Item(iColPosition - 1))) = True Then
                '                                    j = j + 1
                '                                    For jColD = 0 To Oledatable.Columns.Count - 1
                '                                        If Convert.IsDBNull(Oledatable.Rows(i).Item(jColD)) = False Then
                '                                            Cnsheet.Cells(j, jColD + 1) = Oledatable.Rows(i).Item(jColD)
                '                                        End If
                '                                    Next jColD
                '                                End If
                '                            End If
                '                        Else
                '                            If ListePiece.Contains(LireFichierFormat(spathFileFormat, IdentifiantPiece, typeFormat)) = True Then
                '                                j = j + 1
                '                                For jColD = 0 To Oledatable.Columns.Count - 1
                '                                    If Convert.IsDBNull(Oledatable.Rows(i).Item(jColD)) = False Then
                '                                        Cnsheet.Cells(j, jColD + 1) = Oledatable.Rows(i).Item(jColD)
                '                                    End If
                '                                Next jColD
                '                            End If
                '                        End If
                '                    End If
                '                End If
                '                ProgressBar1.Value = ProgressBar1.Value + 1
                '            Next i
                '            Cnbook.SaveCopyAs(PathsFileRecuperer & "" & FichierRecup)
                '            Cnapplica.DefaultSaveFormat = Microsoft.Office.Interop.Excel.XlFileFormat.xlExcel5
                '            Cnbook.Close(False) 'Ferme le classeur
                '            Cnapplica.Quit()
                '            Cnbook = Nothing
                '            Cnapplica = Nothing
                '        End If
                '    Else
                '        ErreurJrn.WriteLine("Impossible d'integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                '    End If
                'Catch ex As Exception
                '    exceptionTrouve = True
                'End Try
            Else
                If Trim(typeFormat) = "Délimité" Or Trim(typeFormat) = "Tabulation" Or Trim(typeFormat) = "Pipe" Then
                    Try
                        Error_journal = File.AppendText(PathsFileRecuperer & "" & FichierRecup)
                        If AffichFormatintegration(spathFileFormat, typeFormat) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            Datagridaffiche.Rows.Clear()
                            ProgressBar1.Value = ProgressBar1.Minimum
                            ProgressBar1.Maximum = UBound(aRows) + 1 - DecFormat
                            For i = DecFormat To UBound(aRows)
                                aCols = Split(aRows(i), sColumnsSepar)
                                If Datagridaffiche.Columns.Contains(IdentifiantPiece) = True Then
                                    iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Then
                                        If iColPosition <= (UBound(aCols) + 1) Then
                                            If Strings.Len(Trim(aCols(iColPosition - 1))) <= 8 Then
                                                If ListePiece.Contains(Formatage_Chaine(Trim(aCols(iColPosition - 1)))) = True Then
                                                    Error_journal.WriteLine(aRows(i))
                                                End If
                                            Else
                                                If ListePiece.Contains(Formatage_Chaine(Strings.Left(Trim(aCols(iColPosition - 1)), 8))) = True Then
                                                    Error_journal.WriteLine(aRows(i))
                                                End If
                                            End If
                                        End If
                                    Else
                                        If ListePiece.Contains(LireFichierFormat(spathFileFormat, IdentifiantPiece, typeFormat)) = True Then
                                            Error_journal.WriteLine(aRows(i))
                                        End If
                                    End If
                                End If
                                ProgressBar1.Value = ProgressBar1.Value + 1
                            Next i
                            Error_journal.Close()
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                        exceptionTrouve = True
                    End Try
                Else
                    If Trim(typeFormat) = "Longueur Fixe" Then
                        Try
                            Error_journal = File.AppendText(PathsFileRecuperer & "" & FichierRecup)
                            If AffichFormatintegration(spathFileFormat, typeFormat) = True Then
                                aRows = GetArrayFile(sPathFilexporter, aRows)
                                Datagridaffiche.Rows.Clear()
                                ProgressBar1.Value = ProgressBar1.Minimum
                                ProgressBar1.Maximum = UBound(aRows) + 1 - DecFormat
                                For i = DecFormat To UBound(aRows)
                                    If Datagridaffiche.Columns.Contains(IdentifiantPiece) = True Then
                                        iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, Strings.Len(Datagridaffiche.Columns(IdentifiantPiece).HeaderText) - InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, Strings.Len(Datagridaffiche.Columns(IdentifiantPiece).HeaderText) - InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, "[")), "]") - 1))
                                        iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, InStr(Datagridaffiche.Columns(IdentifiantPiece).HeaderText, ")") - 1), "(")))
                                        If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                            If Strings.Len(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))) <= 8 Then
                                                If ListePiece.Contains(Formatage_Chaine(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt)))) = True Then
                                                    Error_journal.WriteLine(aRows(i))
                                                End If
                                            Else
                                                If ListePiece.Contains(Formatage_Chaine(Strings.Left(Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt)), 8))) = True Then
                                                    Error_journal.WriteLine(aRows(i))
                                                End If
                                            End If
                                        Else
                                            If ListePiece.Contains(LireFichierFormat(spathFileFormat, IdentifiantPiece, typeFormat)) = True Then
                                                Error_journal.WriteLine(aRows(i))
                                            End If
                                        End If
                                    End If
                                    ProgressBar1.Value = ProgressBar1.Value + 1
                                Next i
                                Error_journal.Close()
                            Else
                                ErreurJrn.WriteLine("Impossible d'integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                            End If
                        Catch ex As Exception
                            exceptionTrouve = True
                        End Try
                    End If
                End If
            End If
        End If
    End Sub
    Private Sub BT_Quitter_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BT_Quitter.Click
        Me.Close()
    End Sub
    Private Function Modification_Verification_Fichier(ByVal sPathFilexporter As String, ByVal spathFileFormat As String, ByRef Formatype As String, ByRef Base_Excel As String, ByRef sColumnsSepar As String, ByRef IdentifiantPiece As String, ByRef FormatdeDatefich As String) As Boolean
        Dim OleAdaptater As OleDbDataAdapter
        Dim OleAfficheDataset As DataSet
        Dim Oledatable As DataTable
        Dim m As Integer
        Dim jColD As Integer
        Dim iLine As Integer
        Dim aRows() As String
        Dim iColPosition, iColGauchetxt As Integer
        Dim i As Integer, aCols() As String
        Initialiser()
        iLine = 0
        aRows = Nothing

        If Trim(Formatype) = "Excel" Then
            Try
                If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                    ProgressBar1.Value = ProgressBar1.Minimum
                    Datagridaffiche.Rows.Clear()
                    NbreTotal = DecFormat
                    OleAdaptater = New OleDbDataAdapter("select * from [" & Base_Excel & "$] ", OleExcelConnected)
                    OleAfficheDataset = New DataSet
                    OleAdaptater.Fill(OleAfficheDataset)
                    Oledatable = OleAfficheDataset.Tables(0)
                    If Oledatable.Rows.Count <> 0 Then
                        ProgresMax = Oledatable.Rows.Count - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To Oledatable.Rows.Count - 1
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <= Oledatable.Columns.Count Then
                                    If iColPosition <> 0 Then
                                        If Convert.IsDBNull(Oledatable.Rows(i).Item(iColPosition - 1)) = False Then
                                            Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Oledatable.Rows(i).Item(iColPosition - 1))
                                        Else
                                            Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                        End If
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Modification_Verification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                m = iLine
                            Else
                                If i = (Oledatable.Rows.Count - 1) Then
                                    Me.Refresh()
                                    Modification_Verification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                    m = iLine
                                End If
                            End If
                        Next i
                    End If
                Else
                    ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                End If
            Catch ex As Exception
                exceptionTrouve = True
            End Try
        Else
            If Trim(Formatype) = "Délimité" Or Trim(Formatype) = "Tabulation" Or Trim(Formatype) = "Pipe" Then
                Try
                    If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                        aRows = GetArrayFile(sPathFilexporter, aRows)
                        NbreTotal = DecFormat
                        ProgressBar1.Value = ProgressBar1.Minimum
                        Datagridaffiche.Rows.Clear()
                        ProgresMax = UBound(aRows) + 1 - DecFormat
                        m = 0
                        infoListe = New List(Of Integer)
                        infoLigne = New List(Of Integer)
                        For i = DecFormat To UBound(aRows)
                            aCols = Split(aRows(i), sColumnsSepar)
                            Datagridaffiche.RowCount = iLine + 1 - m
                            For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                iColPosition = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                If iColPosition <> 0 Then
                                    If iColPosition <= (UBound(aCols) + 1) Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(aCols(iColPosition - 1))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = ""
                                    End If
                                Else
                                    Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                End If
                            Next jColD
                            iLine = iLine + 1
                            If i Mod 10 = 0 Then
                                Me.Refresh()
                                Modification_Verification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                m = iLine
                            Else
                                If i = UBound(aRows) Then
                                    Me.Refresh()
                                    Modification_Verification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                    m = iLine
                                End If
                            End If
                        Next i
                    Else
                        ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                    End If
                Catch ex As Exception
                    exceptionTrouve = True
                End Try
            Else
                If Trim(Formatype) = "Longueur Fixe" Then
                    Try
                        If AffichFormatintegration(spathFileFormat, Formatype) = True Then
                            aRows = GetArrayFile(sPathFilexporter, aRows)
                            NbreTotal = DecFormat
                            ProgressBar1.Value = ProgressBar1.Minimum
                            Datagridaffiche.Rows.Clear()
                            ProgresMax = UBound(aRows) + 1 - DecFormat
                            m = 0
                            infoListe = New List(Of Integer)
                            infoLigne = New List(Of Integer)
                            For i = DecFormat To UBound(aRows)
                                Datagridaffiche.RowCount = iLine + 1 - m
                                For jColD = 0 To Datagridaffiche.ColumnCount - 1
                                    iColPosition = CInt(Strings.Left(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), InStr(Strings.Right(Datagridaffiche.Columns(jColD).HeaderText, Strings.Len(Datagridaffiche.Columns(jColD).HeaderText) - InStr(Datagridaffiche.Columns(jColD).HeaderText, "[")), "]") - 1))
                                    iColGauchetxt = CInt(Strings.Right(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), Strings.Len(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1)) - InStr(Strings.Left(Datagridaffiche.Columns(jColD).HeaderText, InStr(Datagridaffiche.Columns(jColD).HeaderText, ")") - 1), "(")))
                                    If iColPosition <> 0 Or iColGauchetxt <> 0 Then
                                        Datagridaffiche.Item(jColD, iLine - m).Value = Trim(Strings.Mid(aRows(i), iColPosition, iColGauchetxt))
                                    Else
                                        Datagridaffiche.Item(jColD, iLine - m).Value = LireFichierFormat(spathFileFormat, Datagridaffiche.Columns(jColD).Name, Formatype)
                                    End If
                                Next jColD
                                iLine = iLine + 1
                                If i Mod 10 = 0 Then
                                    Me.Refresh()
                                    Modification_Verification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                    m = iLine
                                Else
                                    If i = UBound(aRows) Then
                                        Me.Refresh()
                                        Modification_Verification_Integrer_Ecriture(IdentifiantPiece, FormatdeDatefich, Trim(Formatype), LirePieceCommande(spathFileFormat, Trim(Formatype)), LireLigneArticle(spathFileFormat, Trim(Formatype)))
                                        m = iLine
                                    End If
                                End If
                            Next i
                        Else
                            ErreurJrn.WriteLine("Impossible d' Integrer le Fichier " & sPathFilexporter & " car Erreur de lecture du Fichier Format " & spathFileFormat)
                        End If
                    Catch ex As Exception
                        exceptionTrouve = True
                    End Try
                End If
            End If
        End If
        Modification_Verification_Fichier = ExisteLecture
    End Function
    Private Sub Modification_Verification_Integrer_Ecriture(ByRef IdentifiantPiece As String, ByRef FormatfichierDate As String, ByRef FormatIntegrer As Object, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Me.Cursor = Cursors.WaitCursor
        BT_integrer.Enabled = False
        If Datagridaffiche.RowCount >= 0 Then
            ProgressBar1.Maximum = ProgresMax
            Try
                For numLigne = 0 To Datagridaffiche.RowCount - 1
                    vidage()
                    NbreTotal = NbreTotal + 1
                    Label5.Refresh()
                    Label5.Text = "Vérification des Integrations!"
                    For numColonne = 0 To Datagridaffiche.ColumnCount - 1
                        'Entête Document
                        If Datagridaffiche.Columns.Contains(IdentifiantPiece) = True Then
                            If Strings.Len(Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value)) <= 8 Then
                                EntetePieceInterne = Formatage_Chaine(Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value))
                            Else
                                EntetePieceInterne = Formatage_Chaine(Strings.Left(Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value), 8))
                                ErreurJrn.WriteLine("N°Pièce :" & Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantPiece).Value) & "  a été tronquée")
                            End If
                        End If
                        If InStr(IdentifiantCommande, ",") <> 0 Then
                            If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                                PieceCommande = Join(Split(Trim(Datagridaffiche.Rows(numLigne).Cells(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)).Value), "'"), "''")
                            End If
                        End If

                        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
                            PieceArticle = Trim(Datagridaffiche.Rows(numLigne).Cells(IdentifiantArticle).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteStatutdocument" Then
                            EnteteStatutdocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "ProvenanceFacture" Then
                            ProvenanceFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiers" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                EnteteCodeTiers = Formatage_Chaine(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                            Else
                                EnteteCodeTiers = Formatage_Chaine(Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17))
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTyPeDocument" Then
                            EnteteTyPeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteContact" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 35 Then
                                EnteteContact = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteContact = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 35)
                                ErreurJrn.WriteLine("Le Contact  :" & EnteteContact & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "Entete1" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete1 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 1 :" & Entete1 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete2" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete2 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 2 :" & Entete2 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete3" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete3 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 3 :" & Entete3 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "Entete4" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 25 Then
                                Entete4 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                Entete4 = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 25)
                                ErreurJrn.WriteLine("L'Entête 4 :" & Entete4 & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteBLFacture" Then
                            EnteteBLFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCatégorietarifaire" Then
                            EnteteCatégorietarifaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeAffaire" Then
                            EnteteCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCodeTiersPayeur" Then
                            EnteteCodeTiersPayeur = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteColisagedeLivraison" Then
                            EnteteColisagedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteCompteGeneral" Then
                            EnteteCompteGeneral = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteConditiondeLivraison" Then
                            EnteteConditiondeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteDateLivraison" Then
                            EnteteDateLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteEcartValorisation" Then
                            EnteteEcartValorisation = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteFraisExpedition" Then
                            EnteteFraisExpedition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleDepot" Then
                            EnteteIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotEntete" Then
                            IDDepotEntete = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "IDDepotLigne" Then
                            IDDepotLigne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteIntituleExpédition" Then
                            EnteteIntituleExpédition = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNatureTransaction" Then
                            EnteteNatureTransaction = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNombredeFacture" Then
                            EnteteNombredeFacture = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteNomReprésentant" Then
                            EnteteNomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EntetePrenomReprésentant" Then
                            EntetePrenomReprésentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "EntetePlanAnalytique" Then
                            EntetePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                EnteteReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                EnteteReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                                ErreurJrn.WriteLine("La Référence en Entête :" & EnteteReference & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteRegimeDocument" Then
                            EnteteRegimeDocument = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "EnteteTauxescompte" Then
                            EnteteTauxescompte = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'Ligne Document
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeAffaire" Then
                            LigneCodeAffaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDatedeLivraison" Then
                            LigneDatedeLivraison = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneDesignationArticle" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 69 Then
                                LigneDesignationArticle = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneDesignationArticle = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 69)
                                ErreurJrn.WriteLine("La Désignation Article :" & LigneDesignationArticle & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneEnumereConditionnement" Then
                            LigneEnumereConditionnement = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneFraisApproche" Then
                            LigneFraisApproche = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneIntituleDepot" Then
                            LigneIntituleDepot = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneNomRepresentant" Then
                            LigneNomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePlanAnalytique" Then
                            LignePlanAnalytique = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsBrut" Then
                            LignePoidsBrut = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePoidsNet" Then
                            LignePoidsNet = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrenomRepresentant" Then
                            LignePrenomRepresentant = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixdeRevientUnitaire" Then
                            LignePrixdeRevientUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaire" Then
                            LignePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LignePrixUnitaireDevise" Then
                            LignePrixUnitaireDevise = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneValorisé" Then
                            LigneValorisé = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypePrixUnitaire" Then
                            LigneTypePrixUnitaire = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            LigneQuantite = Trim(Datagridaffiche.Rows(numLigne).Cells("LigneQuantite").Value)
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneQuantiteConditionne" Then
                            LigneQuantiteConditionne = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneReference" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 17 Then
                                LigneReference = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReference = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 17)
                                ErreurJrn.WriteLine("La Référence en Ligne :" & LigneReference & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneCodeArticle" Then
                            LigneCodeArticle = Formatage_Article(Trim(Datagridaffiche.Item(numColonne, numLigne).Value))
                        End If

                        If Datagridaffiche.Columns(numColonne).Name = "LigneReferenceArticleTiers" Then
                            If Strings.Len(Trim(Datagridaffiche.Item(numColonne, numLigne).Value)) <= 18 Then
                                LigneReferenceArticleTiers = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                            Else
                                LigneReferenceArticleTiers = Strings.Left(Trim(Datagridaffiche.Item(numColonne, numLigne).Value), 18)
                                ErreurJrn.WriteLine("La Référence Article/Tiers :" & LigneReferenceArticleTiers & " de la Pièce : " & Trim(EntetePieceInterne) & " a été tronqué")
                            End If
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise1" Then
                            LigneTauxRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise2" Then
                            LigneTauxRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTauxRemise3" Then
                            LigneTauxRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise1" Then
                            LigneTypeRemise1 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise2" Then
                            LigneTypeRemise2 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        If Datagridaffiche.Columns(numColonne).Name = "LigneTypeRemise3" Then
                            LigneTypeRemise3 = Trim(Datagridaffiche.Item(numColonne, numLigne).Value)
                        End If
                        'RECHERCHE DE L'INTITULE DE L'INFO LIBRE
                        If Trim(FormatIntegrer) = "Longueur Fixe" Then
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "{"))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        Else
                            Dim InfoTableau() As String = Split(Trim(Strings.Left(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "[")), Strings.Len(Strings.Right(Datagridaffiche.Columns(numColonne).HeaderText, Strings.Len(Datagridaffiche.Columns(numColonne).HeaderText) - InStr(Datagridaffiche.Columns(numColonne).HeaderText, "["))) - 1)), "-")
                            If Trim(InfoTableau(0)) = "oui" Then
                                If Trim(InfoTableau(1)) = "F_DOCENTETE" Then
                                    infoListe.Add(numColonne)
                                End If
                                If Trim(InfoTableau(1)) = "F_DOCLIGNE" Then
                                    infoLigne.Add(numColonne)
                                End If
                            End If
                        End If
                    Next numColonne
                    'Creation Effective du Document Commercial
                    If Trim(EnteteTyPeDocument) = "14" Then 'Bon de Retour
                        If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatReprise, Trim(EntetePieceInterne)) = True Then
                            Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatReprise, Trim(EntetePieceInterne))
                            Modification_Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                        Else
                            ExisteLecture = False
                            exceptionTrouve = True
                            ErreurJrn.WriteLine("La Commande N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                        End If
                    Else
                        If Trim(EnteteTyPeDocument) = "12" Then 'Commande
                            If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatCommandeConf, Trim(EntetePieceInterne)) = True Then
                                Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatCommandeConf, Trim(EntetePieceInterne))
                                Modification_Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                            Else
                                ExisteLecture = False
                                exceptionTrouve = True
                                ErreurJrn.WriteLine("La Commande N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                            End If
                        Else
                            If Trim(EnteteTyPeDocument) = "13" Then 'Livraison
                                If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatLivraison, Trim(EntetePieceInterne)) = True Then
                                    Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatLivraison, Trim(EntetePieceInterne))
                                    Modification_Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le Bon livraison N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                                End If
                            Else
                                If Trim(EnteteTyPeDocument) = "16" Then 'Facture
                                    If BaseCial.FactoryDocumentAchat.ExistPiece(DocumentType.DocumentTypeAchatFacture, Trim(EntetePieceInterne)) = True Then
                                        Document = BaseCial.FactoryDocumentAchat.ReadPiece(DocumentType.DocumentTypeAchatFacture, Trim(EntetePieceInterne))
                                        Modification_Verification_Parametrage(EnteteCodeTiers, EntetePieceInterne, EnteteTyPeDocument, Document, infoListe, FormatfichierDate, PieceCommande, PieceArticle, IdentifiantCommande, IdentifiantArticle)
                                    Else
                                        ExisteLecture = False
                                        exceptionTrouve = True
                                        ErreurJrn.WriteLine("La Facture N°: " & Trim(EntetePieceInterne) & " n'existe pas dans la base commerciale")
                                    End If
                                Else
                                    ExisteLecture = False
                                    exceptionTrouve = True
                                    ErreurJrn.WriteLine("Le type de document ne correspond à aucune de ces valeurs (12: Commande achat,13:Bon Reception,16:Facture achat)")
                                End If
                            End If
                        End If
                    End If
                    NbreLigne = NbreLigne + 1
                    ProgressBar1.Value = ProgressBar1.Value + 1
                    Label8.Text = NbreLigne & "/" & ProgresMax
                    Label8.Refresh()
                Next numLigne
            Catch ex As Exception
                ExisteLecture = False
                exceptionTrouve = True
                ErreurJrn.WriteLine("Une erreur s'est produit au moment de la lecture du fichier  : " & Trim(EnteteCodeTiers))
            End Try
        End If
        Datagridaffiche.Rows.Clear()
        Me.Cursor = Cursors.Default
        BT_integrer.Enabled = True
    End Sub
    Private Sub Modification_Verification_Parametrage(ByRef EnteteCodeTiers As String, ByRef EntetePieceInterne As String, ByRef EnteteTyPeDocument As String, ByRef Document As IBODocumentAchat3, ByRef infoListe As List(Of Integer), ByRef FormatDatefichier As String, ByRef PieceCommande As String, ByRef PieceArticle As String, ByRef IdentifiantCommande As String, ByRef IdentifiantArticle As String)
        Dim fournisseurAdap As OleDbDataAdapter
        Dim fournisseurDs As DataSet
        Dim fournisseurTab As DataTable
        Dim statistAdap As OleDbDataAdapter
        Dim statistDs As DataSet
        Dim statistTab As DataTable
        Dim OleAdaptaterDelete As OleDbDataAdapter
        Dim OleDeleteDataset As DataSet
        Dim OledatableDelete As DataTable
        Dim OleRecherAdapter As OleDbDataAdapter
        Dim OleRecherDataset As DataSet
        Dim OleRechDatable As DataTable
        Dim OleDocAdapter As OleDbDataAdapter
        Dim OleDocDataset As DataSet
        Dim OleDocDatable As DataTable
        Dim DossierAdap As OleDbDataAdapter
        Dim DossierDs As DataSet
        Dim DossierTab As DataTable
        Dim FormatQte As Integer = 0
        Dim FormatMnt As Integer = 0
        DossierAdap = New OleDbDataAdapter("select * from P_DOSSIERCIAL", OleSocieteConnect)
        DossierDs = New DataSet
        DossierAdap.Fill(DossierDs)
        DossierTab = DossierDs.Tables(0)
        If DossierTab.Rows.Count <> 0 Then
            If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")), ".") <> 0 Then
                    FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ","))), ".")))
                Else
                    FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatQte"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")), ",") <> 0 Then
                        FormatQte = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), "."))), ",")))
                    Else
                        FormatQte = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatQte")), Len(Trim(DossierTab.Rows(0).Item("D_FormatQte"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatQte")), ".")))
                    End If
                End If
            End If

            If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ",") <> 0 Then
                If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")), ".") <> 0 Then
                    FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ","))), ".")))
                Else
                    FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ",")))
                End If
            Else
                If InStr(DossierTab.Rows(0).Item("D_FormatPrix"), ".") <> 0 Then
                    If InStr(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")), ",") <> 0 Then
                        FormatMnt = Len(Strings.Right(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), Len(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))) - InStr(Trim(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), "."))), ",")))
                    Else
                        FormatMnt = Len(Strings.Right(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), Len(Trim(DossierTab.Rows(0).Item("D_FormatPrix"))) - InStr(Trim(DossierTab.Rows(0).Item("D_FormatPrix")), ".")))
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteFraisExpedition") = True Then
            If Trim(EnteteFraisExpedition) <> "" Then
                If EstNumeric(Trim(EnteteFraisExpedition), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Frais d'Expédition : " & Trim(EnteteFraisExpedition) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteUniteColis") = True Then
            If Trim(EnteteUniteColis) <> "" Then
                If BaseCial.FactoryUnite.ExistIntitule(Trim(EnteteUniteColis)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Intitule Unite Colisage>' and Valeurlue ='" & Join(Split(Trim(EnteteUniteColis), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryUnite.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Unité de Livraison : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Unité de Livraison : " & Trim(EnteteUniteColis) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteTyPeDocument") = True Then
            If Trim(EnteteTyPeDocument) <> "" Then
                If Trim(EnteteTyPeDocument) = "14" Then
                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                        If Trim(LigneQuantite) <> "" Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                End If
                            End If
                        End If
                    End If
                    If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                        If Trim(LigneQuantiteConditionne) <> "" Then
                            If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                                If CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                End If
                            End If
                        End If
                    End If
                Else
                    If Trim(EnteteTyPeDocument) = "12" Then
                        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                            If Trim(LigneQuantite) <> "" Then
                                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                    End If
                                End If
                            End If
                        End If
                        If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
                            If Trim(LigneQuantiteConditionne) <> "" Then
                                If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                                    If CDbl(RenvoiMontant(Trim(LigneQuantiteConditionne), FormatQte, DecimalNomb, DecimalMone)) < 0 Then
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " ne doit pas être négative >")
                                    End If
                                End If
                            End If
                        End If
                    Else
                        If Trim(EnteteTyPeDocument) = "13" Then
                        Else
                            ErreurJrn.WriteLine("Le Type du document " & EnteteTyPeDocument & " dois être égal à 14,12,13 Pièce N° : " & EntetePieceInterne)
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCatégorietarifaire") = True Then
            If Trim(EnteteCatégorietarifaire) <> "" Then
                If BaseCial.FactoryCategorieTarif.ExistIntitule(Trim(EnteteCatégorietarifaire)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Categorie Tarifaire>' and Valeurlue ='" & Join(Split(Trim(EnteteCatégorietarifaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryCategorieTarif.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé Catégorie tarifaire : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé Catégorie tarifaire : " & Trim(EnteteCatégorietarifaire) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EntetePlanAnalytique") = True Then
            If Datagridaffiche.Columns.Contains("EnteteCodeAffaire") = True Then
                If Trim(EntetePlanAnalytique) <> "" Then
                    If Trim(EnteteCodeAffaire) <> "" Then
                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(EntetePlanAnalytique)) = True Then
                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(EntetePlanAnalytique))
                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                            Else
                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(EnteteCodeAffaire) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(EntetePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(EnteteCodeAffaire)) = True Then
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                            End If
                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(EnteteCodeAffaire) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(EntetePlanAnalytique) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCompteGeneral") = True Then
            If Trim(EnteteCompteGeneral) <> "" Then
                If BaseCpta.FactoryCompteG.ExistNumero(Trim(EnteteCompteGeneral)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Compte General>' and Valeurlue ='" & Join(Split(Trim(EnteteCompteGeneral), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCpta.FactoryCompteG.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé Condition de livraison : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé Condition de livraison : " & Trim(EnteteCompteGeneral) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteConditiondeLivraison") = True Then
            If Trim(EnteteConditiondeLivraison) <> "" Then
                If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(EnteteConditiondeLivraison)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition de Livraison>' and Valeurlue ='" & Join(Split(Trim(EnteteConditiondeLivraison), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryConditionLivraison.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé Condition de livraison : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé Condition de livraison : " & Trim(EnteteConditiondeLivraison) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("IDDepotEntete") = True Then
            If IsNumeric(Trim(IDDepotEntete)) = True Then
                statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(IDDepotEntete)) & "'", OleSocieteConnect)
                statistDs = New DataSet
                statistAdap.Fill(statistDs)
                statistTab = statistDs.Tables(0)
                If statistTab.Rows.Count <> 0 Then

                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(IDDepotEntete), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If IsNumeric(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                            statistAdap = New OleDbDataAdapter("select * from F_DEPOT where DE_No ='" & CInt(Trim(fournisseurTab.Rows(0).Item("Correspond"))) & "'", OleSocieteConnect)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <> 0 Then

                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< L'ID dépôt : " & fournisseurTab.Rows(0).Item("Correspond") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                            End If
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'ID dépôt : " & fournisseurTab.Rows(0).Item("Correspond") & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " existant dans la table de paramétrage n'est pas numérique>")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'ID dépôt : " & Trim(IDDepotEntete) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            Else
                ExisteLecture = False
                ErreurJrn.WriteLine("< L'ID dépôt : " & IDDepotEntete & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " existant dans le fichier n'est pas numérique>")
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteIntituleDepot") = True Then
            If Trim(EnteteIntituleDepot) <> "" Then
                If BaseCial.FactoryDepot.ExistIntitule(Trim(EnteteIntituleDepot)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(EnteteIntituleDepot) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteColisagedeLivraison") = True Then
            If Trim(EnteteColisagedeLivraison) <> "" Then
                If EstNumeric(Trim(EnteteColisagedeLivraison), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Colisage de livraison : " & Trim(EnteteColisagedeLivraison) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteDateLivraison") = True Then
            If Trim(EnteteDateLivraison) <> "" Then
                If Verificatdate(Trim(EnteteDateLivraison), FormatDatefichier, "Date de Livraison") = True Then
                Else
                    ExisteLecture = False
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneDatedeLivraison") = True Then
            If Trim(LigneDatedeLivraison) <> "" Then
                If Verificatdate(Trim(LigneDatedeLivraison), FormatDatefichier, "Date de Livraison en Ligne") = True Then
                Else
                    ExisteLecture = False
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteEcartValorisation") = True Then
            If Trim(EnteteEcartValorisation) <> "" Then
                If EstNumeric(Trim(EnteteEcartValorisation), DecimalNomb, DecimalMone) = True Then

                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< L'Ecart de valorisation : " & Trim(EnteteEcartValorisation) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteNombredeFacture") = True Then
            If Trim(EnteteNombredeFacture) <> "" Then
                If EstNumeric(Trim(EnteteNombredeFacture), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Nombre de Facture : " & Trim(EnteteNombredeFacture) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteRegimeDocument") = True Then
            If Trim(EnteteRegimeDocument) <> "" Then
                If EstNumeric(Trim(EnteteRegimeDocument), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Regime du document : " & Trim(EnteteRegimeDocument) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If

            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteNatureTransaction") = True Then
            If Trim(EnteteNatureTransaction) <> "" Then
                If EstNumeric(Trim(EnteteNatureTransaction), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La Nature de transaction : " & Trim(EnteteNatureTransaction) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteTauxescompte") = True Then
            If Trim(EnteteTauxescompte) <> "" Then
                If EstNumeric(Trim(EnteteTauxescompte), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le Taux d'escompte : " & Trim(EnteteTauxescompte) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteIntituleExpédition") = True Then
            If Trim(EnteteIntituleExpédition) <> "" Then
                If BaseCial.FactoryExpedition.ExistIntitule(Trim(EnteteIntituleExpédition)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Condition Expedition>' and Valeurlue ='" & Join(Split(Trim(EnteteIntituleExpédition), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCial.FactoryExpedition.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then

                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé de la  condition d'expédition : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé de la  condition d'expédition : " & Trim(EnteteIntituleExpédition) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteNomReprésentant") = True Then
            If Datagridaffiche.Columns.Contains("EntetePrenomReprésentant") = True Then
                If Trim(EnteteNomReprésentant) <> "" Then
                    If Trim(EntetePrenomReprésentant) <> "" Then
                        If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(EnteteNomReprésentant), Trim(EntetePrenomReprésentant)) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Nom/Prenom du representant : " & Trim(EnteteNomReprésentant) & "/" & Trim(EntetePrenomReprésentant) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("EnteteCodeTiersPayeur") = True Then
            If Trim(EnteteCodeTiersPayeur) <> "" Then
                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(EnteteCodeTiersPayeur)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Tiers>' and Valeurlue ='" & Join(Split(Trim(EnteteCodeTiersPayeur), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count <> 0 Then
                        If BaseCpta.FactoryFournisseur.ExistNumero(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then

                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Code tiers payeur : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le Code tiers payeur : " & Trim(EnteteCodeTiersPayeur) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneNomRepresentant") = True Then
            If Datagridaffiche.Columns.Contains("LignePrenomRepresentant") = True Then
                If Trim(LigneNomRepresentant) <> "" Then
                    If Trim(LignePrenomRepresentant) <> "" Then
                        If BaseCpta.FactoryCollaborateur.ExistNomPrenom(Trim(LigneNomRepresentant), Trim(LignePrenomRepresentant)) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le Nom/Prenom du representant : " & Trim(LigneNomRepresentant) & "/" & Trim(LignePrenomRepresentant) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePlanAnalytique") = True Then
            If Datagridaffiche.Columns.Contains("LigneCodeAffaire") = True Then
                If Trim(LignePlanAnalytique) <> "" Then
                    If Trim(LigneCodeAffaire) <> "" Then
                        If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(LignePlanAnalytique)) = True Then
                            PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(LignePlanAnalytique))
                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                            Else
                                statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(LigneCodeAffaire) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                End If
                            End If
                        Else
                            fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Plan Analytique>' and Valeurlue ='" & Join(Split(Trim(LignePlanAnalytique), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                            fournisseurDs = New DataSet
                            fournisseurAdap.Fill(fournisseurDs)
                            fournisseurTab = fournisseurDs.Tables(0)
                            If fournisseurTab.Rows.Count > 0 Then
                                If BaseCpta.FactoryAnalytique.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                                    PlanAna = BaseCpta.FactoryAnalytique.ReadIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond")))
                                    If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(LigneCodeAffaire)) = True Then
                                    Else
                                        statistAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Section Analytique>' and Valeurlue ='" & Join(Split(Trim(LigneCodeAffaire), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        statistDs = New DataSet
                                        statistAdap.Fill(statistDs)
                                        statistTab = statistDs.Tables(0)
                                        If statistTab.Rows.Count <> 0 Then
                                            If BaseCpta.FactoryCompteA.ExistNumero(PlanAna, Trim(statistTab.Rows(0).Item("Correspond"))) = True Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(statistTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                            End If
                                        Else
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Le Code de Section analytique : " & Trim(LigneCodeAffaire) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le Code du plan analytique : " & Trim(LignePlanAnalytique) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneIntituleDepot") = True Then
            If Trim(LigneIntituleDepot) <> "" Then
                If BaseCial.FactoryDepot.ExistIntitule(Trim(LigneIntituleDepot)) = True Then
                Else
                    fournisseurAdap = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='<Depot Stockage>' and Valeurlue ='" & Join(Split(Trim(LigneIntituleDepot), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                    fournisseurDs = New DataSet
                    fournisseurAdap.Fill(fournisseurDs)
                    fournisseurTab = fournisseurDs.Tables(0)
                    If fournisseurTab.Rows.Count > 0 Then
                        If BaseCial.FactoryDepot.ExistIntitule(Trim(fournisseurTab.Rows(0).Item("Correspond"))) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(fournisseurTab.Rows(0).Item("Correspond")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< L'Intitulé dépôt : " & Trim(LigneIntituleDepot) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneFraisApproche") = True Then
            If Trim(LigneFraisApproche) <> "" Then
                If EstNumeric(Trim(LigneFraisApproche), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("<Frais  d'approche : " & Trim(LigneFraisApproche) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("LignePoidsNet") = True Then
            If Trim(LignePoidsNet) <> "" Then
                If EstNumeric(Trim(LignePoidsNet), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le poids Net : " & Trim(LignePoidsNet) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePoidsBrut") = True Then
            If Trim(LignePoidsBrut) <> "" Then
                If EstNumeric(Trim(LignePoidsBrut), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le poids brut : " & Trim(LignePoidsBrut) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePrixdeRevientUnitaire") = True Then
            If Trim(LignePrixdeRevientUnitaire) <> "" Then
                If EstNumeric(Trim(LignePrixdeRevientUnitaire), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix de revient unitaire : " & Trim(LignePrixdeRevientUnitaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
            If Trim(LignePrixUnitaire) <> "" Then
                If EstNumeric(Trim(LignePrixUnitaire), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire : " & Trim(LignePrixUnitaire) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
            If Trim(LignePrixUnitaireDevise) <> "" Then
                If EstNumeric(Trim(LignePrixUnitaireDevise), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire Devise  : " & Trim(LignePrixUnitaireDevise) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
            If Trim(LigneTypePrixUnitaire) = "1" Then
            Else
                If Trim(LigneTypePrixUnitaire) = "0" Then
                Else
                    ErreurJrn.WriteLine("Le type de prix ne correspond à 0/1 : " & Trim(LigneTypePrixUnitaire) & " par défaut est utilisé - N°Pièce : " & Trim(EntetePieceInterne))
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneQuantiteConditionne") = True Then
            If Trim(LigneQuantiteConditionne) <> "" Then
                If EstNumeric(Trim(LigneQuantiteConditionne), DecimalNomb, DecimalMone) = True Then
                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La Quantité Conditionnée : " & Trim(LigneQuantiteConditionne) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
            If Trim(LigneQuantite) <> "" Then
                If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then

                Else
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneCodeArticle") = True Then
            If Trim(LigneCodeArticle) <> "" Then
                If BaseCpta.FactoryFournisseur.ExistNumero(Trim(Document.Fournisseur.CT_Num)) = True Then
                    If BaseCial.FactoryArticle.ExistReference(Trim(LigneCodeArticle)) = True Then
                        If Trim(LigneQuantite) <> "" Then
                            statistAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Join(Split(Trim(EntetePieceInterne), "'"), "''") & "' and AR_Ref ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleSocieteConnect)
                            statistDs = New DataSet
                            statistAdap.Fill(statistDs)
                            statistTab = statistDs.Tables(0)
                            If statistTab.Rows.Count <= 1 Then

                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " est present plusieurs fois dans la pièce Commerciale - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                            End If
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< La quantité pour La Référence Article : " & Trim(LigneCodeArticle) & " existant en Gestion Commerciale - N°Pièce : " & Trim(EntetePieceInterne) & " doit être obligatoire >")
                        End If
                    Else
                        fournisseurAdap = New OleDbDataAdapter("select * from ARTICLE where Fournisseur ='" & Join(Split(Trim(Document.Fournisseur.CT_Num), "'"), "''") & "' and Code_Article_Fo ='" & Join(Split(Trim(LigneCodeArticle), "'"), "''") & "'", OleConnenection)
                        fournisseurDs = New DataSet
                        fournisseurAdap.Fill(fournisseurDs)
                        fournisseurTab = fournisseurDs.Tables(0)
                        If fournisseurTab.Rows.Count <> 0 Then
                            If BaseCial.FactoryArticle.ExistReference(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis"))) = True Then
                                If Trim(LigneQuantite) <> "" Then
                                    statistAdap = New OleDbDataAdapter("select * from F_DOCLIGNE where DO_Piece ='" & Join(Split(Trim(EntetePieceInterne), "'"), "''") & "' and AR_Ref ='" & Join(Split(Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")), "'"), "''") & "'", OleSocieteConnect)
                                    statistDs = New DataSet
                                    statistAdap.Fill(statistDs)
                                    statistTab = statistDs.Tables(0)
                                    If statistTab.Rows.Count <= 1 Then

                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " est present plusieurs fois dans la pièce Commerciale - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< La quantité pour La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " existant en Gestion Commerciale - N°Pièce : " & Trim(EntetePieceInterne) & " doit être obligatoire >")
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< La Référence Article : " & Trim(fournisseurTab.Rows(0).Item("Code_Article_Dis")) & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans Sage >")
                            End If
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< La Référence Article : " & Trim(LigneCodeArticle) & " - fournisseur : " & Join(Split(Trim(Document.Fournisseur.CT_Num), "'"), "''") & " - N°Pièce : " & Trim(EntetePieceInterne) & " n'existe pas dans la table de paramétrage et dans Sage >")
                        End If
                    End If
                End If
            Else
                If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                    If Trim(LigneQuantite) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< La quantité :" & Trim(LigneQuantite) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                    If Trim(LignePrixUnitaire) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le prix unitaire :" & Trim(LignePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                    If Trim(LignePrixUnitaireDevise) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le prix unitaire Devise :" & Trim(LignePrixUnitaireDevise) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
                If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                    If Trim(LigneTypePrixUnitaire) <> "" Then
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le prix unitaire TTC :" & Trim(LigneTypePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                If Trim(LigneQuantite) <> "" Then
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< La quantité :" & Trim(LigneQuantite) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                End If
            End If
            If Datagridaffiche.Columns.Contains("LignePrixUnitaire") = True Then
                If Trim(LignePrixUnitaire) <> "" Then
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire :" & Trim(LignePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                End If
            End If
            If Datagridaffiche.Columns.Contains("LignePrixUnitaireDevise") = True Then
                If Trim(LignePrixUnitaireDevise) <> "" Then
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire Devise :" & Trim(LignePrixUnitaireDevise) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                End If
            End If
            If Datagridaffiche.Columns.Contains("LigneTypePrixUnitaire") = True Then
                If Trim(LigneTypePrixUnitaire) <> "" Then
                    ExisteLecture = False
                    ErreurJrn.WriteLine("< Le prix unitaire TTC :" & Trim(LigneTypePrixUnitaire) & " ne doit pas être renseignée pour La Référence Article : " & Trim(LigneCodeArticle) & "vide - N°Pièce : " & Trim(EntetePieceInterne) & " >")
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains(IdentifiantArticle) = True Then
            If InStr(IdentifiantCommande, ",") <> 0 Then
                If Datagridaffiche.Columns.Contains(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) = True Then
                    If Datagridaffiche.Columns.Contains("LigneQuantite") = True Then
                        If Trim(LigneQuantite) <> "" Then
                            If EstNumeric(Trim(LigneQuantite), DecimalNomb, DecimalMone) = True Then
                                Dim OleAdaptaterLe As OleDbDataAdapter
                                Dim OleLeDataset As DataSet
                                Dim OledatableLe As DataTable
                                OleAdaptaterLe = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(IdentifiantArticle) & "' And Fichier='F_DOCLIGNE'", OleConnenection)
                                OleLeDataset = New DataSet
                                OleAdaptaterLe.Fill(OleLeDataset)
                                OledatableLe = OleLeDataset.Tables(0)
                                If OledatableLe.Rows.Count <> 0 Then
                                    Dim OleAdaptaterCa As OleDbDataAdapter
                                    Dim OleCaDataset As DataSet
                                    Dim OledatableCa As DataTable
                                    OleAdaptaterCa = New OleDbDataAdapter("select * from COLIMPMOUV WHERE Libelle='" & Trim(Strings.Left(IdentifiantCommande, InStr(IdentifiantCommande, ",") - 1)) & "' And Fichier='" & Trim(Strings.Right(IdentifiantCommande, Len(IdentifiantCommande) - InStr(IdentifiantCommande, ","))) & "'", OleConnenection)
                                    OleCaDataset = New DataSet
                                    OleAdaptaterCa.Fill(OleCaDataset)
                                    OledatableCa = OleCaDataset.Tables(0)
                                    If OledatableCa.Rows.Count <> 0 Then
                                        Try
                                            OleDocAdapter = New OleDbDataAdapter("Select  * From F_DOCENTETE WHERE " & OledatableCa.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceCommande), "'"), "''") & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                            OleDocDataset = New DataSet
                                            OleDocAdapter.Fill(OleDocDataset)
                                            OleDocDatable = OleDocDataset.Tables(0)
                                            If OleDocDatable.Rows.Count = 1 Then
                                                OleRecherAdapter = New OleDbDataAdapter("Select  * From F_DOCLIGNE WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Trim(Document.Fournisseur.CT_Num) & "'And DO_Type=12 And DO_Domaine=1", OleSocieteConnect)
                                                OleRecherDataset = New DataSet
                                                OleRecherAdapter.Fill(OleRecherDataset)
                                                OleRechDatable = OleRecherDataset.Tables(0)
                                                If OleRechDatable.Rows.Count = 0 Then
                                                    ErreurJrn.WriteLine("< L'Article Reliquat Recherché : " & Trim(PieceArticle) & " dans le document N° : " & Trim(PieceCommande) & " Code Tiers : " & Trim(Document.Fournisseur.CT_Num) & " n'existe pas dans Sage")
                                                Else
                                                    If OleRechDatable.Rows.Count > 1 Then
                                                        ExisteLecture = False
                                                        ErreurJrn.WriteLine("< L'Article Reliquat Recherché : " & Trim(PieceArticle) & " dans le document N° : " & Trim(PieceCommande) & " Code Tiers : " & Trim(Document.Fournisseur.CT_Num) & " existe plusieurs fois dans le document")
                                                    Else
                                                        If OleRechDatable.Rows.Count = 1 Then
                                                            Dim OleAdaptaterCa1 As OleDbDataAdapter
                                                            Dim OleCaDataset1 As DataSet
                                                            Dim OledatableCa1 As DataTable
                                                            OleAdaptaterCa1 = New OleDbDataAdapter("Select  * From cbSysLibre WHERE CB_File='F_DOCLIGNE' And CB_Name ='" & Trim(IdentifiantArticle) & "'", OleSocieteConnect)
                                                            OleCaDataset1 = New DataSet
                                                            OleAdaptaterCa1.Fill(OleCaDataset1)
                                                            OledatableCa1 = OleCaDataset1.Tables(0)
                                                            If OledatableCa1.Rows.Count <> 0 Then
                                                                Dim OleComDeletAna As OleDbCommand
                                                                Dim DeleteEcriture As String
                                                                Try
                                                                    DeleteEcriture = "SET ARITHABORT ON"
                                                                    OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                    OleComDeletAna.Connection = OleSocieteConnect
                                                                    OleComDeletAna.ExecuteNonQuery()
                                                                    DeleteEcriture = "UPDATE  F_DOCLIGNE SET " & Trim(IdentifiantArticle) & "='" & Join(Split(Trim(PieceArticle), "'"), "''") & "'  WHERE DO_Piece='" & Join(Split(Trim(OleDocDatable.Rows(0).Item("DO_Piece")), "'"), "''") & "' And  " & OledatableLe.Rows(0).Item("Champ") & " ='" & Join(Split(Trim(PieceArticle), "'"), "''") & "' And CT_Num='" & Trim(Document.Fournisseur.CT_Num) & "'And DO_Type=12 And DO_Domaine=1"
                                                                    OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                    OleComDeletAna.Connection = OleSocieteConnect
                                                                    OleComDeletAna.ExecuteNonQuery()
                                                                    DeleteEcriture = "SET ARITHABORT OFF"
                                                                    OleComDeletAna = New OleDbCommand(DeleteEcriture)
                                                                    OleComDeletAna.Connection = OleSocieteConnect
                                                                    OleComDeletAna.ExecuteNonQuery()
                                                                Catch ex As Exception
                                                                    ExisteLecture = False
                                                                    ErreurJrn.WriteLine("< Erreur de Mise à Jour de l'info Libre  : " & Trim(IdentifiantArticle) & " Pour identification de la ligne en Objet Métier >  Erreur système rattachée : " & ex.Message)
                                                                End Try
                                                            Else
                                                                exceptionTrouve = False
                                                                ErreurJrn.WriteLine("< Le Champ où est adressé les valeurs de  N°Ligne  : " & Trim(IdentifiantArticle) & " n'est pas une information libre dans Sage")
                                                            End If
                                                            If OleRechDatable.Rows(0).Item("DO_Type") = 11 Then
                                                                If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                    ExisteLecture = False
                                                                    ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                End If
                                                            Else
                                                                If OleRechDatable.Rows(0).Item("DO_Type") = 12 Then
                                                                    If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                        ExisteLecture = False
                                                                        ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                    End If
                                                                Else
                                                                    If OleRechDatable.Rows(0).Item("DO_Type") = 14 Then
                                                                        If (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))) < 0 Then
                                                                            ExisteLecture = False
                                                                            ErreurJrn.WriteLine("N°Article Reliquat  :" & OleRechDatable.Rows(0).Item("AR_Ref") & " N°Pièce :" & OleRechDatable.Rows(0).Item("DO_Piece") & "Le reliquat ne doit pas être négatif :" & (OleRechDatable.Rows(0).Item("DL_Qte") - CDbl(RenvoiMontant(Trim(LigneQuantite), FormatQte, DecimalNomb, DecimalMone))))
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                If OleDocDatable.Rows.Count > 1 Then
                                                    ErreurJrn.WriteLine("< Le document Reliquat  existe plusieurs fois dans Sage : " & Trim(PieceCommande))
                                                    ExisteLecture = False
                                                Else
                                                    If OleDocDatable.Rows.Count = 0 Then
                                                        ErreurJrn.WriteLine("< Le document Reliquat  n'existe pas dans Sage : " & Trim(PieceCommande))
                                                    End If
                                                End If
                                            End If
                                        Catch ex As Exception
                                            ExisteLecture = False
                                            ErreurJrn.WriteLine("< Erreur de Recherche de l'Article Reliquat : " & Trim(PieceArticle) & " - N°Pièce document du reliquat : " & Trim(PieceCommande))
                                        End Try
                                    Else
                                        ExisteLecture = False
                                        ErreurJrn.WriteLine("< Erreur de Recherche du champ de critère en Ligne de document Colonne : " & Trim(IdentifiantCommande))
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Erreur de Recherche du champ de critère en Ligne de document Colonne : " & Trim(IdentifiantArticle))
                                End If
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< La Quantité : " & Trim(LigneQuantite) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                            End If
                        End If
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneTypeRemise1") = True Then
            If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                If Trim(LigneTauxRemise1) <> "" Then
                    If Trim(LigneTypeRemise1) = "1" Then
                        If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                        End If
                    Else
                        If Trim(LigneTypeRemise1) = "2" Then
                            If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                            End If
                        Else
                            If Trim(LigneTypeRemise1) = "0" Then
                                If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneTauxRemise1") = True Then
                If Trim(LigneTauxRemise1) <> "" Then
                    If EstNumeric(Trim(LigneTauxRemise1), DecimalNomb, DecimalMone) = True Then
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le taux de Remise d'indice 1 : " & Trim(LigneTauxRemise1) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                    End If
                End If
            End If
        End If

        If Datagridaffiche.Columns.Contains("LigneTypeRemise2") = True Then
            If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                If Trim(LigneTauxRemise2) <> "" Then
                    If Trim(LigneTypeRemise2) = "1" Then
                        If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                        End If
                        If Trim(LigneTypeRemise2) = "2" Then
                            If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                            End If
                        Else
                            If Trim(LigneTypeRemise2) = "0" Then
                                If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneTauxRemise2") = True Then
                If Trim(LigneTauxRemise2) <> "" Then
                    If EstNumeric(Trim(LigneTauxRemise2), DecimalNomb, DecimalMone) = True Then
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le taux de Remise d'indice 2 : " & Trim(LigneTauxRemise2) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                    End If
                End If
            End If
        End If
        If Datagridaffiche.Columns.Contains("LigneTypeRemise3") = True Then
            If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                If Trim(LigneTauxRemise3) <> "" Then
                    If Trim(LigneTypeRemise3) = "1" Then
                        If EstNumeric(Trim(LigneTypeRemise3), DecimalNomb, DecimalMone) = True Then
                        Else
                            ExisteLecture = False
                            ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                        End If
                    Else
                        If Trim(LigneTypeRemise3) = "2" Then
                            If EstNumeric(Trim(LigneTypeRemise3), DecimalNomb, DecimalMone) = True Then
                            Else
                                ExisteLecture = False
                                ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                            End If
                        Else
                            If Trim(LigneTypeRemise3) = "0" Then
                                If EstNumeric(Trim(LigneTypeRemise3), DecimalNomb, DecimalMone) = True Then
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")

                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Else
            If Datagridaffiche.Columns.Contains("LigneTauxRemise3") = True Then
                If Trim(LigneTauxRemise3) <> "" Then
                    If EstNumeric(Trim(LigneTypeRemise3), DecimalNomb, DecimalMone) = True Then

                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine("< Le taux de Remise d'indice 3 : " & Trim(LigneTauxRemise3) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne) & " n'est pas numérique >")
                    End If
                End If
            End If
        End If
        'Traitement des Infos Libres
        Try
            If infoLigne.Count > 0 Then
                While infoLigne.Count <> 0
                    OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoLigne.Item(0)).Name) & "' And InfoLigne=True", OleConnenection)
                    OleDeleteDataset = New DataSet
                    OleAdaptaterDelete.Fill(OleDeleteDataset)
                    OledatableDelete = OleDeleteDataset.Tables(0)
                    If OledatableDelete.Rows.Count <> 0 Then
                        'L'info Libre Parametrée par l'utilisateur existe dans Sage
                        If IsNothing(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) = False Then
                            If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCLIGNE' and CB_Name ='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    'Texte
                                    If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Table
                                    If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Montant
                                    If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Valeur
                                    If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoLigne.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If

                                    'Date Court
                                    If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Date Longue
                                    If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                        If Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Ligne=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoLigne.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoLigne.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Ligne de Document :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                    ExisteLecture = False
                                End If
                            End If
                        Else
                            'nothing
                        End If
                    Else
                        ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Ligne de Document :" & Datagridaffiche.Columns(infoLigne.Item(0)).Name & "  Il est inexistant dans la table de Paramétrage")
                        ExisteLecture = False
                    End If
                    'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                    infoLigne.RemoveAt(0)
                End While
            End If
        Catch ex As Exception
            exceptionTrouve = True
            ExisteLecture = False
            ErreurJrn.WriteLine(" Erreur de Création de L'information Libre Ligne Document : " & ex.Message & ", vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données")
        End Try
        'Traitement des Infos Libres
        Try
            If infoListe.Count > 0 Then
                While infoListe.Count <> 0
                    OleAdaptaterDelete = New OleDbDataAdapter("select * From COLIMPMOUV where Libelle='" & Trim(Datagridaffiche.Columns(infoListe.Item(0)).Name) & "' And Libre=True", OleConnenection)
                    OleDeleteDataset = New DataSet
                    OleAdaptaterDelete.Fill(OleDeleteDataset)
                    OledatableDelete = OleDeleteDataset.Tables(0)
                    If OledatableDelete.Rows.Count <> 0 Then
                        'L'info Libre Parametrée par l'utilisateur existe dans Sage
                        If IsNothing(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) = False Then
                            If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                statistAdap = New OleDbDataAdapter("select * from cbSysLibre where CB_File='F_DOCENTETE' and CB_Name ='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "'", OleSocieteConnect)
                                statistDs = New DataSet
                                statistAdap.Fill(statistDs)
                                statistTab = statistDs.Tables(0)
                                If statistTab.Rows.Count <> 0 Then
                                    'Texte
                                    If statistTab.Rows(0).Item("CB_Type") = 9 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") >= Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur de l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Table
                                    If statistTab.Rows(0).Item("CB_Type") = 22 Then
                                        OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                        OleRecherDataset = New DataSet
                                        OleRecherAdapter.Fill(OleRecherDataset)
                                        OleRechDatable = OleRecherDataset.Tables(0)
                                        If OleRechDatable.Rows.Count <> 0 Then
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(OleRechDatable.Rows(0).Item("Correspond"))) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        Else
                                            If statistTab.Rows(0).Item("CB_Len") > Strings.Len(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value)) Then

                                            Else
                                                ExisteLecture = False
                                                ErreurJrn.WriteLine("La Longueur (21) de l'info libre de type table : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " est inférieur au valeur adressée: " & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                            End If
                                        End If
                                    End If
                                    'Montant
                                    If statistTab.Rows(0).Item("CB_Type") = 20 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Valeur
                                    If statistTab.Rows(0).Item("CB_Type") = 7 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If EstNumeric(Trim(OleRechDatable.Rows(0).Item("Correspond")), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(OleRechDatable.Rows(0).Item("Correspond")) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            Else
                                                If EstNumeric(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), DecimalNomb, DecimalMone) = True Then

                                                Else
                                                    ExisteLecture = False
                                                    ErreurJrn.WriteLine("La valeur entrée : " & Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) & "doit être de type numérique pour l'info libre : " & Datagridaffiche.Columns(infoListe.Item(0)).Name & " - N°Pièce du Fichier : " & Trim(EntetePieceInterne))
                                                End If
                                            End If
                                        End If
                                    End If

                                    'Date Court
                                    If statistTab.Rows(0).Item("CB_Type") = 3 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Date Longue
                                    If statistTab.Rows(0).Item("CB_Type") = 14 Then
                                        If Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value) <> "" Then
                                            OleRecherAdapter = New OleDbDataAdapter("select * from TRANSCODAGEIMPORT where Concerne='" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "' and Valeurlue ='" & Join(Split(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), "'"), "''") & "' And Menu='Importation' And IDDossier=" & TraitementID & "  And Categorie='Document' And Entete=True", OleConnenection)
                                            OleRecherDataset = New DataSet
                                            OleRecherAdapter.Fill(OleRecherDataset)
                                            OleRechDatable = OleRecherDataset.Tables(0)
                                            If OleRechDatable.Rows.Count <> 0 Then
                                                If Verificatdate(Trim(OleRechDatable.Rows(0).Item("Correspond")), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then

                                                Else
                                                    ExisteLecture = False
                                                End If
                                            Else
                                                If Verificatdate(Trim(Datagridaffiche.Item(infoListe.Item(0), numLigne).Value), FormatDatefichier, Datagridaffiche.Columns(infoListe.Item(0)).Name) = True Then
                                                Else
                                                    ExisteLecture = False
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    ExisteLecture = False
                                    ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Entête de Document :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table CbsysLibre de Sage")
                                End If
                            End If
                        Else
                            'nothing
                        End If
                    Else
                        ExisteLecture = False
                        ErreurJrn.WriteLine(" Impossible de traiter l'information libre en Entête de Document :" & Datagridaffiche.Columns(infoListe.Item(0)).Name & "  Il est inexistant dans la table de Paramétrage")
                    End If
                    'L'info Libre Parametrée par l'utilisateur n'existe pas dans Sage
                    infoListe.RemoveAt(0)
                End While
            End If
        Catch ex As Exception
            ExisteLecture = False
            exceptionTrouve = True
            ErreurJrn.WriteLine(" Erreur de Création de L'information Libre Entête de Document : " & ex.Message & ", vérifiez la longueur de la chaine avec celle paramétrée/ ou la cohérence des données")
        End Try
    End Sub
    Private Function LirePieceAuto(ByVal CheminFichier) As String
        Dim xdoc As XmlDocument
        Dim racine As XmlElement
        Dim nodelist As XmlNodeList
        Dim PieceAuto As Object = Nothing
        Dim i As Integer
        Try
            If File.Exists(CheminFichier) = True Then
                Dim FileXml As New XmlTextReader(Trim(CheminFichier))
                xdoc = New XmlDocument
                xdoc.Load(Trim(CheminFichier))
                racine = xdoc.DocumentElement
                nodelist = racine.ChildNodes
                For i = 0 To nodelist.Count - 1
                    If Trim(nodelist.ItemOf(i).Name) = "PieceAuto" Then
                        PieceAuto = nodelist.ItemOf(i).InnerText
                        Exit For
                    End If
                Next i
                FileXml.Close()
            Else
                MsgBox("Nom du Format inexistant!", MsgBoxStyle.Information, "Format d'integration")
            End If
        Catch ex As Exception

        End Try
        LirePieceAuto = PieceAuto
    End Function
    Private Function LirePieceCommande(ByRef ScheminFileFormat As String, ByRef Lireformatype As String) As Object
        Dim NomColonne As String
        Dim NomEntete As String
        Dim PosLeft As Integer
        Dim poslongueur, PieceCmde, LigneArticle As String
        Dim Defaut, Piece, SageFichier As String
        Dim ValeurDefaut, Infolibre As String
        Result = ""
        Try
            If Trim(ScheminFileFormat) <> "" Then
                If File.Exists(ScheminFileFormat) = True Then
                    Dim FileXml As New XmlTextReader(Trim(ScheminFileFormat))
                    While (FileXml.Read())
                        If FileXml.LocalName = "ColUse" Then
                            NomColonne = FileXml.ReadString

                            FileXml.Read()
                            NomEntete = FileXml.ReadString

                            FileXml.Read()
                            PosLeft = FileXml.ReadString

                            If Trim(Lireformatype) = "Excel" Then
                            Else
                                If Trim(Lireformatype) = "Longueur Fixe" Then
                                    FileXml.Read()
                                    poslongueur = FileXml.ReadString
                                End If
                            End If

                            FileXml.Read()
                            Infolibre = FileXml.ReadString

                            FileXml.Read()
                            SageFichier = FileXml.ReadString

                            FileXml.Read()
                            Piece = FileXml.ReadString

                            FileXml.Read()
                            PieceCmde = FileXml.ReadString

                            FileXml.Read()
                            LigneArticle = FileXml.ReadString

                            FileXml.Read()
                            Defaut = FileXml.ReadString

                            FileXml.Read()
                            ValeurDefaut = FileXml.ReadString
                            If Trim(PieceCmde) = "oui" Then
                                Result = NomEntete & "," & SageFichier
                                Exit While
                            End If
                        End If
                    End While
                    FileXml.Close()
                End If
            End If
        Catch ex As Exception
        End Try
        Return Result
    End Function
    Private Function LireLigneArticle(ByRef ScheminFileFormat As String, ByRef Lireformatype As String) As Object
        Dim NomColonne As String
        Dim NomEntete As String
        Dim PosLeft As Integer
        Dim poslongueur, PieceCmde, LigneArticle As String
        Dim Defaut, Piece, SageFichier As String
        Dim ValeurDefaut, Infolibre As String
        Result = ""
        Try
            If Trim(ScheminFileFormat) <> "" Then
                If File.Exists(ScheminFileFormat) = True Then
                    Dim FileXml As New XmlTextReader(Trim(ScheminFileFormat))
                    While (FileXml.Read())
                        If FileXml.LocalName = "ColUse" Then
                            NomColonne = FileXml.ReadString

                            FileXml.Read()
                            NomEntete = FileXml.ReadString

                            FileXml.Read()
                            PosLeft = FileXml.ReadString

                            If Trim(Lireformatype) = "Excel" Then
                            Else
                                If Trim(Lireformatype) = "Longueur Fixe" Then
                                    FileXml.Read()
                                    poslongueur = FileXml.ReadString
                                End If
                            End If

                            FileXml.Read()
                            Infolibre = FileXml.ReadString

                            FileXml.Read()
                            SageFichier = FileXml.ReadString

                            FileXml.Read()
                            Piece = FileXml.ReadString

                            FileXml.Read()
                            PieceCmde = FileXml.ReadString

                            FileXml.Read()
                            LigneArticle = FileXml.ReadString

                            FileXml.Read()
                            Defaut = FileXml.ReadString

                            FileXml.Read()
                            ValeurDefaut = FileXml.ReadString
                            If Trim(LigneArticle) = "oui" Then
                                Result = NomEntete
                                Exit While
                            End If
                        End If
                    End While
                    FileXml.Close()
                End If
            End If
        Catch ex As Exception
        End Try
        Return Result
    End Function
    Public Sub BT_integrer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BT_integrer.Click
        Dim i As Integer
        Dim ArtAdaptater As OleDbDataAdapter
        Dim ArtDataset As DataSet
        Dim Artdatatable As DataTable
        Dim CptaAdaptater As OleDbDataAdapter
        Dim CptaDataset As DataSet
        Dim Cptadatatable As DataTable
        Try
            If DataListeIntegrer.RowCount > 0 Then
                If Directory.Exists(Pathsfilejournal) Then
                    ErreurJrn = File.AppendText(Pathsfilejournal & "IMPORT_DOCUMENT_ACHAT" & Format(DateAndTime.Year(Now), "0000") & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "_" & "" & Format(DateAndTime.Hour(Now), "00") & "_" & Format(DateAndTime.Minute(Now), "00") & "_" & Format(DateAndTime.Second(Now), "00") & ".txt")
                Else
                    Pathsfilejournal = "C:\"
                    ErreurJrn = File.AppendText(Pathsfilejournal & "IMPORT_DOCUMENT_ACHAT" & Format(DateAndTime.Year(Now), "0000") & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "_" & "" & Format(DateAndTime.Hour(Now), "00") & "_" & Format(DateAndTime.Minute(Now), "00") & "_" & Format(DateAndTime.Second(Now), "00") & ".txt")
                End If
                For i = 0 To DataListeIntegrer.RowCount - 1
                    If DataListeIntegrer.Rows(i).Cells("Valider").Value = True Then
                        TraitementID = CInt(DataListeIntegrer.Rows(i).Cells("ID").Value)
                        Me.Cursor = Cursors.WaitCursor
                        exceptionTrouve = False
                        ExisteLecture = True
                        EntetePiecePrecedent = Nothing
                        ListePiece = New List(Of String)
                        If Trim(DataListeIntegrer.Rows(i).Cells("Mode").Value) = "Création" Then
                            'Format Creation 
                            If File.Exists(DataListeIntegrer.Rows(i).Cells("Chemin").Value) = True And File.Exists(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) = True Then
                                If Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) <> "" And Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) <> "" Then
                                    If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Délimité" Or Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Tabulation" Or Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Pipe" Then
                                        If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Tabulation" Then
                                            sColumnsSepar = ControlChars.Tab
                                        Else
                                            If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Pipe" Then
                                                sColumnsSepar = "|"
                                            Else
                                                sColumnsSepar = ";"
                                            End If
                                        End If
                                        ArtAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & "' and nomtype='COMMERCIAL'", OleConnenection)
                                        ArtDataset = New DataSet
                                        ArtAdaptater.Fill(ArtDataset)
                                        Artdatatable = ArtDataset.Tables(0)
                                        If Artdatatable.Rows.Count <> 0 Then
                                            CptaAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & "' and nomtype='COMPTABILITE'", OleConnenection)
                                            CptaDataset = New DataSet
                                            CptaAdaptater.Fill(CptaDataset)
                                            Cptadatatable = CptaDataset.Tables(0)
                                            If Cptadatatable.Rows.Count <> 0 Then
                                                Dim Dataname() As String = Split(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "\")
                                                If SocieteConnected(Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1), Trim(Cptadatatable.Rows(0).Item("MotPas").ToString), Trim(Cptadatatable.Rows(0).Item("NomUser")), LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL")) = True Then
                                                    FermeBaseCial(BaseCial)
                                                    If OuvreBaseCial(BaseCial, BaseCpta, Trim(Artdatatable.Rows(0).Item("Chemin1")), Trim(Cptadatatable.Rows(0).Item("Chemin1")), Trim(Artdatatable.Rows(0).Item("UserSage")), Trim(Artdatatable.Rows(0).Item("PasseSage").ToString), Trim(Cptadatatable.Rows(0).Item("UserSage")), Trim(Cptadatatable.Rows(0).Item("PasseSage"))) = True Then
                                                        ErreurJrn.WriteLine("Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Reussie")
                                                        ErreurJrn.WriteLine("")
                                                        ErreurJrn.WriteLine("Début de traitement du fichier : " & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)) & " Date de traitement : " & DateTime.Today)
                                                        ErreurJrn.WriteLine("")
                                                        Label5.Refresh()
                                                        If Verification_Integration_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", sColumnsSepar, RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value), LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value)) = True Then
                                                            Label5.Text = " Integration En Cours..."
                                                            Integration_Du_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", sColumnsSepar, RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value), LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                            RecuperationEnregistrement(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", sColumnsSepar, ListePiece, LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                            If DataListeIntegrer.Rows(i).Cells("Cible").Value = "FTP" Then
                                                                Dim FtpAdaptater As OleDbDataAdapter
                                                                Dim FtpDataset As DataSet
                                                                Dim Ftpdatatable As DataTable
                                                                FtpAdaptater = New OleDbDataAdapter("select * from  SCHEMAS_IMPMOUV WHERE Cible='FTP' And IDDossier=" & CInt(DataListeIntegrer.Rows(i).Cells("ID").Value) & "", OleConnenection)
                                                                FtpDataset = New DataSet
                                                                FtpAdaptater.Fill(FtpDataset)
                                                                Ftpdatatable = FtpDataset.Tables(0)
                                                                If Ftpdatatable.Rows.Count <> 0 Then
                                                                    If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                        If exceptionTrouve = True Then
                                                                            'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                            File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                            Label5.Refresh()
                                                                            Label5.Text = "Integration Terminée!"
                                                                        Else
                                                                            'Deplacement du fichier vers les repertoire de sauvegarde
                                                                            effaceFichier("FTP://" & RetourneServeurFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & RetourneDirectoryFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value), RetourneUserFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), RetournePassWordFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), ErreurJrn)
                                                                            File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                            Label5.Refresh()
                                                                            Label5.Text = "Integration Terminée! Suppression des Fichiers exécutée..."
                                                                        End If
                                                                    Else
                                                                        File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                        Label5.Refresh()
                                                                        Label5.Text = "Integration Terminée!"
                                                                    End If
                                                                End If
                                                            Else
                                                                If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                    If exceptionTrouve = True Then
                                                                        'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                        Label5.Refresh()
                                                                        Label5.Text = "Integration Terminée!"
                                                                    Else
                                                                        Dim Separateur As Char = "_"
                                                                        'Deplacement du fichier vers les repertoire de sauvegarde 
                                                                        Dim Lecture As String = System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                        Lecture = Lecture.Split(Separateur)(1)
                                                                        File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                        File.Move(PathsFileFormatArticle & Lecture, PathsFileMECALUX & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & Lecture) ' System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                        Label5.Refresh()
                                                                        Label5.Text = "Integration Terminée! Suppression des Fichiers exécutée..."
                                                                    End If
                                                                Else
                                                                    Label5.Refresh()
                                                                    Label5.Text = "Integration Terminée!"
                                                                End If
                                                            End If
                                                        End If
                                                        DataListeIntegrer.Rows(i).Cells("Valider").Value = False
                                                    Else
                                                        ErreurJrn.WriteLine("Connexion à la Société - Base Commerciale :" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " -Base Comptable :" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                        Label5.Text = "Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec"
                                                    End If
                                                Else
                                                    ErreurJrn.WriteLine("Echec de Connexion à SQL de base de données :" & Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1) & " Serveur : " & LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL"))
                                                    Label5.Text = "Echec de Connexion SQL à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec de traitement"
                                                End If
                                            Else
                                                ErreurJrn.WriteLine("Aucune Base Comptable Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                            End If
                                        Else
                                            ErreurJrn.WriteLine("Aucune Base Commerciale Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Echec de traitement")
                                        End If

                                    Else
                                        If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Excel" Then
                                            If Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value) <> "" Then
                                                If OleExcelConnected.State = ConnectionState.Open Then
                                                    OleExcelConnected.Close()
                                                End If
                                                If LoginAuFichierExcel(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)) = True Then
                                                    ArtAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & "' and nomtype='COMMERCIAL'", OleConnenection)
                                                    ArtDataset = New DataSet
                                                    ArtAdaptater.Fill(ArtDataset)
                                                    Artdatatable = ArtDataset.Tables(0)
                                                    If Artdatatable.Rows.Count <> 0 Then
                                                        CptaAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & "' and nomtype='COMPTABILITE'", OleConnenection)
                                                        CptaDataset = New DataSet
                                                        CptaAdaptater.Fill(CptaDataset)
                                                        Cptadatatable = CptaDataset.Tables(0)
                                                        If Cptadatatable.Rows.Count <> 0 Then
                                                            Dim Dataname() As String = Split(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "\")
                                                            If SocieteConnected(Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1), Trim(Cptadatatable.Rows(0).Item("MotPas").ToString), Trim(Cptadatatable.Rows(0).Item("NomUser")), LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL")) = True Then
                                                                FermeBaseCial(BaseCial)
                                                                If OuvreBaseCial(BaseCial, BaseCpta, Trim(Artdatatable.Rows(0).Item("Chemin1")), Trim(Cptadatatable.Rows(0).Item("Chemin1")), Trim(Artdatatable.Rows(0).Item("UserSage")), Trim(Artdatatable.Rows(0).Item("PasseSage").ToString), Trim(Cptadatatable.Rows(0).Item("UserSage")), Trim(Cptadatatable.Rows(0).Item("PasseSage"))) = True Then
                                                                    ErreurJrn.WriteLine("Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Reussie")
                                                                    ErreurJrn.WriteLine("")
                                                                    ErreurJrn.WriteLine("Début de traitement du fichier : " & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                    ErreurJrn.WriteLine("")
                                                                    Label5.Refresh()
                                                                    If Verification_Integration_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value), "", RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value), LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value)) = True Then
                                                                        Label5.Text = "Integration En Cours..."
                                                                        Integration_Du_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value), "", RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value), LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                        RecuperationEnregistrement(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value), "", ListePiece, LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                        If DataListeIntegrer.Rows(i).Cells("Cible").Value = "FTP" Then
                                                                            Dim FtpAdaptater As OleDbDataAdapter
                                                                            Dim FtpDataset As DataSet
                                                                            Dim Ftpdatatable As DataTable
                                                                            FtpAdaptater = New OleDbDataAdapter("select * from  SCHEMAS_IMPMOUV WHERE Cible='FTP' And IDDossier=" & CInt(DataListeIntegrer.Rows(i).Cells("ID").Value) & "", OleConnenection)
                                                                            FtpDataset = New DataSet
                                                                            FtpAdaptater.Fill(FtpDataset)
                                                                            Ftpdatatable = FtpDataset.Tables(0)
                                                                            If Ftpdatatable.Rows.Count <> 0 Then
                                                                                If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                    If exceptionTrouve = True Then
                                                                                        'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                        File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Integration Terminée!"
                                                                                    Else
                                                                                        'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                        effaceFichier("FTP://" & RetourneServeurFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & RetourneDirectoryFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value), RetourneUserFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), RetournePassWordFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), ErreurJrn)
                                                                                        File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Integration Terminée! Suppression des Fichiers exécutée..."
                                                                                    End If
                                                                                Else
                                                                                    File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Integration Terminée!"
                                                                                End If
                                                                            End If
                                                                        Else
                                                                            If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                If exceptionTrouve = True Then
                                                                                    'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Integration Terminée!"
                                                                                Else
                                                                                    'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                    File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Integration Terminée! Suppression des Fichiers exécutée..."
                                                                                End If
                                                                            Else
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Integration Terminée!"
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    If OleExcelConnected.State = ConnectionState.Open Then
                                                                        OleExcelConnected.Close()
                                                                    End If
                                                                    DataListeIntegrer.Rows(i).Cells("Valider").Value = False
                                                                Else
                                                                    ErreurJrn.WriteLine("Connexion à la Société - Base Commerciale :" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " -Base Comptable :" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec")
                                                                    Label5.Text = "Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec"
                                                                End If
                                                            Else
                                                                ErreurJrn.WriteLine("Echec de Connexion à SQL de base de données :" & Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1) & " Serveur : " & LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL"))
                                                                Label5.Text = "Echec de Connexion SQL à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec de traitement"
                                                            End If
                                                        Else
                                                            ErreurJrn.WriteLine("Aucune Base Comptable Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                        End If
                                                    Else
                                                        ErreurJrn.WriteLine("Aucune Base Commerciale Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Echec de traitement")
                                                    End If

                                                Else
                                                    Label5.Text = "Echec de Connexion au fichier Excel :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement"
                                                    ErreurJrn.WriteLine("Echec de Connexion au fichier Excel :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement")
                                                End If
                                            Else
                                                Label5.Text = "Aucune Feuille Excel paramétrée pour le fichier :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement"
                                                ErreurJrn.WriteLine("Aucune Feuille Excel paramétrée pour le fichier :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement")
                                            End If
                                        Else
                                            If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Longueur Fixe" Then
                                                ArtAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & "' and nomtype='COMMERCIAL'", OleConnenection)
                                                ArtDataset = New DataSet
                                                ArtAdaptater.Fill(ArtDataset)
                                                Artdatatable = ArtDataset.Tables(0)
                                                If Artdatatable.Rows.Count <> 0 Then
                                                    CptaAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & "' and nomtype='COMPTABILITE'", OleConnenection)
                                                    CptaDataset = New DataSet
                                                    CptaAdaptater.Fill(CptaDataset)
                                                    Cptadatatable = CptaDataset.Tables(0)
                                                    If Cptadatatable.Rows.Count <> 0 Then
                                                        Dim Dataname() As String = Split(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "\")
                                                        If SocieteConnected(Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1), Trim(Cptadatatable.Rows(0).Item("MotPas").ToString), Trim(Cptadatatable.Rows(0).Item("NomUser")), LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL")) = True Then
                                                            FermeBaseCial(BaseCial)
                                                            If OuvreBaseCial(BaseCial, BaseCpta, Trim(Artdatatable.Rows(0).Item("Chemin1")), Trim(Cptadatatable.Rows(0).Item("Chemin1")), Trim(Artdatatable.Rows(0).Item("UserSage")), Trim(Artdatatable.Rows(0).Item("PasseSage").ToString), Trim(Cptadatatable.Rows(0).Item("UserSage")), Trim(Cptadatatable.Rows(0).Item("PasseSage"))) = True Then
                                                                ErreurJrn.WriteLine("Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Reussie")
                                                                Label5.Refresh()
                                                                ErreurJrn.WriteLine("")
                                                                ErreurJrn.WriteLine("Début de traitement du fichier : " & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                ErreurJrn.WriteLine("")
                                                                Label5.Refresh()
                                                                If Verification_Integration_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", "", RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value), LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value)) = True Then
                                                                    Label5.Text = "Integration En Cours..."
                                                                    Integration_Du_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", "", RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value), LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                    RecuperationEnregistrement(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", "", ListePiece, LirePieceCreation(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), LirePieceAuto(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                    If DataListeIntegrer.Rows(i).Cells("Cible").Value = "FTP" Then
                                                                        Dim FtpAdaptater As OleDbDataAdapter
                                                                        Dim FtpDataset As DataSet
                                                                        Dim Ftpdatatable As DataTable
                                                                        FtpAdaptater = New OleDbDataAdapter("select * from  SCHEMAS_IMPMOUV WHERE Cible='FTP' And IDDossier=" & CInt(DataListeIntegrer.Rows(i).Cells("ID").Value) & "", OleConnenection)
                                                                        FtpDataset = New DataSet
                                                                        FtpAdaptater.Fill(FtpDataset)
                                                                        Ftpdatatable = FtpDataset.Tables(0)
                                                                        If Ftpdatatable.Rows.Count <> 0 Then
                                                                            If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                If exceptionTrouve = True Then
                                                                                    'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                    File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Integration Terminée!"
                                                                                Else
                                                                                    'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                    effaceFichier("FTP://" & RetourneServeurFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & RetourneDirectoryFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value), RetourneUserFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), RetournePassWordFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), ErreurJrn)
                                                                                    File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Integration Terminée! Suppression des Fichiers exécutée..."
                                                                                End If
                                                                            Else
                                                                                File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Integration Terminée!"
                                                                            End If
                                                                        End If
                                                                    Else
                                                                        If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                            If exceptionTrouve = True Then
                                                                                'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Integration Terminée!"
                                                                            Else
                                                                                'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Integration Terminée! Suppression des Fichiers exécutée..."
                                                                            End If
                                                                        Else
                                                                            Label5.Refresh()
                                                                            Label5.Text = "Integration Terminée!"
                                                                        End If
                                                                    End If
                                                                End If
                                                                DataListeIntegrer.Rows(i).Cells("Valider").Value = False
                                                            Else
                                                                ErreurJrn.WriteLine("Connexion à la Société - Base Commerciale :" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " -Base Comptable :" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec")
                                                                Label5.Text = "Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec"
                                                            End If
                                                        Else
                                                            ErreurJrn.WriteLine("Echec de Connexion à SQL de base de données :" & Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1) & " Serveur : " & LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL"))
                                                            Label5.Text = "Echec de Connexion SQL à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec de traitement"
                                                        End If
                                                    Else
                                                        ErreurJrn.WriteLine("Aucune Base Comptable Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                    End If
                                                Else
                                                    ErreurJrn.WriteLine("Aucune Base Commerciale Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Echec de traitement")
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            Else
                                ErreurJrn.WriteLine("Chemin du fichier inexistant : " & DataListeIntegrer.Rows(i).Cells("Chemin").Value)
                            End If
                        Else
                            If Trim(DataListeIntegrer.Rows(i).Cells("Mode").Value) = "Modification" Then
                                'Format Modification
                                If File.Exists(DataListeIntegrer.Rows(i).Cells("Chemin").Value) = True And File.Exists(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) = True Then
                                    If Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) <> "" And Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) <> "" Then
                                        If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Délimité" Or Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Tabulation" Or Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Pipe" Then
                                            If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Tabulation" Then
                                                sColumnsSepar = ControlChars.Tab
                                            Else
                                                If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Pipe" Then
                                                    sColumnsSepar = "|"
                                                Else
                                                    sColumnsSepar = ";"
                                                End If
                                            End If
                                            ArtAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & "' and nomtype='COMMERCIAL'", OleConnenection)
                                            ArtDataset = New DataSet
                                            ArtAdaptater.Fill(ArtDataset)
                                            Artdatatable = ArtDataset.Tables(0)
                                            If Artdatatable.Rows.Count <> 0 Then
                                                CptaAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & "' and nomtype='COMPTABILITE'", OleConnenection)
                                                CptaDataset = New DataSet
                                                CptaAdaptater.Fill(CptaDataset)
                                                Cptadatatable = CptaDataset.Tables(0)
                                                If Cptadatatable.Rows.Count <> 0 Then
                                                    Dim Dataname() As String = Split(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "\")
                                                    If SocieteConnected(Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1), Trim(Cptadatatable.Rows(0).Item("MotPas").ToString), Trim(Cptadatatable.Rows(0).Item("NomUser")), LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL")) = True Then
                                                        FermeBaseCial(BaseCial)
                                                        If OuvreBaseCial(BaseCial, BaseCpta, Trim(Artdatatable.Rows(0).Item("Chemin1")), Trim(Cptadatatable.Rows(0).Item("Chemin1")), Trim(Artdatatable.Rows(0).Item("UserSage")), Trim(Artdatatable.Rows(0).Item("PasseSage").ToString), Trim(Cptadatatable.Rows(0).Item("UserSage")), Trim(Cptadatatable.Rows(0).Item("PasseSage"))) = True Then
                                                            ErreurJrn.WriteLine("Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Reussie")
                                                            ErreurJrn.WriteLine("")
                                                            ErreurJrn.WriteLine("Début de traitement du fichier : " & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                            ErreurJrn.WriteLine("")
                                                            Label5.Refresh()
                                                            If Modification_Verification_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", sColumnsSepar, LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value)) = True Then
                                                                Label5.Text = " Modification En Cours..."
                                                                Modification_Integration_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", sColumnsSepar, LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                RecuperationEnregistrementModifié(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", sColumnsSepar, ListePiece, LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))))
                                                                If DataListeIntegrer.Rows(i).Cells("Cible").Value = "FTP" Then
                                                                    Dim FtpAdaptater As OleDbDataAdapter
                                                                    Dim FtpDataset As DataSet
                                                                    Dim Ftpdatatable As DataTable
                                                                    FtpAdaptater = New OleDbDataAdapter("select * from  SCHEMAS_IMPMOUV WHERE Cible='FTP' And IDDossier=" & CInt(DataListeIntegrer.Rows(i).Cells("ID").Value) & "", OleConnenection)
                                                                    FtpDataset = New DataSet
                                                                    FtpAdaptater.Fill(FtpDataset)
                                                                    Ftpdatatable = FtpDataset.Tables(0)
                                                                    If Ftpdatatable.Rows.Count <> 0 Then
                                                                        If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                            If exceptionTrouve = True Then
                                                                                'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Modification Terminée!"
                                                                            Else
                                                                                'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                effaceFichier("FTP://" & RetourneServeurFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & RetourneDirectoryFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value), RetourneUserFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), RetournePassWordFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), ErreurJrn)
                                                                                File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Modification Terminée! Suppression des Fichiers exécutée..."
                                                                            End If
                                                                        Else
                                                                            File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                            Label5.Refresh()
                                                                            Label5.Text = "Modification Terminée!"
                                                                        End If
                                                                    End If
                                                                Else
                                                                    If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                        If exceptionTrouve = True Then
                                                                            'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                            Label5.Refresh()
                                                                            Label5.Text = "Modification Terminée!"
                                                                        Else
                                                                            'Deplacement du fichier vers les repertoire de sauvegarde
                                                                            File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                            Label5.Refresh()
                                                                            Label5.Text = "Modification Terminée! Suppression des Fichiers exécutée..."
                                                                        End If
                                                                    Else
                                                                        Label5.Refresh()
                                                                        Label5.Text = "Modification Terminée!"
                                                                    End If
                                                                End If
                                                            End If
                                                            DataListeIntegrer.Rows(i).Cells("Valider").Value = False
                                                        Else
                                                            ErreurJrn.WriteLine("Connexion à la Société - Base Commerciale :" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " -Base Comptable :" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                            Label5.Text = "Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec"
                                                        End If
                                                    Else
                                                        ErreurJrn.WriteLine("Echec de Connexion à SQL de base de données :" & Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1) & " Serveur : " & LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL"))
                                                        Label5.Text = "Echec de Connexion SQL à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec de traitement"
                                                    End If
                                                Else
                                                    ErreurJrn.WriteLine("Aucune Base Comptable Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                End If
                                            Else
                                                ErreurJrn.WriteLine("Aucune Base Commerciale Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Echec de traitement")
                                            End If
                                        Else
                                            If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Excel" Then
                                                If Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value) <> "" Then
                                                    If OleExcelConnected.State = ConnectionState.Open Then
                                                        OleExcelConnected.Close()
                                                    End If
                                                    If LoginAuFichierExcel(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)) = True Then
                                                        ArtAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & "' and nomtype='COMMERCIAL'", OleConnenection)
                                                        ArtDataset = New DataSet
                                                        ArtAdaptater.Fill(ArtDataset)
                                                        Artdatatable = ArtDataset.Tables(0)
                                                        If Artdatatable.Rows.Count <> 0 Then
                                                            CptaAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & "' and nomtype='COMPTABILITE'", OleConnenection)
                                                            CptaDataset = New DataSet
                                                            CptaAdaptater.Fill(CptaDataset)
                                                            Cptadatatable = CptaDataset.Tables(0)
                                                            If Cptadatatable.Rows.Count <> 0 Then
                                                                Dim Dataname() As String = Split(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "\")
                                                                If SocieteConnected(Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1), Trim(Cptadatatable.Rows(0).Item("MotPas").ToString), Trim(Cptadatatable.Rows(0).Item("NomUser")), LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL")) = True Then
                                                                    FermeBaseCial(BaseCial)
                                                                    If OuvreBaseCial(BaseCial, BaseCpta, Trim(Artdatatable.Rows(0).Item("Chemin1")), Trim(Cptadatatable.Rows(0).Item("Chemin1")), Trim(Artdatatable.Rows(0).Item("UserSage")), Trim(Artdatatable.Rows(0).Item("PasseSage").ToString), Trim(Cptadatatable.Rows(0).Item("UserSage")), Trim(Cptadatatable.Rows(0).Item("PasseSage"))) = True Then
                                                                        ErreurJrn.WriteLine("Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Reussie")
                                                                        ErreurJrn.WriteLine("")
                                                                        ErreurJrn.WriteLine("Début de traitement du fichier : " & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                        ErreurJrn.WriteLine("")
                                                                        Label5.Refresh()
                                                                        If Modification_Verification_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value), "", LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value)) = True Then
                                                                            Label5.Text = "Modification En Cours..."
                                                                            Modification_Integration_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value), "", LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                            RecuperationEnregistrementModifié(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), Trim(DataListeIntegrer.Rows(i).Cells("FeuilleExcel").Value), "", ListePiece, LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))))
                                                                            If DataListeIntegrer.Rows(i).Cells("Cible").Value = "FTP" Then
                                                                                Dim FtpAdaptater As OleDbDataAdapter
                                                                                Dim FtpDataset As DataSet
                                                                                Dim Ftpdatatable As DataTable
                                                                                FtpAdaptater = New OleDbDataAdapter("select * from  SCHEMAS_IMPMOUV WHERE Cible='FTP' And IDDossier=" & CInt(DataListeIntegrer.Rows(i).Cells("ID").Value) & "", OleConnenection)
                                                                                FtpDataset = New DataSet
                                                                                FtpAdaptater.Fill(FtpDataset)
                                                                                Ftpdatatable = FtpDataset.Tables(0)
                                                                                If Ftpdatatable.Rows.Count <> 0 Then
                                                                                    If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                        If exceptionTrouve = True Then
                                                                                            'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                            effaceFichier("FTP://" & RetourneServeurFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & RetourneDirectoryFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value), RetourneUserFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), RetournePassWordFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), ErreurJrn)
                                                                                            File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                            Label5.Refresh()
                                                                                            Label5.Text = "Modification Terminée!"
                                                                                        Else
                                                                                            'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                            File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                            Label5.Refresh()
                                                                                            Label5.Text = "Modification Terminée! Suppression des Fichiers exécutée..."
                                                                                        End If
                                                                                    Else
                                                                                        File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Modification Terminée!"
                                                                                    End If
                                                                                End If
                                                                            Else
                                                                                If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                    If exceptionTrouve = True Then
                                                                                        'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Modification Terminée!"
                                                                                    Else
                                                                                        'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                        File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Modification Terminée! Suppression des Fichiers exécutée..."
                                                                                    End If
                                                                                Else
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Modification Terminée!"
                                                                                End If
                                                                            End If
                                                                        End If
                                                                        If OleExcelConnected.State = ConnectionState.Open Then
                                                                            OleExcelConnected.Close()
                                                                        End If
                                                                        DataListeIntegrer.Rows(i).Cells("Valider").Value = False
                                                                    Else
                                                                        ErreurJrn.WriteLine("Connexion à la Société - Base Commerciale :" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " -Base Comptable :" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec")
                                                                        Label5.Text = "Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec"
                                                                    End If
                                                                Else
                                                                    ErreurJrn.WriteLine("Echec de Connexion à SQL de base de données :" & Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1) & " Serveur : " & LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL"))
                                                                    Label5.Text = "Echec de Connexion SQL à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec de traitement"
                                                                End If
                                                            Else
                                                                ErreurJrn.WriteLine("Aucune Base Comptable Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                            End If
                                                        Else
                                                            ErreurJrn.WriteLine("Aucune Base Commerciale Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Echec de traitement")
                                                        End If

                                                    Else
                                                        Label5.Text = "Echec de Connexion au fichier Excel :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement"
                                                        ErreurJrn.WriteLine("Echec de Connexion au fichier Excel :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement")
                                                    End If
                                                Else
                                                    Label5.Text = "Aucune Feuille Excel paramétrée pour le fichier :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement"
                                                    ErreurJrn.WriteLine("Aucune Feuille Excel paramétrée pour le fichier :" & Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value) & " : Echec de traitement")
                                                End If
                                            Else
                                                If Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)) = "Longueur Fixe" Then
                                                    ArtAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & "' and nomtype='COMMERCIAL'", OleConnenection)
                                                    ArtDataset = New DataSet
                                                    ArtAdaptater.Fill(ArtDataset)
                                                    Artdatatable = ArtDataset.Tables(0)
                                                    If Artdatatable.Rows.Count <> 0 Then
                                                        CptaAdaptater = New OleDbDataAdapter("select * from PARAMETRE  Where  Societe='" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & "' and nomtype='COMPTABILITE'", OleConnenection)
                                                        CptaDataset = New DataSet
                                                        CptaAdaptater.Fill(CptaDataset)
                                                        Cptadatatable = CptaDataset.Tables(0)
                                                        If Cptadatatable.Rows.Count <> 0 Then
                                                            Dim Dataname() As String = Split(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "\")
                                                            If SocieteConnected(Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1), Trim(Cptadatatable.Rows(0).Item("MotPas").ToString), Trim(Cptadatatable.Rows(0).Item("NomUser")), LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL")) = True Then
                                                                FermeBaseCial(BaseCial)
                                                                If OuvreBaseCial(BaseCial, BaseCpta, Trim(Artdatatable.Rows(0).Item("Chemin1")), Trim(Cptadatatable.Rows(0).Item("Chemin1")), Trim(Artdatatable.Rows(0).Item("UserSage")), Trim(Artdatatable.Rows(0).Item("PasseSage").ToString), Trim(Cptadatatable.Rows(0).Item("UserSage")), Trim(Cptadatatable.Rows(0).Item("PasseSage"))) = True Then
                                                                    ErreurJrn.WriteLine("Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Reussie")
                                                                    Label5.Refresh()
                                                                    ErreurJrn.WriteLine("")
                                                                    ErreurJrn.WriteLine("Début de traitement du fichier : " & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                    ErreurJrn.WriteLine("")
                                                                    Label5.Refresh()
                                                                    If Modification_Verification_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", "", LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value)) = True Then
                                                                        Label5.Text = "Modification En Cours..."
                                                                        Modification_Integration_Fichier(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", "", LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))), RenvoieFormatDate(DataListeIntegrer.Rows(i).Cells("Chemin").Value))
                                                                        RecuperationEnregistrementModifié(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value)), "", "", ListePiece, LirePieceModification(DataListeIntegrer.Rows(i).Cells("Chemin").Value, Renvoietypeformat(Trim(DataListeIntegrer.Rows(i).Cells("TypeFormat").Value))))
                                                                        If DataListeIntegrer.Rows(i).Cells("Cible").Value = "FTP" Then
                                                                            Dim FtpAdaptater As OleDbDataAdapter
                                                                            Dim FtpDataset As DataSet
                                                                            Dim Ftpdatatable As DataTable
                                                                            FtpAdaptater = New OleDbDataAdapter("select * from  SCHEMAS_IMPMOUV WHERE Cible='FTP' And IDDossier=" & CInt(DataListeIntegrer.Rows(i).Cells("ID").Value) & "", OleConnenection)
                                                                            FtpDataset = New DataSet
                                                                            FtpAdaptater.Fill(FtpDataset)
                                                                            Ftpdatatable = FtpDataset.Tables(0)
                                                                            If Ftpdatatable.Rows.Count <> 0 Then
                                                                                If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                    If exceptionTrouve = True Then
                                                                                        'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                        File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Modification Terminée!"
                                                                                    Else
                                                                                        'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                        effaceFichier("FTP://" & RetourneServeurFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & RetourneDirectoryFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")) & "/" & System.IO.Path.GetFileName(DataListeIntegrer.Rows(i).Cells("CheminExport").Value), RetourneUserFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), RetournePassWordFtp(Ftpdatatable.Rows(0).Item("CheminFilexport")), ErreurJrn)
                                                                                        File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                        Label5.Refresh()
                                                                                        Label5.Text = "Modification Terminée! Suppression des Fichiers exécutée..."
                                                                                    End If
                                                                                Else
                                                                                    File.Delete(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Modification Terminée!"
                                                                                End If
                                                                            End If
                                                                        Else
                                                                            If DataListeIntegrer.Rows(i).Cells("Deplace").Value = True Then
                                                                                If exceptionTrouve = True Then
                                                                                    'Il y'a une erreur au niveau de l'importation des articles à partir du fichier, on deplace pas le fichier
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Modification Terminée!"
                                                                                Else
                                                                                    'Deplacement du fichier vers les repertoire de sauvegarde
                                                                                    File.Move(DataListeIntegrer.Rows(i).Cells("CheminExport").Value, PathsfileSave & "" & Strings.Right(DateAndTime.Year(Now), 2) & "" & Format(DateAndTime.Month(Now), "00") & "" & Format(DateAndTime.Day(Now), "00") & "[" & "" & Format(DateAndTime.Hour(Now), "00") & "-" & Format(DateAndTime.Minute(Now), "00") & "-" & Format(DateAndTime.Second(Now), "00") & "]" & System.IO.Path.GetFileName(Trim(DataListeIntegrer.Rows(i).Cells("CheminExport").Value)))
                                                                                    Label5.Refresh()
                                                                                    Label5.Text = "Modification Terminée! Suppression des Fichiers exécutée..."
                                                                                End If
                                                                            Else
                                                                                Label5.Refresh()
                                                                                Label5.Text = "Modification Terminée!"
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    DataListeIntegrer.Rows(i).Cells("Valider").Value = False
                                                                Else
                                                                    ErreurJrn.WriteLine("Connexion à la Société - Base Commerciale :" & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " -Base Comptable :" & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec")
                                                                    Label5.Text = "Connexion à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec"
                                                                End If
                                                            Else
                                                                ErreurJrn.WriteLine("Echec de Connexion à SQL de base de données :" & Strings.Left(Dataname(UBound(Dataname)), InStr(Dataname(UBound(Dataname)), ".") - 1) & " Serveur : " & LireChaine(Trim(Cptadatatable.Rows(0).Item("Chemin1")), "CBASE", "ServeurSQL"))
                                                                Label5.Text = "Echec de Connexion SQL à la Société " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " : Echec de traitement"
                                                            End If
                                                        Else
                                                            ErreurJrn.WriteLine("Aucune Base Comptable Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Comptable").Value) & " Echec de traitement")
                                                        End If
                                                    Else
                                                        ErreurJrn.WriteLine("Aucune Base Commerciale Correspondant à : " & Trim(DataListeIntegrer.Rows(i).Cells("Commercial").Value) & " Echec de traitement")
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                Else
                                    ErreurJrn.WriteLine("Chemin du fichier inexistant : " & DataListeIntegrer.Rows(i).Cells("Chemin").Value)
                                End If
                            End If
                        End If
                    End If
                Next i
                ErreurJrn.Close()
            End If
            AfficheSchemasIntegrer()
            Affichagefichier()
            encours.Close()
            FermeBaseCial(BaseCial)
        Catch ex As Exception
            encours.Close()
            exceptionTrouve = True
            If IsNothing(ErreurJrn) = False Then
                ErreurJrn.WriteLine("Erreur système :" & ex.Message)
                ErreurJrn.Close()
            End If
        End Try
        Me.Cursor = Cursors.Default
    End Sub
    Private Sub DataListeIntegrer_CellMouseLeave(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DataListeIntegrer.CellMouseLeave
        Dim i As Integer
        Try
            If DataListeIntegrer.Columns(e.ColumnIndex).Name = "Valider" Then
                For i = 0 To DataListeIntegrer.RowCount - 1
                    If DataListeIntegrer.Rows(i).Cells("Valider").Value = True Then
                        IndexPrec = i
                        i = DataListeIntegrer.RowCount - 1
                    End If

                Next i
            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub DataListeIntegrer_CellValidated(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DataListeIntegrer.CellValidated
        Dim i As Integer
        Try
            If DataListeIntegrer.Columns(e.ColumnIndex).Name = "Valider" Then
                For i = 0 To DataListeIntegrer.RowCount - 1
                    If DataListeIntegrer.Rows(i).Cells("Valider").Value = True Then
                        IndexPrec = i
                        i = DataListeIntegrer.RowCount - 1
                    End If

                Next i
            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub DataListeIntegrer_CellValueChanged(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs) Handles DataListeIntegrer.CellValueChanged
        Dim i As Integer
        Try
            If DataListeIntegrer.Columns(e.ColumnIndex).Name = "Valider" Then
                For i = 0 To DataListeIntegrer.RowCount - 1
                    If DataListeIntegrer.Rows(i).Cells("Valider").Value = True Then
                        IndexPrec = i
                        i = DataListeIntegrer.RowCount - 1
                    End If

                Next i
            End If
        Catch ex As Exception

        End Try
    End Sub
    Private Sub BT_Apercue_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BT_Apercue.Click
        Try
            If IndexPrec >= 0 Then
                If Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value)) = "Délimité" Or Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))) = "Tabulation" Or Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))) = "Pipe" Then
                    If Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))) = "Tabulation" Then
                        sColumnsSepar = ControlChars.Tab
                    Else
                        If Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))) = "Pipe" Then
                            sColumnsSepar = "|"
                        Else
                            sColumnsSepar = ";"
                        End If
                    End If
                    If DataListeIntegrer.Rows(IndexPrec).Cells("Valider").Value = True Then
                        If File.Exists(DataListeIntegrer.Rows(IndexPrec).Cells("Chemin").Value) = True And File.Exists(DataListeIntegrer.Rows(IndexPrec).Cells("CheminExport").Value) Then
                            Lecture_Suivant_DuFichierExcel(DataListeIntegrer.Rows(IndexPrec).Cells("CheminExport").Value, DataListeIntegrer.Rows(IndexPrec).Cells("Chemin").Value, Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))), "", sColumnsSepar)
                        End If
                    End If
                Else
                    If Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))) = "Excel" Then
                        If Trim(DataListeIntegrer.Rows(IndexPrec).Cells("FeuilleExcel").Value) <> "" Then
                            If DataListeIntegrer.Rows(IndexPrec).Cells("Valider").Value = True Then
                                If File.Exists(DataListeIntegrer.Rows(IndexPrec).Cells("Chemin").Value) = True And File.Exists(DataListeIntegrer.Rows(IndexPrec).Cells("CheminExport").Value) Then
                                    If OleExcelConnected.State = ConnectionState.Open Then
                                        OleExcelConnected.Close()
                                    End If
                                    Lecture_Suivant_DuFichierExcel(DataListeIntegrer.Rows(IndexPrec).Cells("CheminExport").Value, DataListeIntegrer.Rows(IndexPrec).Cells("Chemin").Value, Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))), Trim(DataListeIntegrer.Rows(IndexPrec).Cells("FeuilleExcel").Value), "")
                                End If
                            End If
                        Else
                            MsgBox("La Feuille Excel n'est pas renseignée", MsgBoxStyle.Information, "Import des Fichiers")
                        End If
                    Else
                        If Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))) = "Longueur Fixe" Then
                            If DataListeIntegrer.Rows(IndexPrec).Cells("Valider").Value = True Then
                                If File.Exists(DataListeIntegrer.Rows(IndexPrec).Cells("Chemin").Value) = True And File.Exists(DataListeIntegrer.Rows(IndexPrec).Cells("CheminExport").Value) Then
                                    Lecture_Suivant_DuFichierExcel(DataListeIntegrer.Rows(IndexPrec).Cells("CheminExport").Value, DataListeIntegrer.Rows(IndexPrec).Cells("Chemin").Value, Trim(Renvoietypeformat(Trim(DataListeIntegrer.Rows(IndexPrec).Cells("TypeFormat").Value))), "", "")
                                End If
                            End If
                        End If
                    End If
                End If
            End If
        Catch ex As Exception

        End Try
        If OleExcelConnected.State = ConnectionState.Open Then
            OleExcelConnected.Close()
        End If
    End Sub
    Private Function LirePieceModification(ByRef ScheminFileFormat As String, ByRef Lireformatype As String) As Object
        Dim NomColonne As String
        Dim NomEntete As String
        Dim PosLeft As Integer
        Dim poslongueur, PieceCmde, LigneArticle As String
        Dim Defaut, Piece, SageFichier As String
        Dim ValeurDefaut, Infolibre As String
        Try
            If Trim(ScheminFileFormat) <> "" Then
                If File.Exists(ScheminFileFormat) = True Then
                    Dim FileXml As New XmlTextReader(Trim(ScheminFileFormat))
                    While (FileXml.Read())
                        If FileXml.LocalName = "ColUse" Then
                            NomColonne = FileXml.ReadString

                            FileXml.Read()
                            NomEntete = FileXml.ReadString

                            FileXml.Read()
                            PosLeft = FileXml.ReadString

                            If Trim(Lireformatype) = "Excel" Then
                            Else
                                If Trim(Lireformatype) = "Longueur Fixe" Then
                                    FileXml.Read()
                                    poslongueur = FileXml.ReadString
                                End If
                            End If

                            FileXml.Read()
                            Infolibre = FileXml.ReadString

                            FileXml.Read()
                            SageFichier = FileXml.ReadString

                            FileXml.Read()
                            Piece = FileXml.ReadString

                            FileXml.Read()
                            PieceCmde = FileXml.ReadString

                            FileXml.Read()
                            LigneArticle = FileXml.ReadString

                            FileXml.Read()
                            Defaut = FileXml.ReadString

                            FileXml.Read()
                            ValeurDefaut = FileXml.ReadString
                            If Trim(Piece) = "oui" Then
                                Result = NomEntete
                                Exit While
                            End If
                        End If
                    End While
                    FileXml.Close()
                End If
            End If
        Catch ex As Exception
        End Try
        Return Result
    End Function
    Private Function LirePieceCreation(ByRef ScheminFileFormat As String, ByRef Lireformatype As String) As Object
        Dim NomColonne As String
        Dim NomEntete As String
        Dim PosLeft As Integer
        Dim poslongueur, PieceCmde, LigneArticle As String
        Dim Defaut, Piece, SageFichier As String
        Dim ValeurDefaut, Infolibre As String
        Result = ""
        Try
            If Trim(ScheminFileFormat) <> "" Then
                If File.Exists(ScheminFileFormat) = True Then
                    Dim FileXml As New XmlTextReader(Trim(ScheminFileFormat))
                    While (FileXml.Read())
                        If FileXml.LocalName = "ColUse" Then
                            NomColonne = FileXml.ReadString

                            FileXml.Read()
                            NomEntete = FileXml.ReadString

                            FileXml.Read()
                            PosLeft = FileXml.ReadString

                            If Trim(Lireformatype) = "Excel" Then
                            Else
                                If Trim(Lireformatype) = "Longueur Fixe" Then
                                    FileXml.Read()
                                    poslongueur = FileXml.ReadString
                                End If
                            End If

                            FileXml.Read()
                            Infolibre = FileXml.ReadString

                            FileXml.Read()
                            SageFichier = FileXml.ReadString

                            FileXml.Read()
                            Piece = FileXml.ReadString

                            FileXml.Read()
                            PieceCmde = FileXml.ReadString

                            FileXml.Read()
                            LigneArticle = FileXml.ReadString

                            FileXml.Read()
                            Defaut = FileXml.ReadString

                            FileXml.Read()
                            ValeurDefaut = FileXml.ReadString
                            If Trim(Piece) = "oui" Then
                                Result = NomEntete
                                Exit While
                            End If
                        End If
                    End While
                    FileXml.Close()
                End If
            End If
        Catch ex As Exception
        End Try
        Return Result
    End Function
    Private Function RenvoieFormatDate(ByVal CheminFichier) As String
        Dim xdoc As XmlDocument
        Dim racine As XmlElement
        Dim nodelist As XmlNodeList
        Dim FormatDatelu As Object = Nothing
        Dim i As Integer
        Try
            If File.Exists(CheminFichier) = True Then
                Dim FileXml As New XmlTextReader(Trim(CheminFichier))
                xdoc = New XmlDocument
                xdoc.Load(Trim(CheminFichier))
                racine = xdoc.DocumentElement
                nodelist = racine.ChildNodes
                For i = 0 To nodelist.Count - 1
                    If Trim(nodelist.ItemOf(i).Name) = "DateFormat" Then
                        FormatDatelu = nodelist.ItemOf(i).InnerText
                        Exit For
                    End If
                Next i
                FileXml.Close()
            Else
                MsgBox("Nom du Format inexistant!", MsgBoxStyle.Information, "Format d'integration")
            End If
        Catch ex As Exception

        End Try
        RenvoieFormatDate = FormatDatelu
    End Function
    Private Sub RenvoiErr_Infolibre(ByRef DocPiece As Object, ByRef typDocumen As Object, ByRef TypeChamp As String, ByRef Nomchamp As String, ByRef valeurChamp As Object, ByRef Messagesystemm As String)
        If typDocumen = "0" Then
            ErreurJrn.WriteLine("Devis N° : " & Trim(DocPiece) & " Impossible de traiter l'information libre de type " & TypeChamp & " :" & Nomchamp & "  De  valeur entrée '" & Trim(valeurChamp) & " dans Sage. Message système " & Messagesystemm)
        Else
            If typDocumen = "12" Then
                ErreurJrn.WriteLine("Commande N° : " & Trim(DocPiece) & " Impossible de traiter l'information libre de type " & TypeChamp & " :" & Nomchamp & "  De  valeur entrée '" & Trim(valeurChamp) & " dans Sage. Message système " & Messagesystemm)
            Else
                If typDocumen = "13" Then
                    ErreurJrn.WriteLine("Bon de Reception N° : " & Trim(DocPiece) & " Impossible de traiter l'information libre de type " & TypeChamp & " :" & Nomchamp & "  De  valeur entrée '" & Trim(valeurChamp) & " dans Sage. Message système " & Messagesystemm)
                Else
                    If typDocumen = "16" Then
                        ErreurJrn.WriteLine("Facture Achat N° : " & Trim(DocPiece) & " Impossible de traiter l'information libre de type " & TypeChamp & " :" & Nomchamp & "  De  valeur entrée '" & Trim(valeurChamp) & " dans Sage. Message système " & Messagesystemm)
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub BT_SelAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BT_SelAll.Click
        Dim i As Integer
        For i = 0 To DataListeIntegrer.RowCount - 1
            DataListeIntegrer.Rows(i).Cells("Valider").Value = True
        Next i
    End Sub

    Private Sub BT_DelAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BT_DelAll.Click
        Dim i As Integer
        For i = 0 To DataListeIntegrer.RowCount - 1
            DataListeIntegrer.Rows(i).Cells("Valider").Value = False
        Next i
    End Sub
End Class
